
f1_pca_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba18  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800bb28  0800bb28  0001bb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be70  0800be70  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800be70  0800be70  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be70  0800be70  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be70  0800be70  0001be70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800be78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  20000080  0800bef8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d68  0800bef8  00021d68  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b5b0  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b36  00000000  00000000  0003b69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  0003f1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128a  00000000  00000000  00040970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044a9  00000000  00000000  00041bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba91  00000000  00000000  000460a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097524  00000000  00000000  00061b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e4c  00000000  00000000  000f9058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ffea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb10 	.word	0x0800bb10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800bb10 	.word	0x0800bb10

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <LSPB_Init>:
#include "LSPB.h"

// Hàm khởi tạo LSPB với các thông số đầu vào
void LSPB_Init(LSPB_Params* lspb, float q0, float qf, float v_max, float a_max, float t_total)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
    lspb->q0 = q0;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	615a      	str	r2, [r3, #20]
    lspb->qf = qf;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	619a      	str	r2, [r3, #24]
    lspb->t_total = t_total;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116a:	609a      	str	r2, [r3, #8]
    lspb->v_max = v_max;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	60da      	str	r2, [r3, #12]
    lspb->a_max = a_max;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6a3a      	ldr	r2, [r7, #32]
 8001176:	611a      	str	r2, [r3, #16]


// Accelaration time and constant time
    lspb->t_acc = lspb->v_max / lspb->a_max;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4619      	mov	r1, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f7ff fe8a 	bl	8000e9c <__aeabi_fdiv>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	601a      	str	r2, [r3, #0]
    lspb->t_const = lspb->t_total - 2 * lspb->t_acc;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	689c      	ldr	r4, [r3, #8]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fcc2 	bl	8000b24 <__addsf3>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff fcbb 	bl	8000b20 <__aeabi_fsub>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	605a      	str	r2, [r3, #4]
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd90      	pop	{r4, r7, pc}

080011ba <LSPB_CalculatePosition>:

// Calculate angle based on LSPB
float LSPB_CalculatePosition(LSPB_Params* lspb, float t) {
 80011ba:	b5b0      	push	{r4, r5, r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
    float q;

    if (lspb->qf - lspb->q0 > 0)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f7ff fca6 	bl	8000b20 <__aeabi_fsub>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f04f 0100 	mov.w	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff66 	bl	80010ac <__aeabi_fcmpgt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80db 	beq.w	800139e <LSPB_CalculatePosition+0x1e4>
    {
        // Initial blend
        if (t < lspb->t_acc)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f7ff ff3e 	bl	8001070 <__aeabi_fcmplt>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d01a      	beq.n	8001230 <LSPB_CalculatePosition+0x76>
        {
            q = lspb->q0 + 0.5f * lspb->a_max * t * t;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695c      	ldr	r4, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fd94 	bl	8000d34 <__aeabi_fmul>
 800120c:	4603      	mov	r3, r0
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fd8f 	bl	8000d34 <__aeabi_fmul>
 8001216:	4603      	mov	r3, r0
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fd8a 	bl	8000d34 <__aeabi_fmul>
 8001220:	4603      	mov	r3, r0
 8001222:	4619      	mov	r1, r3
 8001224:	4620      	mov	r0, r4
 8001226:	f7ff fc7d 	bl	8000b24 <__addsf3>
 800122a:	4603      	mov	r3, r0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e1a6      	b.n	800157e <LSPB_CalculatePosition+0x3c4>
        }
        // Constant velocity
        else if (t < (lspb->t_acc + lspb->t_const))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4619      	mov	r1, r3
 800123a:	4610      	mov	r0, r2
 800123c:	f7ff fc72 	bl	8000b24 <__addsf3>
 8001240:	4603      	mov	r3, r0
 8001242:	4619      	mov	r1, r3
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f7ff ff13 	bl	8001070 <__aeabi_fcmplt>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d034      	beq.n	80012ba <LSPB_CalculatePosition+0x100>
        {
            q = lspb->q0 + 0.5f * lspb->a_max * lspb->t_acc * lspb->t_acc +
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695c      	ldr	r4, [r3, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fd69 	bl	8000d34 <__aeabi_fmul>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4619      	mov	r1, r3
 800126c:	4610      	mov	r0, r2
 800126e:	f7ff fd61 	bl	8000d34 <__aeabi_fmul>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f7ff fd59 	bl	8000d34 <__aeabi_fmul>
 8001282:	4603      	mov	r3, r0
 8001284:	4619      	mov	r1, r3
 8001286:	4620      	mov	r0, r4
 8001288:	f7ff fc4c 	bl	8000b24 <__addsf3>
 800128c:	4603      	mov	r3, r0
 800128e:	461d      	mov	r5, r3
                lspb->v_max * (t - lspb->t_acc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68dc      	ldr	r4, [r3, #12]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f7ff fc40 	bl	8000b20 <__aeabi_fsub>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4620      	mov	r0, r4
 80012a6:	f7ff fd45 	bl	8000d34 <__aeabi_fmul>
 80012aa:	4603      	mov	r3, r0
            q = lspb->q0 + 0.5f * lspb->a_max * lspb->t_acc * lspb->t_acc +
 80012ac:	4619      	mov	r1, r3
 80012ae:	4628      	mov	r0, r5
 80012b0:	f7ff fc38 	bl	8000b24 <__addsf3>
 80012b4:	4603      	mov	r3, r0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e161      	b.n	800157e <LSPB_CalculatePosition+0x3c4>
        }
        // Final blend
        else if (t < lspb->t_total)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	4619      	mov	r1, r3
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f7ff fed5 	bl	8001070 <__aeabi_fcmplt>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d064      	beq.n	8001396 <LSPB_CalculatePosition+0x1dc>
        {
            float t_dec = t - lspb->t_acc - lspb->t_const;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff fc24 	bl	8000b20 <__aeabi_fsub>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4619      	mov	r1, r3
 80012e2:	4610      	mov	r0, r2
 80012e4:	f7ff fc1c 	bl	8000b20 <__aeabi_fsub>
 80012e8:	4603      	mov	r3, r0
 80012ea:	60fb      	str	r3, [r7, #12]
            q = lspb->q0 + 0.5f * lspb->a_max * lspb->t_acc * lspb->t_acc +
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695c      	ldr	r4, [r3, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fd1b 	bl	8000d34 <__aeabi_fmul>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	4610      	mov	r0, r2
 800130a:	f7ff fd13 	bl	8000d34 <__aeabi_fmul>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	4610      	mov	r0, r2
 800131a:	f7ff fd0b 	bl	8000d34 <__aeabi_fmul>
 800131e:	4603      	mov	r3, r0
 8001320:	4619      	mov	r1, r3
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff fbfe 	bl	8000b24 <__addsf3>
 8001328:	4603      	mov	r3, r0
 800132a:	461c      	mov	r4, r3
                lspb->v_max * lspb->t_const +
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4619      	mov	r1, r3
 8001336:	4610      	mov	r0, r2
 8001338:	f7ff fcfc 	bl	8000d34 <__aeabi_fmul>
 800133c:	4603      	mov	r3, r0
            q = lspb->q0 + 0.5f * lspb->a_max * lspb->t_acc * lspb->t_acc +
 800133e:	4619      	mov	r1, r3
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff fbef 	bl	8000b24 <__addsf3>
 8001346:	4603      	mov	r3, r0
 8001348:	461c      	mov	r4, r3
                lspb->v_max * t_dec - 0.5f * lspb->a_max * t_dec * t_dec;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	68f9      	ldr	r1, [r7, #12]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fcef 	bl	8000d34 <__aeabi_fmul>
 8001356:	4603      	mov	r3, r0
                lspb->v_max * lspb->t_const +
 8001358:	4619      	mov	r1, r3
 800135a:	4620      	mov	r0, r4
 800135c:	f7ff fbe2 	bl	8000b24 <__addsf3>
 8001360:	4603      	mov	r3, r0
 8001362:	461c      	mov	r4, r3
                lspb->v_max * t_dec - 0.5f * lspb->a_max * t_dec * t_dec;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fce1 	bl	8000d34 <__aeabi_fmul>
 8001372:	4603      	mov	r3, r0
 8001374:	68f9      	ldr	r1, [r7, #12]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fcdc 	bl	8000d34 <__aeabi_fmul>
 800137c:	4603      	mov	r3, r0
 800137e:	68f9      	ldr	r1, [r7, #12]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fcd7 	bl	8000d34 <__aeabi_fmul>
 8001386:	4603      	mov	r3, r0
            q = lspb->q0 + 0.5f * lspb->a_max * lspb->t_acc * lspb->t_acc +
 8001388:	4619      	mov	r1, r3
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff fbc8 	bl	8000b20 <__aeabi_fsub>
 8001390:	4603      	mov	r3, r0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e0f3      	b.n	800157e <LSPB_CalculatePosition+0x3c4>
        }
        // End journey
        else
        {
            q = lspb->qf;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e0ef      	b.n	800157e <LSPB_CalculatePosition+0x3c4>
        }
    }

    else if(lspb->qf - lspb->q0 < 0)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4610      	mov	r0, r2
 80013aa:	f7ff fbb9 	bl	8000b20 <__aeabi_fsub>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f04f 0100 	mov.w	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe5b 	bl	8001070 <__aeabi_fcmplt>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80db 	beq.w	8001578 <LSPB_CalculatePosition+0x3be>
    {
        // Initial blend
        if (t < lspb->t_acc)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4619      	mov	r1, r3
 80013c8:	6838      	ldr	r0, [r7, #0]
 80013ca:	f7ff fe51 	bl	8001070 <__aeabi_fcmplt>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d01a      	beq.n	800140a <LSPB_CalculatePosition+0x250>
        {
            q = lspb->q0 - 0.5f * lspb->a_max * t * t;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695c      	ldr	r4, [r3, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fca7 	bl	8000d34 <__aeabi_fmul>
 80013e6:	4603      	mov	r3, r0
 80013e8:	6839      	ldr	r1, [r7, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fca2 	bl	8000d34 <__aeabi_fmul>
 80013f0:	4603      	mov	r3, r0
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fc9d 	bl	8000d34 <__aeabi_fmul>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff fb8e 	bl	8000b20 <__aeabi_fsub>
 8001404:	4603      	mov	r3, r0
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	e0b9      	b.n	800157e <LSPB_CalculatePosition+0x3c4>
        }
        // Constant velocity
        else if (t < (lspb->t_acc + lspb->t_const))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4619      	mov	r1, r3
 8001414:	4610      	mov	r0, r2
 8001416:	f7ff fb85 	bl	8000b24 <__addsf3>
 800141a:	4603      	mov	r3, r0
 800141c:	4619      	mov	r1, r3
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f7ff fe26 	bl	8001070 <__aeabi_fcmplt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d034      	beq.n	8001494 <LSPB_CalculatePosition+0x2da>
        {
            q = lspb->q0 - 0.5f * lspb->a_max * lspb->t_acc * lspb->t_acc -
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695c      	ldr	r4, [r3, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fc7c 	bl	8000d34 <__aeabi_fmul>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f7ff fc74 	bl	8000d34 <__aeabi_fmul>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f7ff fc6c 	bl	8000d34 <__aeabi_fmul>
 800145c:	4603      	mov	r3, r0
 800145e:	4619      	mov	r1, r3
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff fb5d 	bl	8000b20 <__aeabi_fsub>
 8001466:	4603      	mov	r3, r0
 8001468:	461d      	mov	r5, r3
                lspb->v_max * (t - lspb->t_acc);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68dc      	ldr	r4, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4619      	mov	r1, r3
 8001474:	6838      	ldr	r0, [r7, #0]
 8001476:	f7ff fb53 	bl	8000b20 <__aeabi_fsub>
 800147a:	4603      	mov	r3, r0
 800147c:	4619      	mov	r1, r3
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff fc58 	bl	8000d34 <__aeabi_fmul>
 8001484:	4603      	mov	r3, r0
            q = lspb->q0 - 0.5f * lspb->a_max * lspb->t_acc * lspb->t_acc -
 8001486:	4619      	mov	r1, r3
 8001488:	4628      	mov	r0, r5
 800148a:	f7ff fb49 	bl	8000b20 <__aeabi_fsub>
 800148e:	4603      	mov	r3, r0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e074      	b.n	800157e <LSPB_CalculatePosition+0x3c4>
        }
        // Final blend
        else if (t < lspb->t_total)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4619      	mov	r1, r3
 800149a:	6838      	ldr	r0, [r7, #0]
 800149c:	f7ff fde8 	bl	8001070 <__aeabi_fcmplt>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d064      	beq.n	8001570 <LSPB_CalculatePosition+0x3b6>
        {
            float t_dec = t - lspb->t_acc - lspb->t_const;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	6838      	ldr	r0, [r7, #0]
 80014ae:	f7ff fb37 	bl	8000b20 <__aeabi_fsub>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4619      	mov	r1, r3
 80014bc:	4610      	mov	r0, r2
 80014be:	f7ff fb2f 	bl	8000b20 <__aeabi_fsub>
 80014c2:	4603      	mov	r3, r0
 80014c4:	613b      	str	r3, [r7, #16]
            q = lspb->q0 - 0.5f * lspb->a_max * lspb->t_acc * lspb->t_acc -
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695c      	ldr	r4, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fc2e 	bl	8000d34 <__aeabi_fmul>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	f7ff fc26 	bl	8000d34 <__aeabi_fmul>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f7ff fc1e 	bl	8000d34 <__aeabi_fmul>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fb0f 	bl	8000b20 <__aeabi_fsub>
 8001502:	4603      	mov	r3, r0
 8001504:	461c      	mov	r4, r3
                lspb->v_max * lspb->t_const -
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4619      	mov	r1, r3
 8001510:	4610      	mov	r0, r2
 8001512:	f7ff fc0f 	bl	8000d34 <__aeabi_fmul>
 8001516:	4603      	mov	r3, r0
            q = lspb->q0 - 0.5f * lspb->a_max * lspb->t_acc * lspb->t_acc -
 8001518:	4619      	mov	r1, r3
 800151a:	4620      	mov	r0, r4
 800151c:	f7ff fb00 	bl	8000b20 <__aeabi_fsub>
 8001520:	4603      	mov	r3, r0
 8001522:	461c      	mov	r4, r3
                lspb->v_max * t_dec + 0.5f * lspb->a_max * t_dec * t_dec;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	6939      	ldr	r1, [r7, #16]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fc02 	bl	8000d34 <__aeabi_fmul>
 8001530:	4603      	mov	r3, r0
                lspb->v_max * lspb->t_const -
 8001532:	4619      	mov	r1, r3
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff faf3 	bl	8000b20 <__aeabi_fsub>
 800153a:	4603      	mov	r3, r0
 800153c:	461c      	mov	r4, r3
                lspb->v_max * t_dec + 0.5f * lspb->a_max * t_dec * t_dec;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fbf4 	bl	8000d34 <__aeabi_fmul>
 800154c:	4603      	mov	r3, r0
 800154e:	6939      	ldr	r1, [r7, #16]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fbef 	bl	8000d34 <__aeabi_fmul>
 8001556:	4603      	mov	r3, r0
 8001558:	6939      	ldr	r1, [r7, #16]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fbea 	bl	8000d34 <__aeabi_fmul>
 8001560:	4603      	mov	r3, r0
            q = lspb->q0 - 0.5f * lspb->a_max * lspb->t_acc * lspb->t_acc -
 8001562:	4619      	mov	r1, r3
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff fadd 	bl	8000b24 <__addsf3>
 800156a:	4603      	mov	r3, r0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e006      	b.n	800157e <LSPB_CalculatePosition+0x3c4>
        }
        // End journey
        else
        {
            q = lspb->qf;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e002      	b.n	800157e <LSPB_CalculatePosition+0x3c4>
        }
    }
    else
    {
    	q = lspb->qf;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	617b      	str	r3, [r7, #20]
    }

    return q;
 800157e:	697b      	ldr	r3, [r7, #20]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bdb0      	pop	{r4, r5, r7, pc}

08001588 <cosf>:
#include <math.h>
#include <stdio.h>
#define PI 3.14159265358979323846

float cosf(float x)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	return cos(x);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7fe ff41 	bl	8000418 <__aeabi_f2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f008 fe33 	bl	800a208 <cos>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fa65 	bl	8000a78 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <sinf>:

float sinf(float x)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	return sin(x);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7fe ff29 	bl	8000418 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f008 fe61 	bl	800a294 <sin>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fa4d 	bl	8000a78 <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <InverseKinematics_Init>:

    if (*theta5 < - PI / 2) *theta5 += PI / 2;
    if (*theta5 >= PI / 2) *theta5 -= PI / 2;
}

void InverseKinematics_Init(InverseKinematics* ik, float d1, float a2, float a3, float a4, float d5) {
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
    ik->d1 = d1;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	601a      	str	r2, [r3, #0]
    ik->a2 = a2;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]
    ik->a3 = a3;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	609a      	str	r2, [r3, #8]
    ik->a4 = a4;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	60da      	str	r2, [r3, #12]
    ik->d5 = d5;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	611a      	str	r2, [r3, #16]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
	...

08001620 <InverseKinematics_Calculate>:


void InverseKinematics_Calculate(InverseKinematics* ik, float object[3], float theta[5])
{
 8001620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001624:	b08a      	sub	sp, #40	; 0x28
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
	float x, y, z;

	x = object[0];
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
	y = object[1];
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	623b      	str	r3, [r7, #32]

    // Compute theta1
	theta[0] = atan2(y, x);
 800163a:	6a38      	ldr	r0, [r7, #32]
 800163c:	f7fe feec 	bl	8000418 <__aeabi_f2d>
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
 8001644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001646:	f7fe fee7 	bl	8000418 <__aeabi_f2d>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f008 fd8f 	bl	800a174 <atan2>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fa0b 	bl	8000a78 <__aeabi_d2f>
 8001662:	4602      	mov	r2, r0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	601a      	str	r2, [r3, #0]

	z = object[2] + (ik->a4 + ik->d5);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	3308      	adds	r3, #8
 800166c:	681c      	ldr	r4, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	4619      	mov	r1, r3
 8001678:	4610      	mov	r0, r2
 800167a:	f7ff fa53 	bl	8000b24 <__addsf3>
 800167e:	4603      	mov	r3, r0
 8001680:	4619      	mov	r1, r3
 8001682:	4620      	mov	r0, r4
 8001684:	f7ff fa4e 	bl	8000b24 <__addsf3>
 8001688:	4603      	mov	r3, r0
 800168a:	61fb      	str	r3, [r7, #28]

    // Compute r và s
    float r = hypot(x,y);
 800168c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800168e:	f7fe fec3 	bl	8000418 <__aeabi_f2d>
 8001692:	4604      	mov	r4, r0
 8001694:	460d      	mov	r5, r1
 8001696:	6a38      	ldr	r0, [r7, #32]
 8001698:	f7fe febe 	bl	8000418 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f008 fd68 	bl	800a178 <hypot>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff f9e2 	bl	8000a78 <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
    float s = z - ik->d1;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	69f8      	ldr	r0, [r7, #28]
 80016c0:	f7ff fa2e 	bl	8000b20 <__aeabi_fsub>
 80016c4:	4603      	mov	r3, r0
 80016c6:	617b      	str	r3, [r7, #20]

    // Compute theta2 and theta3
    float D = (r * r + s * s - ik->a2 * ik->a2 - ik->a3 * ik->a3) / (- 2 * ik->a2 * ik->a3);
 80016c8:	69b9      	ldr	r1, [r7, #24]
 80016ca:	69b8      	ldr	r0, [r7, #24]
 80016cc:	f7ff fb32 	bl	8000d34 <__aeabi_fmul>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461c      	mov	r4, r3
 80016d4:	6979      	ldr	r1, [r7, #20]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff fb2c 	bl	8000d34 <__aeabi_fmul>
 80016dc:	4603      	mov	r3, r0
 80016de:	4619      	mov	r1, r3
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff fa1f 	bl	8000b24 <__addsf3>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461c      	mov	r4, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4619      	mov	r1, r3
 80016f4:	4610      	mov	r0, r2
 80016f6:	f7ff fb1d 	bl	8000d34 <__aeabi_fmul>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4619      	mov	r1, r3
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff fa0e 	bl	8000b20 <__aeabi_fsub>
 8001704:	4603      	mov	r3, r0
 8001706:	461c      	mov	r4, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f7ff fb0e 	bl	8000d34 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff f9ff 	bl	8000b20 <__aeabi_fsub>
 8001722:	4603      	mov	r3, r0
 8001724:	461c      	mov	r4, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fb00 	bl	8000d34 <__aeabi_fmul>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff faf8 	bl	8000d34 <__aeabi_fmul>
 8001744:	4603      	mov	r3, r0
 8001746:	4619      	mov	r1, r3
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff fba7 	bl	8000e9c <__aeabi_fdiv>
 800174e:	4603      	mov	r3, r0
 8001750:	613b      	str	r3, [r7, #16]
    if (D < -1 || D > 1)
 8001752:	4989      	ldr	r1, [pc, #548]	; (8001978 <InverseKinematics_Calculate+0x358>)
 8001754:	6938      	ldr	r0, [r7, #16]
 8001756:	f7ff fc8b 	bl	8001070 <__aeabi_fcmplt>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	f040 80fa 	bne.w	8001956 <InverseKinematics_Calculate+0x336>
 8001762:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001766:	6938      	ldr	r0, [r7, #16]
 8001768:	f7ff fca0 	bl	80010ac <__aeabi_fcmpgt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	f040 80f1 	bne.w	8001956 <InverseKinematics_Calculate+0x336>
    {
        // Unreachable target
        return;
    }

    theta[2] = atan2(sqrt(1 - D * D), D) + PI / 36;
 8001774:	6939      	ldr	r1, [r7, #16]
 8001776:	6938      	ldr	r0, [r7, #16]
 8001778:	f7ff fadc 	bl	8000d34 <__aeabi_fmul>
 800177c:	4603      	mov	r3, r0
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001784:	f7ff f9cc 	bl	8000b20 <__aeabi_fsub>
 8001788:	4603      	mov	r3, r0
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fe44 	bl	8000418 <__aeabi_f2d>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f008 fd12 	bl	800a1c0 <sqrt>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	6938      	ldr	r0, [r7, #16]
 80017a2:	f7fe fe39 	bl	8000418 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f008 fce1 	bl	800a174 <atan2>
 80017b2:	a36b      	add	r3, pc, #428	; (adr r3, 8001960 <InverseKinematics_Calculate+0x340>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe fcd0 	bl	800015c <__adddf3>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f103 0408 	add.w	r4, r3, #8
 80017ca:	f7ff f955 	bl	8000a78 <__aeabi_d2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	6023      	str	r3, [r4, #0]

    theta[1] = PI - atan2(s, r) - atan2(ik->a3 * sinf(PI - theta[2]), ik->a2 + ik->a3 * cosf(PI - theta[2]));
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7fe fe20 	bl	8000418 <__aeabi_f2d>
 80017d8:	4604      	mov	r4, r0
 80017da:	460d      	mov	r5, r1
 80017dc:	69b8      	ldr	r0, [r7, #24]
 80017de:	f7fe fe1b 	bl	8000418 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4620      	mov	r0, r4
 80017e8:	4629      	mov	r1, r5
 80017ea:	f008 fcc3 	bl	800a174 <atan2>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	a15d      	add	r1, pc, #372	; (adr r1, 8001968 <InverseKinematics_Calculate+0x348>)
 80017f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017f8:	f7fe fcae 	bl	8000158 <__aeabi_dsub>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4690      	mov	r8, r2
 8001802:	4699      	mov	r9, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	689c      	ldr	r4, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3308      	adds	r3, #8
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe02 	bl	8000418 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	a153      	add	r1, pc, #332	; (adr r1, 8001968 <InverseKinematics_Calculate+0x348>)
 800181a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800181e:	f7fe fc9b 	bl	8000158 <__aeabi_dsub>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff f925 	bl	8000a78 <__aeabi_d2f>
 800182e:	4603      	mov	r3, r0
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fec1 	bl	80015b8 <sinf>
 8001836:	4603      	mov	r3, r0
 8001838:	4619      	mov	r1, r3
 800183a:	4620      	mov	r0, r4
 800183c:	f7ff fa7a 	bl	8000d34 <__aeabi_fmul>
 8001840:	4603      	mov	r3, r0
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fde8 	bl	8000418 <__aeabi_f2d>
 8001848:	4604      	mov	r4, r0
 800184a:	460d      	mov	r5, r1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685e      	ldr	r6, [r3, #4]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3308      	adds	r3, #8
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fddb 	bl	8000418 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	a140      	add	r1, pc, #256	; (adr r1, 8001968 <InverseKinematics_Calculate+0x348>)
 8001868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800186c:	f7fe fc74 	bl	8000158 <__aeabi_dsub>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f8fe 	bl	8000a78 <__aeabi_d2f>
 800187c:	4603      	mov	r3, r0
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fe82 	bl	8001588 <cosf>
 8001884:	4603      	mov	r3, r0
 8001886:	4619      	mov	r1, r3
 8001888:	4650      	mov	r0, sl
 800188a:	f7ff fa53 	bl	8000d34 <__aeabi_fmul>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	4630      	mov	r0, r6
 8001894:	f7ff f946 	bl	8000b24 <__addsf3>
 8001898:	4603      	mov	r3, r0
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fdbc 	bl	8000418 <__aeabi_f2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f008 fc64 	bl	800a174 <atan2>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4640      	mov	r0, r8
 80018b2:	4649      	mov	r1, r9
 80018b4:	f7fe fc50 	bl	8000158 <__aeabi_dsub>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1d1c      	adds	r4, r3, #4
 80018c4:	f7ff f8d8 	bl	8000a78 <__aeabi_d2f>
 80018c8:	4603      	mov	r3, r0
 80018ca:	6023      	str	r3, [r4, #0]


    theta[3] = PI + theta[2] - theta[1] - PI / 18;     //theta[3] = PI - (2 * PI - PI / 2 - theta[2] - PI + theta[1] - PI / 2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3308      	adds	r3, #8
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fda0 	bl	8000418 <__aeabi_f2d>
 80018d8:	a323      	add	r3, pc, #140	; (adr r3, 8001968 <InverseKinematics_Calculate+0x348>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fc3d 	bl	800015c <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4614      	mov	r4, r2
 80018e8:	461d      	mov	r5, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fd91 	bl	8000418 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4620      	mov	r0, r4
 80018fc:	4629      	mov	r1, r5
 80018fe:	f7fe fc2b 	bl	8000158 <__aeabi_dsub>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	a319      	add	r3, pc, #100	; (adr r3, 8001970 <InverseKinematics_Calculate+0x350>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fc22 	bl	8000158 <__aeabi_dsub>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f103 040c 	add.w	r4, r3, #12
 8001922:	f7ff f8a9 	bl	8000a78 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	6023      	str	r3, [r4, #0]

    theta[4] =  theta[0] + PI / 36;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fd72 	bl	8000418 <__aeabi_f2d>
 8001934:	a30a      	add	r3, pc, #40	; (adr r3, 8001960 <InverseKinematics_Calculate+0x340>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fc0f 	bl	800015c <__adddf3>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f103 0410 	add.w	r4, r3, #16
 800194c:	f7ff f894 	bl	8000a78 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	6023      	str	r3, [r4, #0]
 8001954:	e000      	b.n	8001958 <InverseKinematics_Calculate+0x338>
        return;
 8001956:	bf00      	nop
//       MatMultiply((const float*)R0_3_inv, (const float*)R0_5, (float*)R3_5, 3, 3, 3);
//
//       // Compute theta4 and theta5
//       computeTheta4Theta5(R3_5, &theta[3], &theta[4]);

}
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001960:	4ae74487 	.word	0x4ae74487
 8001964:	3fb65718 	.word	0x3fb65718
 8001968:	54442d18 	.word	0x54442d18
 800196c:	400921fb 	.word	0x400921fb
 8001970:	4ae74487 	.word	0x4ae74487
 8001974:	3fc65718 	.word	0x3fc65718
 8001978:	bf800000 	.word	0xbf800000
 800197c:	00000000 	.word	0x00000000

08001980 <rad2deg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


float rad2deg(float radian) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    return radian * (180.0f / PI);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7fe fd45 	bl	8000418 <__aeabi_f2d>
 800198e:	a308      	add	r3, pc, #32	; (adr r3, 80019b0 <rad2deg+0x30>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fd98 	bl	80004c8 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff f86a 	bl	8000a78 <__aeabi_d2f>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	1a63c1f8 	.word	0x1a63c1f8
 80019b4:	404ca5dc 	.word	0x404ca5dc

080019b8 <convertThetaArrayToDegrees>:

void convertThetaArrayToDegrees(float arr[5])
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    for (int b = 0; b < 5; b++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e010      	b.n	80019e8 <convertThetaArrayToDegrees+0x30>
    {
        arr[b] = rad2deg(arr[b]);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	6819      	ldr	r1, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	18d4      	adds	r4, r2, r3
 80019d8:	4608      	mov	r0, r1
 80019da:	f7ff ffd1 	bl	8001980 <rad2deg>
 80019de:	4603      	mov	r3, r0
 80019e0:	6023      	str	r3, [r4, #0]
    for (int b = 0; b < 5; b++)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	ddeb      	ble.n	80019c6 <convertThetaArrayToDegrees+0xe>
    }
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}

080019f8 <angleToPWM>:

float angleToPWM(float angle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    float pwm_value = MIN_PULSE_WIDTH + (angle * (MAX_PULSE_WIDTH - MIN_PULSE_WIDTH)) / 180.0f;
 8001a00:	490a      	ldr	r1, [pc, #40]	; (8001a2c <angleToPWM+0x34>)
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff f996 	bl	8000d34 <__aeabi_fmul>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4909      	ldr	r1, [pc, #36]	; (8001a30 <angleToPWM+0x38>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fa45 	bl	8000e9c <__aeabi_fdiv>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <angleToPWM+0x3c>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f884 	bl	8000b24 <__addsf3>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60fb      	str	r3, [r7, #12]
    return pwm_value;
 8001a20:	68fb      	ldr	r3, [r7, #12]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	43ccc000 	.word	0x43ccc000
 8001a30:	43340000 	.word	0x43340000
 8001a34:	42ccc000 	.word	0x42ccc000

08001a38 <PWMToAngle>:

float PWMToAngle(int pwm_value)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    float angle = (pwm_value - MIN_PULSE_WIDTH) * 180.0f / (MAX_PULSE_WIDTH - MIN_PULSE_WIDTH);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff f923 	bl	8000c8c <__aeabi_i2f>
 8001a46:	4603      	mov	r3, r0
 8001a48:	490a      	ldr	r1, [pc, #40]	; (8001a74 <PWMToAngle+0x3c>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f868 	bl	8000b20 <__aeabi_fsub>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4909      	ldr	r1, [pc, #36]	; (8001a78 <PWMToAngle+0x40>)
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f96d 	bl	8000d34 <__aeabi_fmul>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <PWMToAngle+0x44>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fa1c 	bl	8000e9c <__aeabi_fdiv>
 8001a64:	4603      	mov	r3, r0
 8001a66:	60fb      	str	r3, [r7, #12]
    return angle;
 8001a68:	68fb      	ldr	r3, [r7, #12]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	42ccc000 	.word	0x42ccc000
 8001a78:	43340000 	.word	0x43340000
 8001a7c:	43ccc000 	.word	0x43ccc000

08001a80 <control>:

void control(float *current_angles, float *target_angles, float *vmax, PID_Controller pid, LSPB_Params *lspb, float Kp, float Ki, float Kd, float dt)
{
 8001a80:	b082      	sub	sp, #8
 8001a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a86:	b092      	sub	sp, #72	; 0x48
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	65fb      	str	r3, [r7, #92]	; 0x5c
	float angles[5];
    // 2. Khởi tạo quỹ đạo LSPB cho từng khớp
    for (int i = 0; i < 5; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a96:	e03d      	b.n	8001b14 <control+0x94>
    {
        LSPB_Init(&lspb[i], current_angles[i], target_angles[i], vmax[i], 2 * vmax[i], 2.0f);
 8001a98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aa6:	189c      	adds	r4, r3, r2
 8001aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	681d      	ldr	r5, [r3, #0]
 8001ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	4413      	add	r3, r2
 8001aba:	681e      	ldr	r6, [r3, #0]
 8001abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f8d3 8000 	ldr.w	r8, [r3]
 8001ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f825 	bl	8000b24 <__addsf3>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	9200      	str	r2, [sp, #0]
 8001ae6:	4643      	mov	r3, r8
 8001ae8:	4632      	mov	r2, r6
 8001aea:	4629      	mov	r1, r5
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff fb2d 	bl	800114c <LSPB_Init>
        current_angles[i] = angleToPWM(current_angles[i]);
 8001af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	6819      	ldr	r1, [r3, #0]
 8001afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	18d4      	adds	r4, r2, r3
 8001b04:	4608      	mov	r0, r1
 8001b06:	f7ff ff77 	bl	80019f8 <angleToPWM>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 5; i++)
 8001b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b10:	3301      	adds	r3, #1
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	ddbe      	ble.n	8001a98 <control+0x18>
//            angles[3] = PWMToAngle(current_angles[3]);
//			PCA9685_SetServoAngle(6, angles[3]);
//        }
//        osDelay((int)(DT * 10)); // Delay theo mili giây
//	}
	for (int i = 3; i < 5; i++)
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b1e:	e0b4      	b.n	8001c8a <control+0x20a>
	{
		for (float t = 0; t <= lspb[0].t_total + 1; t += DT)
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
 8001b26:	e09d      	b.n	8001c64 <control+0x1e4>
		{
			//3. LSPB để hoạch định quỹ đạo cho từng khớp tại th�?i điểm t
			float target_angle = LSPB_CalculatePosition(&lspb[i], t);
 8001b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	461a      	mov	r2, r3
 8001b34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b36:	4413      	add	r3, r2
 8001b38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fb3d 	bl	80011ba <LSPB_CalculatePosition>
 8001b40:	6278      	str	r0, [r7, #36]	; 0x24
			// 4. Chuyển đổi góc đích sang xung PWM
			target_angle = angleToPWM(target_angle);
 8001b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b44:	f7ff ff58 	bl	80019f8 <angleToPWM>
 8001b48:	6278      	str	r0, [r7, #36]	; 0x24

			PID_Init(&pid, Kp, Ki, Kd, target_angle, dt);
 8001b4a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001b60:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001b64:	f001 f970 	bl	8002e48 <PID_Init>

			// Vòng lặp đi�?u khiển servo để đạt tới góc mục tiêu bằng PID
			while (fabs(current_angles[i] - target_angle) > 0.1)
 8001b68:	e052      	b.n	8001c10 <control+0x190>
			{
				// 5. Tính toán PID để cập nhật xung PWM cho servo
				current_angles[i] += PID_Compute(&pid, current_angles[i]) * dt;
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4413      	add	r3, r2
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 f98b 	bl	8002e96 <PID_Compute>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f8d4 	bl	8000d34 <__aeabi_fmul>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	18d4      	adds	r4, r2, r3
 8001ba2:	f7fe ffbf 	bl	8000b24 <__addsf3>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6023      	str	r3, [r4, #0]

				// Chuyển đổi từ PWM sang góc
				angles[i] = PWMToAngle(current_angles[i]);
 8001baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fa83 	bl	80010c0 <__aeabi_f2iz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff3b 	bl	8001a38 <PWMToAngle>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	3340      	adds	r3, #64	; 0x40
 8001bca:	443b      	add	r3, r7
 8001bcc:	f843 2c30 	str.w	r2, [r3, #-48]
				if(i == 1)
 8001bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d10e      	bne.n	8001bf4 <control+0x174>
				{
					PCA9685_SetServoAngle_1(2 * i, angles[i]);
 8001bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	3340      	adds	r3, #64	; 0x40
 8001be4:	443b      	add	r3, r7
 8001be6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001bea:	4619      	mov	r1, r3
 8001bec:	4610      	mov	r0, r2
 8001bee:	f001 f8e7 	bl	8002dc0 <PCA9685_SetServoAngle_1>
 8001bf2:	e00d      	b.n	8001c10 <control+0x190>
				}
				else
				{
					PCA9685_SetServoAngle(2 * i, angles[i]);
 8001bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3340      	adds	r3, #64	; 0x40
 8001c02:	443b      	add	r3, r7
 8001c04:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f001 f894 	bl	8002d38 <PCA9685_SetServoAngle>
			while (fabs(current_angles[i] - target_angle) > 0.1)
 8001c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe ff7f 	bl	8000b20 <__aeabi_fsub>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fbf5 	bl	8000418 <__aeabi_f2d>
 8001c2e:	a37c      	add	r3, pc, #496	; (adr r3, 8001e20 <control+0x3a0>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fed8 	bl	80009e8 <__aeabi_dcmpgt>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d195      	bne.n	8001b6a <control+0xea>
				}
			}
			osDelay((int)(DT * 10)); // Delay theo mili giây
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f004 fec6 	bl	80069d0 <osDelay>
		for (float t = 0; t <= lspb[0].t_total + 1; t += DT)
 8001c44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c46:	f7fe fbe7 	bl	8000418 <__aeabi_f2d>
 8001c4a:	a377      	add	r3, pc, #476	; (adr r3, 8001e28 <control+0x3a8>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fa84 	bl	800015c <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff0c 	bl	8000a78 <__aeabi_d2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
 8001c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe ff59 	bl	8000b24 <__addsf3>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4619      	mov	r1, r3
 8001c76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c78:	f7ff fa04 	bl	8001084 <__aeabi_fcmple>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f47f af52 	bne.w	8001b28 <control+0xa8>
	for (int i = 3; i < 5; i++)
 8001c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c86:	3301      	adds	r3, #1
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	f77f af47 	ble.w	8001b20 <control+0xa0>
		}
	}
	for (int i = 0; i < 3; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
 8001c96:	e0b4      	b.n	8001e02 <control+0x382>
	{
		for (float t = 0; t <= lspb[0].t_total + 1; t += DT)
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c9e:	e09d      	b.n	8001ddc <control+0x35c>
		{
			//3. LSPB để hoạch định quỹ đạo cho từng khớp tại th�?i điểm t
			float target_angle = LSPB_CalculatePosition(&lspb[i], t);
 8001ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	461a      	mov	r2, r3
 8001cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cae:	4413      	add	r3, r2
 8001cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fa81 	bl	80011ba <LSPB_CalculatePosition>
 8001cb8:	62b8      	str	r0, [r7, #40]	; 0x28
			// 4. Chuyển đổi góc đích sang xung PWM
			target_angle = angleToPWM(target_angle);
 8001cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cbc:	f7ff fe9c 	bl	80019f8 <angleToPWM>
 8001cc0:	62b8      	str	r0, [r7, #40]	; 0x28

			PID_Init(&pid, Kp, Ki, Kd, target_angle, dt);
 8001cc2:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001cd8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001cdc:	f001 f8b4 	bl	8002e48 <PID_Init>

			// Vòng lặp đi�?u khiển servo để đạt tới góc mục tiêu bằng PID
			while (fabs(current_angles[i] - target_angle) > 0.1)
 8001ce0:	e052      	b.n	8001d88 <control+0x308>
			{
				// 5. Tính toán PID để cập nhật xung PWM cho servo
				current_angles[i] += PID_Compute(&pid, current_angles[i]) * dt;
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f001 f8cf 	bl	8002e96 <PID_Compute>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f818 	bl	8000d34 <__aeabi_fmul>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4618      	mov	r0, r3
 8001d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	18d4      	adds	r4, r2, r3
 8001d1a:	f7fe ff03 	bl	8000b24 <__addsf3>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6023      	str	r3, [r4, #0]

				// Chuyển đổi từ PWM sang góc
				angles[i] = PWMToAngle(current_angles[i]);
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4413      	add	r3, r2
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff f9c7 	bl	80010c0 <__aeabi_f2iz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fe7f 	bl	8001a38 <PWMToAngle>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	3340      	adds	r3, #64	; 0x40
 8001d42:	443b      	add	r3, r7
 8001d44:	f843 2c30 	str.w	r2, [r3, #-48]
				if(i == 1)
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10e      	bne.n	8001d6c <control+0x2ec>
				{
					PCA9685_SetServoAngle_1(2 * i, angles[i]);
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	3340      	adds	r3, #64	; 0x40
 8001d5c:	443b      	add	r3, r7
 8001d5e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f001 f82b 	bl	8002dc0 <PCA9685_SetServoAngle_1>
 8001d6a:	e00d      	b.n	8001d88 <control+0x308>
				}
				else
				{
					PCA9685_SetServoAngle(2 * i, angles[i]);
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	3340      	adds	r3, #64	; 0x40
 8001d7a:	443b      	add	r3, r7
 8001d7c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f000 ffd8 	bl	8002d38 <PCA9685_SetServoAngle>
			while (fabs(current_angles[i] - target_angle) > 0.1)
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fec3 	bl	8000b20 <__aeabi_fsub>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fb39 	bl	8000418 <__aeabi_f2d>
 8001da6:	a31e      	add	r3, pc, #120	; (adr r3, 8001e20 <control+0x3a0>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f7fe fe1c 	bl	80009e8 <__aeabi_dcmpgt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d195      	bne.n	8001ce2 <control+0x262>
				}
			}
			osDelay((int)(DT * 10)); // Delay theo mili giây
 8001db6:	2002      	movs	r0, #2
 8001db8:	f004 fe0a 	bl	80069d0 <osDelay>
		for (float t = 0; t <= lspb[0].t_total + 1; t += DT)
 8001dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dbe:	f7fe fb2b 	bl	8000418 <__aeabi_f2d>
 8001dc2:	a319      	add	r3, pc, #100	; (adr r3, 8001e28 <control+0x3a8>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe f9c8 	bl	800015c <__adddf3>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7fe fe50 	bl	8000a78 <__aeabi_d2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ddc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fe9d 	bl	8000b24 <__addsf3>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4619      	mov	r1, r3
 8001dee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001df0:	f7ff f948 	bl	8001084 <__aeabi_fcmple>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f47f af52 	bne.w	8001ca0 <control+0x220>
	for (int i = 0; i < 3; i++)
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfe:	3301      	adds	r3, #1
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	f77f af47 	ble.w	8001c98 <control+0x218>
		}
	}

	active = 0;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <control+0x3b0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	3740      	adds	r7, #64	; 0x40
 8001e14:	46bd      	mov	sp, r7
 8001e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1a:	b002      	add	sp, #8
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	9999999a 	.word	0x9999999a
 8001e24:	3fb99999 	.word	0x3fb99999
 8001e28:	9999999a 	.word	0x9999999a
 8001e2c:	3fc99999 	.word	0x3fc99999
 8001e30:	200000bc 	.word	0x200000bc
 8001e34:	00000000 	.word	0x00000000

08001e38 <control_back>:

void control_back(float *current_angles, float *target_angles, float *vmax, PID_Controller pid, LSPB_Params *lspb, float Kp, float Ki, float Kd, float dt)
{
 8001e38:	b082      	sub	sp, #8
 8001e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e3e:	b092      	sub	sp, #72	; 0x48
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	65fb      	str	r3, [r7, #92]	; 0x5c
	float angles[5];
    // 2. Khởi tạo quỹ đạo LSPB cho từng khớp
    for (int i = 0; i < 5; i++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e4e:	e03d      	b.n	8001ecc <control_back+0x94>
    {
        LSPB_Init(&lspb[i], current_angles[i], target_angles[i], vmax[i], 2 * vmax[i], 2.0f);
 8001e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e5e:	189c      	adds	r4, r3, r2
 8001e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	681d      	ldr	r5, [r3, #0]
 8001e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	4413      	add	r3, r2
 8001e72:	681e      	ldr	r6, [r3, #0]
 8001e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f8d3 8000 	ldr.w	r8, [r3]
 8001e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fe49 	bl	8000b24 <__addsf3>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	9200      	str	r2, [sp, #0]
 8001e9e:	4643      	mov	r3, r8
 8001ea0:	4632      	mov	r2, r6
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f7ff f951 	bl	800114c <LSPB_Init>
        current_angles[i] = angleToPWM(current_angles[i]);
 8001eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	6819      	ldr	r1, [r3, #0]
 8001eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	18d4      	adds	r4, r2, r3
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	f7ff fd9b 	bl	80019f8 <angleToPWM>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 5; i++)
 8001ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec8:	3301      	adds	r3, #1
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	ddbe      	ble.n	8001e50 <control_back+0x18>
    }
	for (int i = 2; i >= 0; i--)
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ed6:	e0b4      	b.n	8002042 <control_back+0x20a>
	{
		for (float t = 0; t <= lspb[0].t_total + 1; t += DT)
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ede:	e09d      	b.n	800201c <control_back+0x1e4>
		{
			//3. LSPB để hoạch định quỹ đạo cho từng khớp tại th�?i điểm t
			float target_angle = LSPB_CalculatePosition(&lspb[i], t);
 8001ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eee:	4413      	add	r3, r2
 8001ef0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f961 	bl	80011ba <LSPB_CalculatePosition>
 8001ef8:	6278      	str	r0, [r7, #36]	; 0x24
			// 4. Chuyển đổi góc đích sang xung PWM
			target_angle = angleToPWM(target_angle);
 8001efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001efc:	f7ff fd7c 	bl	80019f8 <angleToPWM>
 8001f00:	6278      	str	r0, [r7, #36]	; 0x24

			PID_Init(&pid, Kp, Ki, Kd, target_angle, dt);
 8001f02:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f18:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001f1c:	f000 ff94 	bl	8002e48 <PID_Init>

			// Vòng lặp đi�?u khiển servo để đạt tới góc mục tiêu bằng PID
			while (fabs(current_angles[i] - target_angle) > 0.1)
 8001f20:	e052      	b.n	8001fc8 <control_back+0x190>
			{
				// 5. Tính toán PID để cập nhật xung PWM cho servo
				current_angles[i] += PID_Compute(&pid, current_angles[i]) * dt;
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 ffaf 	bl	8002e96 <PID_Compute>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fef8 	bl	8000d34 <__aeabi_fmul>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4618      	mov	r0, r3
 8001f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	18d4      	adds	r4, r2, r3
 8001f5a:	f7fe fde3 	bl	8000b24 <__addsf3>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6023      	str	r3, [r4, #0]

				// Chuyển đổi từ PWM sang góc
				angles[i] = PWMToAngle(current_angles[i]);
 8001f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4413      	add	r3, r2
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f8a7 	bl	80010c0 <__aeabi_f2iz>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fd5f 	bl	8001a38 <PWMToAngle>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	3340      	adds	r3, #64	; 0x40
 8001f82:	443b      	add	r3, r7
 8001f84:	f843 2c30 	str.w	r2, [r3, #-48]
				if(i == 1)
 8001f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d10e      	bne.n	8001fac <control_back+0x174>
				{
					PCA9685_SetServoAngle_1(2 * i, angles[i]);
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3340      	adds	r3, #64	; 0x40
 8001f9c:	443b      	add	r3, r7
 8001f9e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f000 ff0b 	bl	8002dc0 <PCA9685_SetServoAngle_1>
 8001faa:	e00d      	b.n	8001fc8 <control_back+0x190>
				}
				else
				{
					PCA9685_SetServoAngle(2 * i, angles[i]);
 8001fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	3340      	adds	r3, #64	; 0x40
 8001fba:	443b      	add	r3, r7
 8001fbc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f000 feb8 	bl	8002d38 <PCA9685_SetServoAngle>
			while (fabs(current_angles[i] - target_angle) > 0.1)
 8001fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fda3 	bl	8000b20 <__aeabi_fsub>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa19 	bl	8000418 <__aeabi_f2d>
 8001fe6:	a37c      	add	r3, pc, #496	; (adr r3, 80021d8 <control_back+0x3a0>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fcfc 	bl	80009e8 <__aeabi_dcmpgt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d195      	bne.n	8001f22 <control_back+0xea>
				}
			}
			osDelay((int)(DT * 10)); // Delay theo mili giây
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	f004 fcea 	bl	80069d0 <osDelay>
		for (float t = 0; t <= lspb[0].t_total + 1; t += DT)
 8001ffc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ffe:	f7fe fa0b 	bl	8000418 <__aeabi_f2d>
 8002002:	a377      	add	r3, pc, #476	; (adr r3, 80021e0 <control_back+0x3a8>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	f7fe f8a8 	bl	800015c <__adddf3>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f7fe fd30 	bl	8000a78 <__aeabi_d2f>
 8002018:	4603      	mov	r3, r0
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
 800201c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fd7d 	bl	8000b24 <__addsf3>
 800202a:	4603      	mov	r3, r0
 800202c:	4619      	mov	r1, r3
 800202e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002030:	f7ff f828 	bl	8001084 <__aeabi_fcmple>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f af52 	bne.w	8001ee0 <control_back+0xa8>
	for (int i = 2; i >= 0; i--)
 800203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203e:	3b01      	subs	r3, #1
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
 8002042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002044:	2b00      	cmp	r3, #0
 8002046:	f6bf af47 	bge.w	8001ed8 <control_back+0xa0>
		}
	}
	for (int i = 4; i >= 3; i--)
 800204a:	2304      	movs	r3, #4
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
 800204e:	e0b4      	b.n	80021ba <control_back+0x382>
	{
		for (float t = 0; t <= lspb[0].t_total + 1; t += DT)
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002056:	e09d      	b.n	8002194 <control_back+0x35c>
		{
			//3. LSPB để hoạch định quỹ đạo cho từng khớp tại th�?i điểm t
			float target_angle = LSPB_CalculatePosition(&lspb[i], t);
 8002058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	461a      	mov	r2, r3
 8002064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002066:	4413      	add	r3, r2
 8002068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff f8a5 	bl	80011ba <LSPB_CalculatePosition>
 8002070:	62b8      	str	r0, [r7, #40]	; 0x28
			// 4. Chuyển đổi góc đích sang xung PWM
			target_angle = angleToPWM(target_angle);
 8002072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002074:	f7ff fcc0 	bl	80019f8 <angleToPWM>
 8002078:	62b8      	str	r0, [r7, #40]	; 0x28

			PID_Init(&pid, Kp, Ki, Kd, target_angle, dt);
 800207a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800207e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800208c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002090:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002094:	f000 fed8 	bl	8002e48 <PID_Init>

			// Vòng lặp đi�?u khiển servo để đạt tới góc mục tiêu bằng PID
			while (fabs(current_angles[i] - target_angle) > 0.1)
 8002098:	e052      	b.n	8002140 <control_back+0x308>
			{
				// 5. Tính toán PID để cập nhật xung PWM cho servo
				current_angles[i] += PID_Compute(&pid, current_angles[i]) * dt;
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4413      	add	r3, r2
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fef3 	bl	8002e96 <PID_Compute>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fe3c 	bl	8000d34 <__aeabi_fmul>
 80020bc:	4603      	mov	r3, r0
 80020be:	4618      	mov	r0, r3
 80020c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	18d4      	adds	r4, r2, r3
 80020d2:	f7fe fd27 	bl	8000b24 <__addsf3>
 80020d6:	4603      	mov	r3, r0
 80020d8:	6023      	str	r3, [r4, #0]

				// Chuyển đổi từ PWM sang góc
				angles[i] = PWMToAngle(current_angles[i]);
 80020da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe ffeb 	bl	80010c0 <__aeabi_f2iz>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fca3 	bl	8001a38 <PWMToAngle>
 80020f2:	4602      	mov	r2, r0
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	3340      	adds	r3, #64	; 0x40
 80020fa:	443b      	add	r3, r7
 80020fc:	f843 2c30 	str.w	r2, [r3, #-48]
				if(i == 1)
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10e      	bne.n	8002124 <control_back+0x2ec>
				{
					PCA9685_SetServoAngle_1(2 * i, angles[i]);
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	b2db      	uxtb	r3, r3
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	b2da      	uxtb	r2, r3
 800210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	3340      	adds	r3, #64	; 0x40
 8002114:	443b      	add	r3, r7
 8002116:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800211a:	4619      	mov	r1, r3
 800211c:	4610      	mov	r0, r2
 800211e:	f000 fe4f 	bl	8002dc0 <PCA9685_SetServoAngle_1>
 8002122:	e00d      	b.n	8002140 <control_back+0x308>
				}
				else
				{
					PCA9685_SetServoAngle(2 * i, angles[i]);
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	b2db      	uxtb	r3, r3
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	b2da      	uxtb	r2, r3
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	3340      	adds	r3, #64	; 0x40
 8002132:	443b      	add	r3, r7
 8002134:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f000 fdfc 	bl	8002d38 <PCA9685_SetServoAngle>
			while (fabs(current_angles[i] - target_angle) > 0.1)
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fce7 	bl	8000b20 <__aeabi_fsub>
 8002152:	4603      	mov	r3, r0
 8002154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f95d 	bl	8000418 <__aeabi_f2d>
 800215e:	a31e      	add	r3, pc, #120	; (adr r3, 80021d8 <control_back+0x3a0>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	f7fe fc40 	bl	80009e8 <__aeabi_dcmpgt>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d195      	bne.n	800209a <control_back+0x262>
				}
			}
			osDelay((int)(DT * 10)); // Delay theo mili giây
 800216e:	2002      	movs	r0, #2
 8002170:	f004 fc2e 	bl	80069d0 <osDelay>
		for (float t = 0; t <= lspb[0].t_total + 1; t += DT)
 8002174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002176:	f7fe f94f 	bl	8000418 <__aeabi_f2d>
 800217a:	a319      	add	r3, pc, #100	; (adr r3, 80021e0 <control_back+0x3a8>)
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	f7fd ffec 	bl	800015c <__adddf3>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f7fe fc74 	bl	8000a78 <__aeabi_d2f>
 8002190:	4603      	mov	r3, r0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fcc1 	bl	8000b24 <__addsf3>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4619      	mov	r1, r3
 80021a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021a8:	f7fe ff6c 	bl	8001084 <__aeabi_fcmple>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f47f af52 	bne.w	8002058 <control_back+0x220>
	for (int i = 4; i >= 3; i--)
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	3b01      	subs	r3, #1
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	2b02      	cmp	r3, #2
 80021be:	f73f af47 	bgt.w	8002050 <control_back+0x218>
//			PCA9685_SetServoAngle(6, angles[3]);
//        }
//        osDelay((int)(DT * 10)); // Delay theo mili giây
//	}

	active = 0;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <control_back+0x3b0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3740      	adds	r7, #64	; 0x40
 80021cc:	46bd      	mov	sp, r7
 80021ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021d2:	b002      	add	sp, #8
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	9999999a 	.word	0x9999999a
 80021dc:	3fb99999 	.word	0x3fb99999
 80021e0:	9999999a 	.word	0x9999999a
 80021e4:	3fc99999 	.word	0x3fc99999
 80021e8:	200000bc 	.word	0x200000bc

080021ec <calculate_vmax>:

void calculate_vmax(float *current_angles, float *target_angles, float *vmax)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 5; i++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e02e      	b.n	800225c <calculate_vmax+0x70>
	{
//		vmax[i] = fabs(target_angles[i] - current_angles[i]) / 1.0;
		vmax[i] = 2.0 * fabs(target_angles[i] - current_angles[i]) / 3.0;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	4413      	add	r3, r2
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fc84 	bl	8000b20 <__aeabi_fsub>
 8002218:	4603      	mov	r3, r0
 800221a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f8fa 	bl	8000418 <__aeabi_f2d>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	f7fd ff98 	bl	800015c <__adddf3>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <calculate_vmax+0x80>)
 800223a:	f7fe fa6f 	bl	800071c <__aeabi_ddiv>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	18d4      	adds	r4, r2, r3
 800224e:	f7fe fc13 	bl	8000a78 <__aeabi_d2f>
 8002252:	4603      	mov	r3, r0
 8002254:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 5; i++)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b04      	cmp	r3, #4
 8002260:	ddcd      	ble.n	80021fe <calculate_vmax+0x12>
	}
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd90      	pop	{r4, r7, pc}
 800226c:	40080000 	.word	0x40080000

08002270 <swap_bytes>:

void swap_bytes(uint8_t *input, uint8_t *result, int end)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
	for (int cnt = 0; cnt < sizeof(result); cnt++)
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e00d      	b.n	800229e <swap_bytes+0x2e>
	{
		result[cnt] = input[end];
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	441a      	add	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	440b      	add	r3, r1
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	701a      	strb	r2, [r3, #0]
		end--;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3b01      	subs	r3, #1
 8002296:	607b      	str	r3, [r7, #4]
	for (int cnt = 0; cnt < sizeof(result); cnt++)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3301      	adds	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d9ee      	bls.n	8002282 <swap_bytes+0x12>
	}
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <SendRequest>:

void SendRequest(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
    uint8_t frame[3];
    frame[0] = 0x02;       // Byte bắt đầu (ví dụ: 0x02 - STX)
 80022b8:	2302      	movs	r3, #2
 80022ba:	733b      	strb	r3, [r7, #12]
    frame[1] = 0x01;       // Byte tín hiệu (cố định là 0x01)
 80022bc:	2301      	movs	r3, #1
 80022be:	737b      	strb	r3, [r7, #13]
    frame[2] = 0x03;       // Byte kết thúc (ví dụ: 0x03 - ETX)
 80022c0:	2303      	movs	r3, #3
 80022c2:	73bb      	strb	r3, [r7, #14]

    HAL_UART_Transmit(huart, frame, sizeof(frame), HAL_MAX_DELAY);
 80022c4:	f107 010c 	add.w	r1, r7, #12
 80022c8:	f04f 33ff 	mov.w	r3, #4294967295
 80022cc:	2203      	movs	r2, #3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f003 fe0c 	bl	8005eec <HAL_UART_Transmit>
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_UART_RxCpltCallback>:
//    // Callback khi nhận nửa buffer
//    processData();
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    if (huart1->Instance == USART1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a09      	ldr	r2, [pc, #36]	; (8002310 <HAL_UART_RxCpltCallback+0x34>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10c      	bne.n	8002308 <HAL_UART_RxCpltCallback+0x2c>
    {
        // �?ẩy dữ liệu từ rxBuffer vào hàng đợi
        osMessageQueuePut(uartQueueHandle, rxBuffer, 0, 0);
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_UART_RxCpltCallback+0x38>)
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	2300      	movs	r3, #0
 80022f4:	2200      	movs	r2, #0
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <HAL_UART_RxCpltCallback+0x3c>)
 80022f8:	f004 fd78 	bl	8006dec <osMessageQueuePut>

        // Restart DMA để tiếp tục nhận dữ liệu
        HAL_UART_Receive_DMA(&huart1, rxBuffer, BUFFER_SIZE);
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	220b      	movs	r2, #11
 8002300:	4905      	ldr	r1, [pc, #20]	; (8002318 <HAL_UART_RxCpltCallback+0x3c>)
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fe75 	bl	8005ff2 <HAL_UART_Receive_DMA>
    }
//    // Callback khi nhận hoàn tất buffer
//    processData();
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40013800 	.word	0x40013800
 8002314:	200000c8 	.word	0x200000c8
 8002318:	2000009c 	.word	0x2000009c

0800231c <processData>:

void processData()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
    // Dừng DMA để tránh nhận thêm dữ liệu khi đang xử lý
    HAL_UART_DMAStop(&huart1);
 8002322:	4826      	ldr	r0, [pc, #152]	; (80023bc <processData+0xa0>)
 8002324:	f003 fe8a 	bl	800603c <HAL_UART_DMAStop>
    for (uint8_t i = 0; i < BUFFER_SIZE ; i++)
 8002328:	2300      	movs	r3, #0
 800232a:	71fb      	strb	r3, [r7, #7]
 800232c:	e031      	b.n	8002392 <processData+0x76>
    {
        uint8_t data = rxBuffer[i];
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	4a23      	ldr	r2, [pc, #140]	; (80023c0 <processData+0xa4>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	71bb      	strb	r3, [r7, #6]
        if (frameIndex == 0)
 8002336:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <processData+0xa8>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <processData+0x3e>
        {
            // Kiểm tra header
            if (data == 01)
 800233e:	79bb      	ldrb	r3, [r7, #6]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d123      	bne.n	800238c <processData+0x70>
            {
                frame[frameIndex++] = data; // Lưu header
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <processData+0xa8>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	b2d1      	uxtb	r1, r2
 800234c:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <processData+0xa8>)
 800234e:	7011      	strb	r1, [r2, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <processData+0xac>)
 8002354:	79bb      	ldrb	r3, [r7, #6]
 8002356:	5453      	strb	r3, [r2, r1]
 8002358:	e018      	b.n	800238c <processData+0x70>
            }
        }
        else
        {
            frame[frameIndex++] = data;
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <processData+0xa8>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	b2d1      	uxtb	r1, r2
 8002362:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <processData+0xa8>)
 8002364:	7011      	strb	r1, [r2, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <processData+0xac>)
 800236a:	79bb      	ldrb	r3, [r7, #6]
 800236c:	5453      	strb	r3, [r2, r1]
            // Kiểm tra footer
            if (data == 0xff)
 800236e:	79bb      	ldrb	r3, [r7, #6]
 8002370:	2bff      	cmp	r3, #255	; 0xff
 8002372:	d103      	bne.n	800237c <processData+0x60>
            {
                frameReceived = 1; // �?ã nhận frame hoàn chỉnh
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <processData+0xb0>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
                break; // Thoát vòng lặp
 800237a:	e00d      	b.n	8002398 <processData+0x7c>
            }
            // Nếu nhận đủ dữ liệu (9 bytes) mà không gặp footer
            if (frameIndex >= 11)
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <processData+0xa8>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b0a      	cmp	r3, #10
 8002382:	d903      	bls.n	800238c <processData+0x70>
            {
                // �?ặt lại chỉ số
                frameIndex = 0; // Reset để nhận frame mới
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <processData+0xa8>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
                break;
 800238a:	e005      	b.n	8002398 <processData+0x7c>
    for (uint8_t i = 0; i < BUFFER_SIZE ; i++)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	3301      	adds	r3, #1
 8002390:	71fb      	strb	r3, [r7, #7]
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b0a      	cmp	r3, #10
 8002396:	d9ca      	bls.n	800232e <processData+0x12>
            }
        }
    }

    // Nếu frame đã được nhận hoàn chỉnh
    if (frameReceived)
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <processData+0xb0>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <processData+0x96>
    {
        handleFrame(frame);
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <processData+0xac>)
 80023a2:	f000 f815 	bl	80023d0 <handleFrame>
        frameIndex = 0; // Reset để nhận frame mới
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <processData+0xa8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
        frameReceived = 0; // Reset c�?
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <processData+0xb0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
    }

}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000168 	.word	0x20000168
 80023c0:	2000009c 	.word	0x2000009c
 80023c4:	200000b7 	.word	0x200000b7
 80023c8:	200000ac 	.word	0x200000ac
 80023cc:	200000b8 	.word	0x200000b8

080023d0 <handleFrame>:

void handleFrame(uint8_t *frame)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	float x;
    float y;
    uint8_t temp_1[4];
    uint8_t temp_2[4];

    swap_bytes(frame, temp_2, 8);
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2208      	movs	r2, #8
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff45 	bl	8002270 <swap_bytes>
    swap_bytes(frame, temp_1, 4);
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	2204      	movs	r2, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ff3e 	bl	8002270 <swap_bytes>
 80023f4:	693b      	ldr	r3, [r7, #16]

    // Chuyển đổi 4 byte thành float cho t�?a độ x
    memcpy(&x, &temp_1[0], sizeof(float));
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	68fb      	ldr	r3, [r7, #12]

    // Chuyển đổi 4 byte thành float cho t�?a độ y
    memcpy(&y, &temp_2[0], sizeof(float));
 80023fa:	617b      	str	r3, [r7, #20]

    // Tính toán checksum nếu có
    uint8_t checksum = frame[0] ^ frame[1] ^ frame[2] ^ frame[3] ^ frame[4] ^ frame[5] ^
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3301      	adds	r3, #1
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4053      	eors	r3, r2
 8002408:	b2da      	uxtb	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3302      	adds	r3, #2
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4053      	eors	r3, r2
 8002412:	b2da      	uxtb	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3303      	adds	r3, #3
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	4053      	eors	r3, r2
 800241c:	b2da      	uxtb	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4053      	eors	r3, r2
 8002426:	b2da      	uxtb	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3305      	adds	r3, #5
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4053      	eors	r3, r2
 8002430:	b2da      	uxtb	r2, r3
                       frame[6] ^ frame[7] ^ frame[8];
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3306      	adds	r3, #6
 8002436:	781b      	ldrb	r3, [r3, #0]
    uint8_t checksum = frame[0] ^ frame[1] ^ frame[2] ^ frame[3] ^ frame[4] ^ frame[5] ^
 8002438:	4053      	eors	r3, r2
 800243a:	b2da      	uxtb	r2, r3
                       frame[6] ^ frame[7] ^ frame[8];
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3307      	adds	r3, #7
 8002440:	781b      	ldrb	r3, [r3, #0]
    uint8_t checksum = frame[0] ^ frame[1] ^ frame[2] ^ frame[3] ^ frame[4] ^ frame[5] ^
 8002442:	4053      	eors	r3, r2
 8002444:	b2da      	uxtb	r2, r3
                       frame[6] ^ frame[7] ^ frame[8];
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3308      	adds	r3, #8
 800244a:	781b      	ldrb	r3, [r3, #0]
    uint8_t checksum = frame[0] ^ frame[1] ^ frame[2] ^ frame[3] ^ frame[4] ^ frame[5] ^
 800244c:	4053      	eors	r3, r2
 800244e:	77fb      	strb	r3, [r7, #31]

    // Kiểm tra checksum (nếu sử dụng)
    if (checksum == frame[9])
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3309      	adds	r3, #9
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	7ffa      	ldrb	r2, [r7, #31]
 8002458:	429a      	cmp	r2, r3
 800245a:	d153      	bne.n	8002504 <handleFrame+0x134>
//        	{
//            	desired_position[1] = y + 7.83 + 1.5 + (fabs(x - 6.0)) * 0.1 / 1.5;
//            	desired_position[0] = x - 4.32 + 1.0;
//        	}
//    	}
    	if(y >= 6.0)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	492e      	ldr	r1, [pc, #184]	; (8002518 <handleFrame+0x148>)
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fe19 	bl	8001098 <__aeabi_fcmpge>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d012      	beq.n	8002492 <handleFrame+0xc2>
    	{
        	desired_position[1] = y + 6.0;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	492a      	ldr	r1, [pc, #168]	; (8002518 <handleFrame+0x148>)
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fb57 	bl	8000b24 <__addsf3>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	4b28      	ldr	r3, [pc, #160]	; (800251c <handleFrame+0x14c>)
 800247c:	605a      	str	r2, [r3, #4]
        	desired_position[0] = x - 11;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4927      	ldr	r1, [pc, #156]	; (8002520 <handleFrame+0x150>)
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fb4c 	bl	8000b20 <__aeabi_fsub>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <handleFrame+0x14c>)
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e035      	b.n	80024fe <handleFrame+0x12e>
    	}
    	else if(y >= 5.0)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	4923      	ldr	r1, [pc, #140]	; (8002524 <handleFrame+0x154>)
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fdfe 	bl	8001098 <__aeabi_fcmpge>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <handleFrame+0xf8>
    	{
        	desired_position[1] = y + 6.5;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	4920      	ldr	r1, [pc, #128]	; (8002528 <handleFrame+0x158>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fb3c 	bl	8000b24 <__addsf3>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <handleFrame+0x14c>)
 80024b2:	605a      	str	r2, [r3, #4]
        	desired_position[0] = x - 11;
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	491a      	ldr	r1, [pc, #104]	; (8002520 <handleFrame+0x150>)
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fb31 	bl	8000b20 <__aeabi_fsub>
 80024be:	4603      	mov	r3, r0
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <handleFrame+0x14c>)
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e01a      	b.n	80024fe <handleFrame+0x12e>
    	}
    	else
    	{
        	desired_position[1] = y + 6.7;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fd ffa4 	bl	8000418 <__aeabi_f2d>
 80024d0:	a30f      	add	r3, pc, #60	; (adr r3, 8002510 <handleFrame+0x140>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f7fd fe41 	bl	800015c <__adddf3>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f7fe fac9 	bl	8000a78 <__aeabi_d2f>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4a0c      	ldr	r2, [pc, #48]	; (800251c <handleFrame+0x14c>)
 80024ea:	6053      	str	r3, [r2, #4]
        	desired_position[0] = x - 11;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	490c      	ldr	r1, [pc, #48]	; (8002520 <handleFrame+0x150>)
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fb15 	bl	8000b20 <__aeabi_fsub>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <handleFrame+0x14c>)
 80024fc:	601a      	str	r2, [r3, #0]
    	}
    	position_received = 1;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <handleFrame+0x15c>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]
    }
}
 8002504:	bf00      	nop
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	f3af 8000 	nop.w
 8002510:	cccccccd 	.word	0xcccccccd
 8002514:	401acccc 	.word	0x401acccc
 8002518:	40c00000 	.word	0x40c00000
 800251c:	20000000 	.word	0x20000000
 8002520:	41300000 	.word	0x41300000
 8002524:	40a00000 	.word	0x40a00000
 8002528:	40d00000 	.word	0x40d00000
 800252c:	200000c0 	.word	0x200000c0

08002530 <drop_object>:

void drop_object()
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(10, 35);
 8002534:	4902      	ldr	r1, [pc, #8]	; (8002540 <drop_object+0x10>)
 8002536:	200a      	movs	r0, #10
 8002538:	f000 fbfe 	bl	8002d38 <PCA9685_SetServoAngle>
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	420c0000 	.word	0x420c0000

08002544 <grasp_object>:

void grasp_object()
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(10, 80);
 8002548:	4902      	ldr	r1, [pc, #8]	; (8002554 <grasp_object+0x10>)
 800254a:	200a      	movs	r0, #10
 800254c:	f000 fbf4 	bl	8002d38 <PCA9685_SetServoAngle>
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	42a00000 	.word	0x42a00000

08002558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800255c:	f000 fee2 	bl	8003324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002560:	f000 f846 	bl	80025f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002564:	f000 f94c 	bl	8002800 <MX_GPIO_Init>
  MX_DMA_Init();
 8002568:	f000 f92c 	bl	80027c4 <MX_DMA_Init>
  MX_I2C1_Init();
 800256c:	f000 f886 	bl	800267c <MX_I2C1_Init>
  MX_TIM2_Init();
 8002570:	f000 f8b2 	bl	80026d8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002574:	f000 f8fc 	bl	8002770 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(50); // PCA Initial with frequency 50 Hz
 8002578:	2032      	movs	r0, #50	; 0x32
 800257a:	f000 fb99 	bl	8002cb0 <PCA9685_Init>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800257e:	f004 f917 	bl	80067b0 <osKernelInitialize>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  // Tạo semaphore
  positionSemaphoreHandle = osSemaphoreNew(1, 0, &positionSemaphore_attributes);
 8002582:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <main+0x70>)
 8002584:	2100      	movs	r1, #0
 8002586:	2001      	movs	r0, #1
 8002588:	f004 fa50 	bl	8006a2c <osSemaphoreNew>
 800258c:	4603      	mov	r3, r0
 800258e:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <main+0x74>)
 8002590:	6013      	str	r3, [r2, #0]

  // Tạo message queue
  uartQueueHandle = osMessageQueueNew(10, sizeof(uint8_t), &uartQueue_attributes);
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <main+0x78>)
 8002594:	2101      	movs	r1, #1
 8002596:	200a      	movs	r0, #10
 8002598:	f004 fba2 	bl	8006ce0 <osMessageQueueNew>
 800259c:	4603      	mov	r3, r0
 800259e:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <main+0x7c>)
 80025a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(UART_Task_Init, NULL, &UART_Task_attributes);
 80025a2:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <main+0x80>)
 80025a4:	2100      	movs	r1, #0
 80025a6:	480d      	ldr	r0, [pc, #52]	; (80025dc <main+0x84>)
 80025a8:	f004 f968 	bl	800687c <osThreadNew>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <main+0x88>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* creation of Robot_Task */
  Robot_TaskHandle = osThreadNew(Robot_Task_Init, NULL, &Robot_Task_attributes);
 80025b2:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <main+0x8c>)
 80025b4:	2100      	movs	r1, #0
 80025b6:	480c      	ldr	r0, [pc, #48]	; (80025e8 <main+0x90>)
 80025b8:	f004 f960 	bl	800687c <osThreadNew>
 80025bc:	4603      	mov	r3, r0
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <main+0x94>)
 80025c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80025c2:	f004 f927 	bl	8006814 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  // Khởi động nhận dữ liệu qua DMA
//  HAL_UART_Receive_DMA(&huart1, rxBuffer, BUFFER_SIZE);
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <main+0x6e>
 80025c8:	0800bb8c 	.word	0x0800bb8c
 80025cc:	200000c4 	.word	0x200000c4
 80025d0:	0800bb9c 	.word	0x0800bb9c
 80025d4:	200000c8 	.word	0x200000c8
 80025d8:	0800bbb4 	.word	0x0800bbb4
 80025dc:	08002895 	.word	0x08002895
 80025e0:	200001f4 	.word	0x200001f4
 80025e4:	0800bbd8 	.word	0x0800bbd8
 80025e8:	08002919 	.word	0x08002919
 80025ec:	200001f8 	.word	0x200001f8

080025f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b090      	sub	sp, #64	; 0x40
 80025f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f6:	f107 0318 	add.w	r3, r7, #24
 80025fa:	2228      	movs	r2, #40	; 0x28
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f007 fccc 	bl	8009f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
 8002610:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002612:	2301      	movs	r3, #1
 8002614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800261a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800261c:	2300      	movs	r3, #0
 800261e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002620:	2301      	movs	r3, #1
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002624:	2302      	movs	r3, #2
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800262c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800262e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002634:	f107 0318 	add.w	r3, r7, #24
 8002638:	4618      	mov	r0, r3
 800263a:	f002 fbc9 	bl	8004dd0 <HAL_RCC_OscConfig>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002644:	f000 faa6 	bl	8002b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002648:	230f      	movs	r3, #15
 800264a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800264c:	2302      	movs	r3, #2
 800264e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2102      	movs	r1, #2
 8002662:	4618      	mov	r0, r3
 8002664:	f002 fe36 	bl	80052d4 <HAL_RCC_ClockConfig>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800266e:	f000 fa91 	bl	8002b94 <Error_Handler>
  }
}
 8002672:	bf00      	nop
 8002674:	3740      	adds	r7, #64	; 0x40
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <MX_I2C1_Init+0x50>)
 8002682:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <MX_I2C1_Init+0x54>)
 8002684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <MX_I2C1_Init+0x50>)
 8002688:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <MX_I2C1_Init+0x58>)
 800268a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <MX_I2C1_Init+0x50>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <MX_I2C1_Init+0x50>)
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <MX_I2C1_Init+0x50>)
 800269a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800269e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <MX_I2C1_Init+0x50>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <MX_I2C1_Init+0x50>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <MX_I2C1_Init+0x50>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <MX_I2C1_Init+0x50>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026b8:	4804      	ldr	r0, [pc, #16]	; (80026cc <MX_I2C1_Init+0x50>)
 80026ba:	f001 fb2f 	bl	8003d1c <HAL_I2C_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026c4:	f000 fa66 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	200000cc 	.word	0x200000cc
 80026d0:	40005400 	.word	0x40005400
 80026d4:	000186a0 	.word	0x000186a0

080026d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ec:	463b      	mov	r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <MX_TIM2_Init+0x94>)
 80026f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <MX_TIM2_Init+0x94>)
 80026fe:	2247      	movs	r2, #71	; 0x47
 8002700:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <MX_TIM2_Init+0x94>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <MX_TIM2_Init+0x94>)
 800270a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800270e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <MX_TIM2_Init+0x94>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <MX_TIM2_Init+0x94>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800271c:	4813      	ldr	r0, [pc, #76]	; (800276c <MX_TIM2_Init+0x94>)
 800271e:	f002 ff97 	bl	8005650 <HAL_TIM_Base_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002728:	f000 fa34 	bl	8002b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800272c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002732:	f107 0308 	add.w	r3, r7, #8
 8002736:	4619      	mov	r1, r3
 8002738:	480c      	ldr	r0, [pc, #48]	; (800276c <MX_TIM2_Init+0x94>)
 800273a:	f003 f933 	bl	80059a4 <HAL_TIM_ConfigClockSource>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002744:	f000 fa26 	bl	8002b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002748:	2300      	movs	r3, #0
 800274a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002750:	463b      	mov	r3, r7
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_TIM2_Init+0x94>)
 8002756:	f003 fb09 	bl	8005d6c <HAL_TIMEx_MasterConfigSynchronization>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002760:	f000 fa18 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000120 	.word	0x20000120

08002770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <MX_USART1_UART_Init+0x4c>)
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <MX_USART1_UART_Init+0x50>)
 8002778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <MX_USART1_UART_Init+0x4c>)
 800277c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <MX_USART1_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <MX_USART1_UART_Init+0x4c>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <MX_USART1_UART_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <MX_USART1_UART_Init+0x4c>)
 8002796:	220c      	movs	r2, #12
 8002798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <MX_USART1_UART_Init+0x4c>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <MX_USART1_UART_Init+0x4c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027a6:	4805      	ldr	r0, [pc, #20]	; (80027bc <MX_USART1_UART_Init+0x4c>)
 80027a8:	f003 fb50 	bl	8005e4c <HAL_UART_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027b2:	f000 f9ef 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000168 	.word	0x20000168
 80027c0:	40013800 	.word	0x40013800

080027c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_DMA_Init+0x38>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <MX_DMA_Init+0x38>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6153      	str	r3, [r2, #20]
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_DMA_Init+0x38>)
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2105      	movs	r1, #5
 80027e6:	200f      	movs	r0, #15
 80027e8:	f000 fea7 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80027ec:	200f      	movs	r0, #15
 80027ee:	f000 fec0 	bl	8003572 <HAL_NVIC_EnableIRQ>

}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000

08002800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002806:	f107 0310 	add.w	r3, r7, #16
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <MX_GPIO_Init+0x8c>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4a1c      	ldr	r2, [pc, #112]	; (800288c <MX_GPIO_Init+0x8c>)
 800281a:	f043 0320 	orr.w	r3, r3, #32
 800281e:	6193      	str	r3, [r2, #24]
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <MX_GPIO_Init+0x8c>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <MX_GPIO_Init+0x8c>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	4a16      	ldr	r2, [pc, #88]	; (800288c <MX_GPIO_Init+0x8c>)
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	6193      	str	r3, [r2, #24]
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <MX_GPIO_Init+0x8c>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_GPIO_Init+0x8c>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a10      	ldr	r2, [pc, #64]	; (800288c <MX_GPIO_Init+0x8c>)
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <MX_GPIO_Init+0x8c>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800285c:	2201      	movs	r2, #1
 800285e:	2101      	movs	r1, #1
 8002860:	480b      	ldr	r0, [pc, #44]	; (8002890 <MX_GPIO_Init+0x90>)
 8002862:	f001 fa43 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002866:	2301      	movs	r3, #1
 8002868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286a:	2301      	movs	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2302      	movs	r3, #2
 8002874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f107 0310 	add.w	r3, r7, #16
 800287a:	4619      	mov	r1, r3
 800287c:	4804      	ldr	r0, [pc, #16]	; (8002890 <MX_GPIO_Init+0x90>)
 800287e:	f001 f8b1 	bl	80039e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002882:	bf00      	nop
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	40010800 	.word	0x40010800

08002894 <UART_Task_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UART_Task_Init */
void UART_Task_Init(void *argument)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    HAL_UART_Receive_DMA(&huart1, rxBuffer, BUFFER_SIZE);
 800289c:	220b      	movs	r2, #11
 800289e:	4917      	ldr	r1, [pc, #92]	; (80028fc <UART_Task_Init+0x68>)
 80028a0:	4817      	ldr	r0, [pc, #92]	; (8002900 <UART_Task_Init+0x6c>)
 80028a2:	f003 fba6 	bl	8005ff2 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
      if ((osMessageQueueGet(uartQueueHandle, rxBuffer, NULL, osWaitForever) == osOK) && (active == 0)) //Complete receiving data
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <UART_Task_Init+0x70>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	2200      	movs	r2, #0
 80028b0:	4912      	ldr	r1, [pc, #72]	; (80028fc <UART_Task_Init+0x68>)
 80028b2:	f004 fb0f 	bl	8006ed4 <osMessageQueueGet>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d11b      	bne.n	80028f4 <UART_Task_Init+0x60>
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <UART_Task_Init+0x74>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d117      	bne.n	80028f4 <UART_Task_Init+0x60>
      {
          processData();
 80028c4:	f7ff fd2a 	bl	800231c <processData>
          memset(rxBuffer, 0, BUFFER_SIZE);
 80028c8:	220b      	movs	r2, #11
 80028ca:	2100      	movs	r1, #0
 80028cc:	480b      	ldr	r0, [pc, #44]	; (80028fc <UART_Task_Init+0x68>)
 80028ce:	f007 fb65 	bl	8009f9c <memset>
          if (position_received)
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <UART_Task_Init+0x78>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00c      	beq.n	80028f4 <UART_Task_Init+0x60>
          {
              osSemaphoreRelease(positionSemaphoreHandle); //Initialize Robot Task
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <UART_Task_Init+0x7c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f004 f9a6 	bl	8006c30 <osSemaphoreRelease>
              active = 1;
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <UART_Task_Init+0x74>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
              HAL_UART_Receive_DMA(&huart1, rxBuffer, BUFFER_SIZE);
 80028ea:	220b      	movs	r2, #11
 80028ec:	4903      	ldr	r1, [pc, #12]	; (80028fc <UART_Task_Init+0x68>)
 80028ee:	4804      	ldr	r0, [pc, #16]	; (8002900 <UART_Task_Init+0x6c>)
 80028f0:	f003 fb7f 	bl	8005ff2 <HAL_UART_Receive_DMA>
          }
      }
      osDelay(10);
 80028f4:	200a      	movs	r0, #10
 80028f6:	f004 f86b 	bl	80069d0 <osDelay>
      if ((osMessageQueueGet(uartQueueHandle, rxBuffer, NULL, osWaitForever) == osOK) && (active == 0)) //Complete receiving data
 80028fa:	e7d4      	b.n	80028a6 <UART_Task_Init+0x12>
 80028fc:	2000009c 	.word	0x2000009c
 8002900:	20000168 	.word	0x20000168
 8002904:	200000c8 	.word	0x200000c8
 8002908:	200000bc 	.word	0x200000bc
 800290c:	200000c0 	.word	0x200000c0
 8002910:	200000c4 	.word	0x200000c4
 8002914:	00000000 	.word	0x00000000

08002918 <Robot_Task_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Robot_Task_Init */
void Robot_Task_Init(void *argument)
{
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291a:	b0db      	sub	sp, #364	; 0x16c
 800291c:	af0c      	add	r7, sp, #48	; 0x30
 800291e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002922:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002926:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Robot_Task_Init */
	  // PID Initial
	  PID_Controller pid;
	  float Kp = 1, Ki = 0.7, Kd = 0;
 8002928:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800292c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002930:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <Robot_Task_Init+0x220>)
 8002932:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  float dt = 0.01;
 800293e:	4b7f      	ldr	r3, [pc, #508]	; (8002b3c <Robot_Task_Init+0x224>)
 8002940:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	  //LSPB parameters declaration
	  LSPB_Params lspb[5];

	  InverseKinematics ik;
	  InverseKinematics_Init(&ik, 14.4, 10.5, 13.0, 7.0, 11.0);  // Define parameters of DH table
 8002944:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002948:	4b7d      	ldr	r3, [pc, #500]	; (8002b40 <Robot_Task_Init+0x228>)
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	4b7d      	ldr	r3, [pc, #500]	; (8002b44 <Robot_Task_Init+0x22c>)
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	4b7d      	ldr	r3, [pc, #500]	; (8002b48 <Robot_Task_Init+0x230>)
 8002952:	4a7e      	ldr	r2, [pc, #504]	; (8002b4c <Robot_Task_Init+0x234>)
 8002954:	497e      	ldr	r1, [pc, #504]	; (8002b50 <Robot_Task_Init+0x238>)
 8002956:	f7fe fe47 	bl	80015e8 <InverseKinematics_Init>

  /* Infinite loop */
  for(;;)
  {
	  float target_angles[5];
	  float current_angles[5] = {0.0, 90.0, 90.0, 90.0, 90.0};
 800295a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800295e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002962:	4a7c      	ldr	r2, [pc, #496]	; (8002b54 <Robot_Task_Init+0x23c>)
 8002964:	461c      	mov	r4, r3
 8002966:	4615      	mov	r5, r2
 8002968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	6023      	str	r3, [r4, #0]
	  float temp[5] = {0.0, 90.0, 90.0, 90.0, 90.0};
 8002970:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002974:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002978:	4a76      	ldr	r2, [pc, #472]	; (8002b54 <Robot_Task_Init+0x23c>)
 800297a:	461c      	mov	r4, r3
 800297c:	4615      	mov	r5, r2
 800297e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002982:	682b      	ldr	r3, [r5, #0]
 8002984:	6023      	str	r3, [r4, #0]
	  float vmax[5];
	  float px = desired_position[0];
 8002986:	4b74      	ldr	r3, [pc, #464]	; (8002b58 <Robot_Task_Init+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  float py = desired_position[1];
 800298e:	4b72      	ldr	r3, [pc, #456]	; (8002b58 <Robot_Task_Init+0x240>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  float d = sqrt(px * px + py * py);
 8002996:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800299a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800299e:	f7fe f9c9 	bl	8000d34 <__aeabi_fmul>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461c      	mov	r4, r3
 80029a6:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80029aa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80029ae:	f7fe f9c1 	bl	8000d34 <__aeabi_fmul>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4619      	mov	r1, r3
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7fe f8b4 	bl	8000b24 <__addsf3>
 80029bc:	4603      	mov	r3, r0
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fd2a 	bl	8000418 <__aeabi_f2d>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f007 fbf8 	bl	800a1c0 <sqrt>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7fe f84e 	bl	8000a78 <__aeabi_d2f>
 80029dc:	4603      	mov	r3, r0
 80029de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      //Wait for signal
      if ((osSemaphoreAcquire(positionSemaphoreHandle, osWaitForever) == osOK) && (position_received == 1))
 80029e2:	4b5e      	ldr	r3, [pc, #376]	; (8002b5c <Robot_Task_Init+0x244>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 f8ba 	bl	8006b64 <osSemaphoreAcquire>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 8094 	bne.w	8002b20 <Robot_Task_Init+0x208>
 80029f8:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <Robot_Task_Init+0x248>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 808f 	bne.w	8002b20 <Robot_Task_Init+0x208>
      {
    	  if((d <= 19.0) && (d >= 10.3))
 8002a02:	4958      	ldr	r1, [pc, #352]	; (8002b64 <Robot_Task_Init+0x24c>)
 8002a04:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002a08:	f7fe fb3c 	bl	8001084 <__aeabi_fcmple>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d07d      	beq.n	8002b0e <Robot_Task_Init+0x1f6>
 8002a12:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002a16:	f7fd fcff 	bl	8000418 <__aeabi_f2d>
 8002a1a:	a345      	add	r3, pc, #276	; (adr r3, 8002b30 <Robot_Task_Init+0x218>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f7fd ffd8 	bl	80009d4 <__aeabi_dcmpge>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d071      	beq.n	8002b0e <Robot_Task_Init+0x1f6>
    	  {
              //Calculate angles respected to desired position
              InverseKinematics_Calculate(&ik, desired_position, target_angles);
 8002a2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002a2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a32:	4949      	ldr	r1, [pc, #292]	; (8002b58 <Robot_Task_Init+0x240>)
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fdf3 	bl	8001620 <InverseKinematics_Calculate>
              convertThetaArrayToDegrees(target_angles);
 8002a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe ffba 	bl	80019b8 <convertThetaArrayToDegrees>

              //Calculate max velocity
              calculate_vmax(current_angles, target_angles, vmax);
 8002a44:	f107 020c 	add.w	r2, r7, #12
 8002a48:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002a4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fbcb 	bl	80021ec <calculate_vmax>
              drop_object();// Open gripper
 8002a56:	f7ff fd6b 	bl	8002530 <drop_object>

              //Move to desired position
              control(current_angles, target_angles, vmax, pid, lspb, Kp, Ki, Kd, dt);
 8002a5a:	f107 0e0c 	add.w	lr, r7, #12
 8002a5e:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8002a62:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8002a66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a70:	930a      	str	r3, [sp, #40]	; 0x28
 8002a72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a76:	9309      	str	r3, [sp, #36]	; 0x24
 8002a78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a7c:	9308      	str	r3, [sp, #32]
 8002a7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a82:	9307      	str	r3, [sp, #28]
 8002a84:	466d      	mov	r5, sp
 8002a86:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8002a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a8e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002a92:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a9a:	4672      	mov	r2, lr
 8002a9c:	4661      	mov	r1, ip
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	f7fe ffee 	bl	8001a80 <control>
              osDelay(500);
 8002aa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002aa8:	f003 ff92 	bl	80069d0 <osDelay>
              grasp_object();
 8002aac:	f7ff fd4a 	bl	8002544 <grasp_object>
              osDelay(500);
 8002ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ab4:	f003 ff8c 	bl	80069d0 <osDelay>

              //Move back to home position
              control_back(target_angles, temp, vmax, pid, lspb, Kp, Ki, Kd, dt);
 8002ab8:	f107 0e0c 	add.w	lr, r7, #12
 8002abc:	f107 0c20 	add.w	ip, r7, #32
 8002ac0:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8002ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002ace:	930a      	str	r3, [sp, #40]	; 0x28
 8002ad0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ad6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ada:	9308      	str	r3, [sp, #32]
 8002adc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ae0:	9307      	str	r3, [sp, #28]
 8002ae2:	466d      	mov	r5, sp
 8002ae4:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8002ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002af0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af8:	4672      	mov	r2, lr
 8002afa:	4661      	mov	r1, ip
 8002afc:	4630      	mov	r0, r6
 8002afe:	f7ff f99b 	bl	8001e38 <control_back>
              osDelay(500);
 8002b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b06:	f003 ff63 	bl	80069d0 <osDelay>
              drop_object();
 8002b0a:	f7ff fd11 	bl	8002530 <drop_object>
    	  }

          //Update states
          position_received = 0;
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <Robot_Task_Init+0x248>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
          active = 0;
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <Robot_Task_Init+0x250>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
          SendRequest(&huart1);
 8002b1a:	4814      	ldr	r0, [pc, #80]	; (8002b6c <Robot_Task_Init+0x254>)
 8002b1c:	f7ff fbc8 	bl	80022b0 <SendRequest>

      }
      osDelay(1000);
 8002b20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b24:	f003 ff54 	bl	80069d0 <osDelay>
  {
 8002b28:	e717      	b.n	800295a <Robot_Task_Init+0x42>
 8002b2a:	bf00      	nop
 8002b2c:	f3af 8000 	nop.w
 8002b30:	9999999a 	.word	0x9999999a
 8002b34:	40249999 	.word	0x40249999
 8002b38:	3f333333 	.word	0x3f333333
 8002b3c:	3c23d70a 	.word	0x3c23d70a
 8002b40:	41300000 	.word	0x41300000
 8002b44:	40e00000 	.word	0x40e00000
 8002b48:	41500000 	.word	0x41500000
 8002b4c:	41280000 	.word	0x41280000
 8002b50:	41666666 	.word	0x41666666
 8002b54:	0800bb60 	.word	0x0800bb60
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	200000c4 	.word	0x200000c4
 8002b60:	200000c0 	.word	0x200000c0
 8002b64:	41980000 	.word	0x41980000
 8002b68:	200000bc 	.word	0x200000bc
 8002b6c:	20000168 	.word	0x20000168

08002b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b82:	f000 fbe5 	bl	8003350 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40000400 	.word	0x40000400

08002b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b98:	b672      	cpsid	i
}
 8002b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <Error_Handler+0x8>
	...

08002ba0 <PCA9685_SetBit>:

// I2C handle should be defined in your main file or passed as a parameter
extern I2C_HandleTypeDef hi2c1;

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
 8002baa:	460b      	mov	r3, r1
 8002bac:	71bb      	strb	r3, [r7, #6]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	717b      	strb	r3, [r7, #5]
    uint8_t readValue;
    // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
    HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	9302      	str	r3, [sp, #8]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	f107 030f 	add.w	r3, r7, #15
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	4819      	ldr	r0, [pc, #100]	; (8002c30 <PCA9685_SetBit+0x90>)
 8002bca:	f001 fae5 	bl	8004198 <HAL_I2C_Mem_Read>
    if (Value == 0) readValue &= ~(1 << Bit);
 8002bce:	797b      	ldrb	r3, [r7, #5]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10d      	bne.n	8002bf0 <PCA9685_SetBit+0x50>
 8002bd4:	79bb      	ldrb	r3, [r7, #6]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	b25a      	sxtb	r2, r3
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	4013      	ands	r3, r2
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e00a      	b.n	8002c06 <PCA9685_SetBit+0x66>
    else readValue |= (1 << Bit);
 8002bf0:	79bb      	ldrb	r3, [r7, #6]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	b25a      	sxtb	r2, r3
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	9302      	str	r3, [sp, #8]
 8002c0e:	2301      	movs	r3, #1
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	f107 030f 	add.w	r3, r7, #15
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	4804      	ldr	r0, [pc, #16]	; (8002c30 <PCA9685_SetBit+0x90>)
 8002c1e:	f001 f9c1 	bl	8003fa4 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f000 fbb0 	bl	8003388 <HAL_Delay>
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200000cc 	.word	0x200000cc

08002c34 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af04      	add	r7, sp, #16
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	80fb      	strh	r3, [r7, #6]
    uint8_t prescale;
    if(frequency >= 1526) prescale = 0x03;
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d902      	bls.n	8002c4e <PCA9685_SetPWMFrequency+0x1a>
 8002c48:	2303      	movs	r3, #3
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	e00c      	b.n	8002c68 <PCA9685_SetPWMFrequency+0x34>
    else if(frequency <= 24) prescale = 0xFF;
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	2b18      	cmp	r3, #24
 8002c52:	d802      	bhi.n	8002c5a <PCA9685_SetPWMFrequency+0x26>
 8002c54:	23ff      	movs	r3, #255	; 0xff
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e006      	b.n	8002c68 <PCA9685_SetPWMFrequency+0x34>
    //  internal 25 MHz oscillator as in the datasheet page no 1/52
    else prescale = 25000000 / (4096 * frequency);
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	031b      	lsls	r3, r3, #12
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <PCA9685_SetPWMFrequency+0x74>)
 8002c60:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	73fb      	strb	r3, [r7, #15]
    // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8002c68:	2201      	movs	r2, #1
 8002c6a:	2104      	movs	r1, #4
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff ff97 	bl	8002ba0 <PCA9685_SetBit>
    HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8002c72:	230a      	movs	r3, #10
 8002c74:	9302      	str	r3, [sp, #8]
 8002c76:	2301      	movs	r3, #1
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	f107 030f 	add.w	r3, r7, #15
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2301      	movs	r3, #1
 8002c82:	22fe      	movs	r2, #254	; 0xfe
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	4809      	ldr	r0, [pc, #36]	; (8002cac <PCA9685_SetPWMFrequency+0x78>)
 8002c88:	f001 f98c 	bl	8003fa4 <HAL_I2C_Mem_Write>
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2104      	movs	r1, #4
 8002c90:	2000      	movs	r0, #0
 8002c92:	f7ff ff85 	bl	8002ba0 <PCA9685_SetBit>
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8002c96:	2201      	movs	r2, #1
 8002c98:	2107      	movs	r1, #7
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7ff ff80 	bl	8002ba0 <PCA9685_SetBit>
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	017d7840 	.word	0x017d7840
 8002cac:	200000cc 	.word	0x200000cc

08002cb0 <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	80fb      	strh	r3, [r7, #6]
    PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ffb9 	bl	8002c34 <PCA9685_SetPWMFrequency>
    PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2105      	movs	r1, #5
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7ff ff6a 	bl	8002ba0 <PCA9685_SetBit>
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af04      	add	r7, sp, #16
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	80bb      	strh	r3, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	807b      	strh	r3, [r7, #2]
    uint8_t registerAddress;
    uint8_t pwm[4];
    registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3306      	adds	r3, #6
 8002cee:	73fb      	strb	r3, [r7, #15]
    // See example 1 in the datasheet page no 18/52
    pwm[0] = OnTime & 0xFF;
 8002cf0:	88bb      	ldrh	r3, [r7, #4]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	723b      	strb	r3, [r7, #8]
    pwm[1] = OnTime>>8;
 8002cf6:	88bb      	ldrh	r3, [r7, #4]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	727b      	strb	r3, [r7, #9]
    pwm[2] = OffTime & 0xFF;
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	72bb      	strb	r3, [r7, #10]
    pwm[3] = OffTime>>8;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	230a      	movs	r3, #10
 8002d16:	9302      	str	r3, [sp, #8]
 8002d18:	2304      	movs	r3, #4
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2301      	movs	r3, #1
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	4803      	ldr	r0, [pc, #12]	; (8002d34 <PCA9685_SetPWM+0x60>)
 8002d28:	f001 f93c 	bl	8003fa4 <HAL_I2C_Mem_Write>
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200000cc 	.word	0x200000cc

08002d38 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	71fb      	strb	r3, [r7, #7]
    float Value;
    // 50 Hz servo then 4095 Value --> 20 milliseconds
    // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
    Value = (Angle * (511.875 - 102.375) / 180.0) + 102.375;
 8002d44:	6838      	ldr	r0, [r7, #0]
 8002d46:	f7fd fb67 	bl	8000418 <__aeabi_f2d>
 8002d4a:	a317      	add	r3, pc, #92	; (adr r3, 8002da8 <PCA9685_SetServoAngle+0x70>)
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f7fd fbba 	bl	80004c8 <__aeabi_dmul>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <PCA9685_SetServoAngle+0x80>)
 8002d62:	f7fd fcdb 	bl	800071c <__aeabi_ddiv>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	a310      	add	r3, pc, #64	; (adr r3, 8002db0 <PCA9685_SetServoAngle+0x78>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f7fd f9f2 	bl	800015c <__adddf3>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f7fd fe7a 	bl	8000a78 <__aeabi_d2f>
 8002d84:	4603      	mov	r3, r0
 8002d86:	60fb      	str	r3, [r7, #12]
    PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7fe f9bf 	bl	800110c <__aeabi_f2uiz>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ff9c 	bl	8002cd4 <PCA9685_SetPWM>
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	f3af 8000 	nop.w
 8002da8:	00000000 	.word	0x00000000
 8002dac:	40799800 	.word	0x40799800
 8002db0:	00000000 	.word	0x00000000
 8002db4:	40599800 	.word	0x40599800
 8002db8:	40668000 	.word	0x40668000
 8002dbc:	00000000 	.word	0x00000000

08002dc0 <PCA9685_SetServoAngle_1>:
void PCA9685_SetServoAngle_1(uint8_t Channel, float Angle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
    float Value;
    // 50 Hz servo then 4095 Value --> 20 milliseconds
    // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
    Value = (Angle * (511.875 - 102.375) / 270.0) + 102.375;
 8002dcc:	6838      	ldr	r0, [r7, #0]
 8002dce:	f7fd fb23 	bl	8000418 <__aeabi_f2d>
 8002dd2:	a317      	add	r3, pc, #92	; (adr r3, 8002e30 <PCA9685_SetServoAngle_1+0x70>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fb76 	bl	80004c8 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	a314      	add	r3, pc, #80	; (adr r3, 8002e38 <PCA9685_SetServoAngle_1+0x78>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	f7fd fc97 	bl	800071c <__aeabi_ddiv>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	a312      	add	r3, pc, #72	; (adr r3, 8002e40 <PCA9685_SetServoAngle_1+0x80>)
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f7fd f9ae 	bl	800015c <__adddf3>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f7fd fe36 	bl	8000a78 <__aeabi_d2f>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]
    PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7fe f97b 	bl	800110c <__aeabi_f2uiz>
 8002e16:	4603      	mov	r3, r0
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff58 	bl	8002cd4 <PCA9685_SetPWM>
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	f3af 8000 	nop.w
 8002e30:	00000000 	.word	0x00000000
 8002e34:	40799800 	.word	0x40799800
 8002e38:	00000000 	.word	0x00000000
 8002e3c:	4070e000 	.word	0x4070e000
 8002e40:	00000000 	.word	0x00000000
 8002e44:	40599800 	.word	0x40599800

08002e48 <PID_Init>:
#include "pid.h"

void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float setpoint, float dt)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
    pid->Kp = Kp;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
    pid->integral = 0;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
    pid->dt = dt;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	61da      	str	r2, [r3, #28]
    pid->output = 0;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <PID_Compute>:

float PID_Compute(PID_Controller *pid, float current_value)
{
 8002e96:	b590      	push	{r4, r7, lr}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
	// Calculate error
    float error = pid->setpoint - current_value;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	6839      	ldr	r1, [r7, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fe3a 	bl	8000b20 <__aeabi_fsub>
 8002eac:	4603      	mov	r3, r0
 8002eae:	60fb      	str	r3, [r7, #12]

    // I_error
    pid->integral += ((error + pid->prev_error) / 2) * pid->dt;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695c      	ldr	r4, [r3, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	68f9      	ldr	r1, [r7, #12]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fe32 	bl	8000b24 <__addsf3>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd ffe8 	bl	8000e9c <__aeabi_fdiv>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	461a      	mov	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f7fd ff2c 	bl	8000d34 <__aeabi_fmul>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f7fd fe1f 	bl	8000b24 <__addsf3>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	461a      	mov	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	615a      	str	r2, [r3, #20]

    // D_error
    float derivative = (error - pid->prev_error) / pid->dt;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7fd fe13 	bl	8000b20 <__aeabi_fsub>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f7fd ffc9 	bl	8000e9c <__aeabi_fdiv>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	60bb      	str	r3, [r7, #8]

    // Output
    pid->output = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68f9      	ldr	r1, [r7, #12]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd ff0d 	bl	8000d34 <__aeabi_fmul>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461c      	mov	r4, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4619      	mov	r1, r3
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f7fd ff03 	bl	8000d34 <__aeabi_fmul>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4619      	mov	r1, r3
 8002f32:	4620      	mov	r0, r4
 8002f34:	f7fd fdf6 	bl	8000b24 <__addsf3>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461c      	mov	r4, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fef6 	bl	8000d34 <__aeabi_fmul>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f7fd fde9 	bl	8000b24 <__addsf3>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	619a      	str	r2, [r3, #24]
//    	pid->output = 102.375;
//    if(pid->output > 511.875)
//    	pid->output = 511.875;

    // Update prev_error
    pid->prev_error = error;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	611a      	str	r2, [r3, #16]

    return pid->output;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd90      	pop	{r4, r7, pc}

08002f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f72:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <HAL_MspInit+0x68>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <HAL_MspInit+0x68>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6193      	str	r3, [r2, #24]
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <HAL_MspInit+0x68>)
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_MspInit+0x68>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <HAL_MspInit+0x68>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	61d3      	str	r3, [r2, #28]
 8002f96:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <HAL_MspInit+0x68>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	210f      	movs	r1, #15
 8002fa6:	f06f 0001 	mvn.w	r0, #1
 8002faa:	f000 fac6 	bl	800353a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <HAL_MspInit+0x6c>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_MspInit+0x6c>)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000

08002fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 0310 	add.w	r3, r7, #16
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_I2C_MspInit+0x70>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d123      	bne.n	8003044 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <HAL_I2C_MspInit+0x74>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	4a13      	ldr	r2, [pc, #76]	; (8003050 <HAL_I2C_MspInit+0x74>)
 8003002:	f043 0308 	orr.w	r3, r3, #8
 8003006:	6193      	str	r3, [r2, #24]
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_I2C_MspInit+0x74>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003014:	23c0      	movs	r3, #192	; 0xc0
 8003016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003018:	2312      	movs	r3, #18
 800301a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003020:	f107 0310 	add.w	r3, r7, #16
 8003024:	4619      	mov	r1, r3
 8003026:	480b      	ldr	r0, [pc, #44]	; (8003054 <HAL_I2C_MspInit+0x78>)
 8003028:	f000 fcdc 	bl	80039e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_I2C_MspInit+0x74>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4a07      	ldr	r2, [pc, #28]	; (8003050 <HAL_I2C_MspInit+0x74>)
 8003032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003036:	61d3      	str	r3, [r2, #28]
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_I2C_MspInit+0x74>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003044:	bf00      	nop
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40005400 	.word	0x40005400
 8003050:	40021000 	.word	0x40021000
 8003054:	40010c00 	.word	0x40010c00

08003058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003068:	d10b      	bne.n	8003082 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <HAL_TIM_Base_MspInit+0x34>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <HAL_TIM_Base_MspInit+0x34>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	61d3      	str	r3, [r2, #28]
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_TIM_Base_MspInit+0x34>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2f      	ldr	r2, [pc, #188]	; (8003168 <HAL_UART_MspInit+0xd8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d157      	bne.n	8003160 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030b0:	4b2e      	ldr	r3, [pc, #184]	; (800316c <HAL_UART_MspInit+0xdc>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a2d      	ldr	r2, [pc, #180]	; (800316c <HAL_UART_MspInit+0xdc>)
 80030b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_UART_MspInit+0xdc>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_UART_MspInit+0xdc>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4a27      	ldr	r2, [pc, #156]	; (800316c <HAL_UART_MspInit+0xdc>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	6193      	str	r3, [r2, #24]
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_UART_MspInit+0xdc>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e6:	2302      	movs	r3, #2
 80030e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ea:	2303      	movs	r3, #3
 80030ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ee:	f107 0310 	add.w	r3, r7, #16
 80030f2:	4619      	mov	r1, r3
 80030f4:	481e      	ldr	r0, [pc, #120]	; (8003170 <HAL_UART_MspInit+0xe0>)
 80030f6:	f000 fc75 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003108:	f107 0310 	add.w	r3, r7, #16
 800310c:	4619      	mov	r1, r3
 800310e:	4818      	ldr	r0, [pc, #96]	; (8003170 <HAL_UART_MspInit+0xe0>)
 8003110:	f000 fc68 	bl	80039e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_UART_MspInit+0xe4>)
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_UART_MspInit+0xe8>)
 8003118:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_UART_MspInit+0xe4>)
 800311c:	2200      	movs	r2, #0
 800311e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <HAL_UART_MspInit+0xe4>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_UART_MspInit+0xe4>)
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_UART_MspInit+0xe4>)
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_UART_MspInit+0xe4>)
 8003134:	2200      	movs	r2, #0
 8003136:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_UART_MspInit+0xe4>)
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_UART_MspInit+0xe4>)
 8003140:	2200      	movs	r2, #0
 8003142:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003144:	480b      	ldr	r0, [pc, #44]	; (8003174 <HAL_UART_MspInit+0xe4>)
 8003146:	f000 fa23 	bl	8003590 <HAL_DMA_Init>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003150:	f7ff fd20 	bl	8002b94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <HAL_UART_MspInit+0xe4>)
 8003158:	63da      	str	r2, [r3, #60]	; 0x3c
 800315a:	4a06      	ldr	r2, [pc, #24]	; (8003174 <HAL_UART_MspInit+0xe4>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003160:	bf00      	nop
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40013800 	.word	0x40013800
 800316c:	40021000 	.word	0x40021000
 8003170:	40010800 	.word	0x40010800
 8003174:	200001b0 	.word	0x200001b0
 8003178:	40020058 	.word	0x40020058

0800317c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	; 0x38
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003192:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_InitTick+0xe8>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a33      	ldr	r2, [pc, #204]	; (8003264 <HAL_InitTick+0xe8>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	61d3      	str	r3, [r2, #28]
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_InitTick+0xe8>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031aa:	f107 0210 	add.w	r2, r7, #16
 80031ae:	f107 0314 	add.w	r3, r7, #20
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f002 f9fd 	bl	80055b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80031c4:	f002 f9ce 	bl	8005564 <HAL_RCC_GetPCLK1Freq>
 80031c8:	6378      	str	r0, [r7, #52]	; 0x34
 80031ca:	e004      	b.n	80031d6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80031cc:	f002 f9ca 	bl	8005564 <HAL_RCC_GetPCLK1Freq>
 80031d0:	4603      	mov	r3, r0
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d8:	4a23      	ldr	r2, [pc, #140]	; (8003268 <HAL_InitTick+0xec>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0c9b      	lsrs	r3, r3, #18
 80031e0:	3b01      	subs	r3, #1
 80031e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <HAL_InitTick+0xf0>)
 80031e6:	4a22      	ldr	r2, [pc, #136]	; (8003270 <HAL_InitTick+0xf4>)
 80031e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_InitTick+0xf0>)
 80031ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031f0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80031f2:	4a1e      	ldr	r2, [pc, #120]	; (800326c <HAL_InitTick+0xf0>)
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80031f8:	4b1c      	ldr	r3, [pc, #112]	; (800326c <HAL_InitTick+0xf0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_InitTick+0xf0>)
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_InitTick+0xf0>)
 8003206:	2200      	movs	r2, #0
 8003208:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800320a:	4818      	ldr	r0, [pc, #96]	; (800326c <HAL_InitTick+0xf0>)
 800320c:	f002 fa20 	bl	8005650 <HAL_TIM_Base_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003216:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800321a:	2b00      	cmp	r3, #0
 800321c:	d11b      	bne.n	8003256 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800321e:	4813      	ldr	r0, [pc, #76]	; (800326c <HAL_InitTick+0xf0>)
 8003220:	f002 fa66 	bl	80056f0 <HAL_TIM_Base_Start_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800322a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800322e:	2b00      	cmp	r3, #0
 8003230:	d111      	bne.n	8003256 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003232:	201d      	movs	r0, #29
 8003234:	f000 f99d 	bl	8003572 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	d808      	bhi.n	8003250 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800323e:	2200      	movs	r2, #0
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	201d      	movs	r0, #29
 8003244:	f000 f979 	bl	800353a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003248:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <HAL_InitTick+0xf8>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e002      	b.n	8003256 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003256:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800325a:	4618      	mov	r0, r3
 800325c:	3738      	adds	r7, #56	; 0x38
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	431bde83 	.word	0x431bde83
 800326c:	200001fc 	.word	0x200001fc
 8003270:	40000400 	.word	0x40000400
 8003274:	20000010 	.word	0x20000010

08003278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800327c:	e7fe      	b.n	800327c <NMI_Handler+0x4>

0800327e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003282:	e7fe      	b.n	8003282 <HardFault_Handler+0x4>

08003284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003288:	e7fe      	b.n	8003288 <MemManage_Handler+0x4>

0800328a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800328e:	e7fe      	b.n	800328e <BusFault_Handler+0x4>

08003290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <UsageFault_Handler+0x4>

08003296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
	...

080032a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <DMA1_Channel5_IRQHandler+0x10>)
 80032aa:	f000 fa67 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200001b0 	.word	0x200001b0

080032b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032bc:	4802      	ldr	r0, [pc, #8]	; (80032c8 <TIM3_IRQHandler+0x10>)
 80032be:	f002 fa69 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200001fc 	.word	0x200001fc

080032cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032d8:	f7ff fff8 	bl	80032cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032dc:	480b      	ldr	r0, [pc, #44]	; (800330c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80032de:	490c      	ldr	r1, [pc, #48]	; (8003310 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80032e0:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <LoopFillZerobss+0x16>)
  movs r3, #0
 80032e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e4:	e002      	b.n	80032ec <LoopCopyDataInit>

080032e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ea:	3304      	adds	r3, #4

080032ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f0:	d3f9      	bcc.n	80032e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f2:	4a09      	ldr	r2, [pc, #36]	; (8003318 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80032f4:	4c09      	ldr	r4, [pc, #36]	; (800331c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f8:	e001      	b.n	80032fe <LoopFillZerobss>

080032fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032fc:	3204      	adds	r2, #4

080032fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003300:	d3fb      	bcc.n	80032fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003302:	f006 feaf 	bl	800a064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003306:	f7ff f927 	bl	8002558 <main>
  bx lr
 800330a:	4770      	bx	lr
  ldr r0, =_sdata
 800330c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003310:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003314:	0800be78 	.word	0x0800be78
  ldr r2, =_sbss
 8003318:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800331c:	20001d68 	.word	0x20001d68

08003320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003320:	e7fe      	b.n	8003320 <ADC1_2_IRQHandler>
	...

08003324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <HAL_Init+0x28>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a07      	ldr	r2, [pc, #28]	; (800334c <HAL_Init+0x28>)
 800332e:	f043 0310 	orr.w	r3, r3, #16
 8003332:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003334:	2003      	movs	r0, #3
 8003336:	f000 f8f5 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800333a:	200f      	movs	r0, #15
 800333c:	f7ff ff1e 	bl	800317c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003340:	f7ff fe14 	bl	8002f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40022000 	.word	0x40022000

08003350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_IncTick+0x1c>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_IncTick+0x20>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4413      	add	r3, r2
 8003360:	4a03      	ldr	r2, [pc, #12]	; (8003370 <HAL_IncTick+0x20>)
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	20000014 	.word	0x20000014
 8003370:	20000244 	.word	0x20000244

08003374 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return uwTick;
 8003378:	4b02      	ldr	r3, [pc, #8]	; (8003384 <HAL_GetTick+0x10>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	20000244 	.word	0x20000244

08003388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff fff0 	bl	8003374 <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d005      	beq.n	80033ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <HAL_Delay+0x44>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ae:	bf00      	nop
 80033b0:	f7ff ffe0 	bl	8003374 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d8f7      	bhi.n	80033b0 <HAL_Delay+0x28>
  {
  }
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000014 	.word	0x20000014

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003402:	4a04      	ldr	r2, [pc, #16]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	60d3      	str	r3, [r2, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4906      	ldr	r1, [pc, #24]	; (8003468 <__NVIC_EnableIRQ+0x34>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	e000e100 	.word	0xe000e100

0800346c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	6039      	str	r1, [r7, #0]
 8003476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	2b00      	cmp	r3, #0
 800347e:	db0a      	blt.n	8003496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	490c      	ldr	r1, [pc, #48]	; (80034b8 <__NVIC_SetPriority+0x4c>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	0112      	lsls	r2, r2, #4
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	440b      	add	r3, r1
 8003490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003494:	e00a      	b.n	80034ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4908      	ldr	r1, [pc, #32]	; (80034bc <__NVIC_SetPriority+0x50>)
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	3b04      	subs	r3, #4
 80034a4:	0112      	lsls	r2, r2, #4
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	440b      	add	r3, r1
 80034aa:	761a      	strb	r2, [r3, #24]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f1c3 0307 	rsb	r3, r3, #7
 80034da:	2b04      	cmp	r3, #4
 80034dc:	bf28      	it	cs
 80034de:	2304      	movcs	r3, #4
 80034e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d902      	bls.n	80034f0 <NVIC_EncodePriority+0x30>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3b03      	subs	r3, #3
 80034ee:	e000      	b.n	80034f2 <NVIC_EncodePriority+0x32>
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	401a      	ands	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003508:	f04f 31ff 	mov.w	r1, #4294967295
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	43d9      	mvns	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	4313      	orrs	r3, r2
         );
}
 800351a:	4618      	mov	r0, r3
 800351c:	3724      	adds	r7, #36	; 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff4f 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800354c:	f7ff ff64 	bl	8003418 <__NVIC_GetPriorityGrouping>
 8003550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7ff ffb2 	bl	80034c0 <NVIC_EncodePriority>
 800355c:	4602      	mov	r2, r0
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff81 	bl	800346c <__NVIC_SetPriority>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff57 	bl	8003434 <__NVIC_EnableIRQ>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e043      	b.n	800362e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_DMA_Init+0xa8>)
 80035ae:	4413      	add	r3, r2
 80035b0:	4a22      	ldr	r2, [pc, #136]	; (800363c <HAL_DMA_Init+0xac>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	009a      	lsls	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a1f      	ldr	r2, [pc, #124]	; (8003640 <HAL_DMA_Init+0xb0>)
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	bffdfff8 	.word	0xbffdfff8
 800363c:	cccccccd 	.word	0xcccccccd
 8003640:	40020000 	.word	0x40020000

08003644 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_DMA_Start_IT+0x20>
 8003660:	2302      	movs	r3, #2
 8003662:	e04b      	b.n	80036fc <HAL_DMA_Start_IT+0xb8>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d13a      	bne.n	80036ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f973 	bl	8003988 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 020e 	orr.w	r2, r2, #14
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e00f      	b.n	80036dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 020a 	orr.w	r2, r2, #10
 80036da:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	e005      	b.n	80036fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
 80036f8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d008      	beq.n	800372e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2204      	movs	r2, #4
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e020      	b.n	8003770 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 020e 	bic.w	r2, r2, #14
 800373c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
	...

0800377c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	2204      	movs	r2, #4
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d04f      	beq.n	8003844 <HAL_DMA_IRQHandler+0xc8>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d04a      	beq.n	8003844 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0204 	bic.w	r2, r2, #4
 80037ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a66      	ldr	r2, [pc, #408]	; (800396c <HAL_DMA_IRQHandler+0x1f0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d029      	beq.n	800382a <HAL_DMA_IRQHandler+0xae>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a65      	ldr	r2, [pc, #404]	; (8003970 <HAL_DMA_IRQHandler+0x1f4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_DMA_IRQHandler+0xaa>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a63      	ldr	r2, [pc, #396]	; (8003974 <HAL_DMA_IRQHandler+0x1f8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01a      	beq.n	8003820 <HAL_DMA_IRQHandler+0xa4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a62      	ldr	r2, [pc, #392]	; (8003978 <HAL_DMA_IRQHandler+0x1fc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d012      	beq.n	800381a <HAL_DMA_IRQHandler+0x9e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a60      	ldr	r2, [pc, #384]	; (800397c <HAL_DMA_IRQHandler+0x200>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00a      	beq.n	8003814 <HAL_DMA_IRQHandler+0x98>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a5f      	ldr	r2, [pc, #380]	; (8003980 <HAL_DMA_IRQHandler+0x204>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d102      	bne.n	800380e <HAL_DMA_IRQHandler+0x92>
 8003808:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800380c:	e00e      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 800380e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003812:	e00b      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 8003814:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003818:	e008      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 800381a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800381e:	e005      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 8003820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003824:	e002      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 8003826:	2340      	movs	r3, #64	; 0x40
 8003828:	e000      	b.n	800382c <HAL_DMA_IRQHandler+0xb0>
 800382a:	2304      	movs	r3, #4
 800382c:	4a55      	ldr	r2, [pc, #340]	; (8003984 <HAL_DMA_IRQHandler+0x208>)
 800382e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8094 	beq.w	8003962 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003842:	e08e      	b.n	8003962 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	2202      	movs	r2, #2
 800384a:	409a      	lsls	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d056      	beq.n	8003902 <HAL_DMA_IRQHandler+0x186>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d051      	beq.n	8003902 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 020a 	bic.w	r2, r2, #10
 800387a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a38      	ldr	r2, [pc, #224]	; (800396c <HAL_DMA_IRQHandler+0x1f0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d029      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x166>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a37      	ldr	r2, [pc, #220]	; (8003970 <HAL_DMA_IRQHandler+0x1f4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d022      	beq.n	80038de <HAL_DMA_IRQHandler+0x162>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a35      	ldr	r2, [pc, #212]	; (8003974 <HAL_DMA_IRQHandler+0x1f8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01a      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x15c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a34      	ldr	r2, [pc, #208]	; (8003978 <HAL_DMA_IRQHandler+0x1fc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d012      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x156>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a32      	ldr	r2, [pc, #200]	; (800397c <HAL_DMA_IRQHandler+0x200>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00a      	beq.n	80038cc <HAL_DMA_IRQHandler+0x150>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a31      	ldr	r2, [pc, #196]	; (8003980 <HAL_DMA_IRQHandler+0x204>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d102      	bne.n	80038c6 <HAL_DMA_IRQHandler+0x14a>
 80038c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038c4:	e00e      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ca:	e00b      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d0:	e008      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038d6:	e005      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038dc:	e002      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038de:	2320      	movs	r3, #32
 80038e0:	e000      	b.n	80038e4 <HAL_DMA_IRQHandler+0x168>
 80038e2:	2302      	movs	r3, #2
 80038e4:	4a27      	ldr	r2, [pc, #156]	; (8003984 <HAL_DMA_IRQHandler+0x208>)
 80038e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d034      	beq.n	8003962 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003900:	e02f      	b.n	8003962 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2208      	movs	r2, #8
 8003908:	409a      	lsls	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d028      	beq.n	8003964 <HAL_DMA_IRQHandler+0x1e8>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 020e 	bic.w	r2, r2, #14
 800392a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	2101      	movs	r1, #1
 8003936:	fa01 f202 	lsl.w	r2, r1, r2
 800393a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
    }
  }
  return;
 8003962:	bf00      	nop
 8003964:	bf00      	nop
}
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40020008 	.word	0x40020008
 8003970:	4002001c 	.word	0x4002001c
 8003974:	40020030 	.word	0x40020030
 8003978:	40020044 	.word	0x40020044
 800397c:	40020058 	.word	0x40020058
 8003980:	4002006c 	.word	0x4002006c
 8003984:	40020000 	.word	0x40020000

08003988 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d108      	bne.n	80039c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039c6:	e007      	b.n	80039d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b08b      	sub	sp, #44	; 0x2c
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039f2:	2300      	movs	r3, #0
 80039f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f6:	e169      	b.n	8003ccc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039f8:	2201      	movs	r2, #1
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f040 8158 	bne.w	8003cc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4a9a      	ldr	r2, [pc, #616]	; (8003c84 <HAL_GPIO_Init+0x2a0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d05e      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a20:	4a98      	ldr	r2, [pc, #608]	; (8003c84 <HAL_GPIO_Init+0x2a0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d875      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a26:	4a98      	ldr	r2, [pc, #608]	; (8003c88 <HAL_GPIO_Init+0x2a4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d058      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a2c:	4a96      	ldr	r2, [pc, #600]	; (8003c88 <HAL_GPIO_Init+0x2a4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d86f      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a32:	4a96      	ldr	r2, [pc, #600]	; (8003c8c <HAL_GPIO_Init+0x2a8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d052      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a38:	4a94      	ldr	r2, [pc, #592]	; (8003c8c <HAL_GPIO_Init+0x2a8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d869      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a3e:	4a94      	ldr	r2, [pc, #592]	; (8003c90 <HAL_GPIO_Init+0x2ac>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d04c      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a44:	4a92      	ldr	r2, [pc, #584]	; (8003c90 <HAL_GPIO_Init+0x2ac>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d863      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a4a:	4a92      	ldr	r2, [pc, #584]	; (8003c94 <HAL_GPIO_Init+0x2b0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d046      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
 8003a50:	4a90      	ldr	r2, [pc, #576]	; (8003c94 <HAL_GPIO_Init+0x2b0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d85d      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a56:	2b12      	cmp	r3, #18
 8003a58:	d82a      	bhi.n	8003ab0 <HAL_GPIO_Init+0xcc>
 8003a5a:	2b12      	cmp	r3, #18
 8003a5c:	d859      	bhi.n	8003b12 <HAL_GPIO_Init+0x12e>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <HAL_GPIO_Init+0x80>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003adf 	.word	0x08003adf
 8003a68:	08003ab9 	.word	0x08003ab9
 8003a6c:	08003acb 	.word	0x08003acb
 8003a70:	08003b0d 	.word	0x08003b0d
 8003a74:	08003b13 	.word	0x08003b13
 8003a78:	08003b13 	.word	0x08003b13
 8003a7c:	08003b13 	.word	0x08003b13
 8003a80:	08003b13 	.word	0x08003b13
 8003a84:	08003b13 	.word	0x08003b13
 8003a88:	08003b13 	.word	0x08003b13
 8003a8c:	08003b13 	.word	0x08003b13
 8003a90:	08003b13 	.word	0x08003b13
 8003a94:	08003b13 	.word	0x08003b13
 8003a98:	08003b13 	.word	0x08003b13
 8003a9c:	08003b13 	.word	0x08003b13
 8003aa0:	08003b13 	.word	0x08003b13
 8003aa4:	08003b13 	.word	0x08003b13
 8003aa8:	08003ac1 	.word	0x08003ac1
 8003aac:	08003ad5 	.word	0x08003ad5
 8003ab0:	4a79      	ldr	r2, [pc, #484]	; (8003c98 <HAL_GPIO_Init+0x2b4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ab6:	e02c      	b.n	8003b12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	623b      	str	r3, [r7, #32]
          break;
 8003abe:	e029      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	623b      	str	r3, [r7, #32]
          break;
 8003ac8:	e024      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	623b      	str	r3, [r7, #32]
          break;
 8003ad2:	e01f      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	623b      	str	r3, [r7, #32]
          break;
 8003adc:	e01a      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	623b      	str	r3, [r7, #32]
          break;
 8003aea:	e013      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003af4:	2308      	movs	r3, #8
 8003af6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	611a      	str	r2, [r3, #16]
          break;
 8003afe:	e009      	b.n	8003b14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b00:	2308      	movs	r3, #8
 8003b02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	615a      	str	r2, [r3, #20]
          break;
 8003b0a:	e003      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	623b      	str	r3, [r7, #32]
          break;
 8003b10:	e000      	b.n	8003b14 <HAL_GPIO_Init+0x130>
          break;
 8003b12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2bff      	cmp	r3, #255	; 0xff
 8003b18:	d801      	bhi.n	8003b1e <HAL_GPIO_Init+0x13a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	e001      	b.n	8003b22 <HAL_GPIO_Init+0x13e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2bff      	cmp	r3, #255	; 0xff
 8003b28:	d802      	bhi.n	8003b30 <HAL_GPIO_Init+0x14c>
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	e002      	b.n	8003b36 <HAL_GPIO_Init+0x152>
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	3b08      	subs	r3, #8
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	210f      	movs	r1, #15
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	6a39      	ldr	r1, [r7, #32]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80b1 	beq.w	8003cc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b64:	4b4d      	ldr	r3, [pc, #308]	; (8003c9c <HAL_GPIO_Init+0x2b8>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_GPIO_Init+0x2b8>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6193      	str	r3, [r2, #24]
 8003b70:	4b4a      	ldr	r3, [pc, #296]	; (8003c9c <HAL_GPIO_Init+0x2b8>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b7c:	4a48      	ldr	r2, [pc, #288]	; (8003ca0 <HAL_GPIO_Init+0x2bc>)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3302      	adds	r3, #2
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	220f      	movs	r2, #15
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a40      	ldr	r2, [pc, #256]	; (8003ca4 <HAL_GPIO_Init+0x2c0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_GPIO_Init+0x1ec>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3f      	ldr	r2, [pc, #252]	; (8003ca8 <HAL_GPIO_Init+0x2c4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00d      	beq.n	8003bcc <HAL_GPIO_Init+0x1e8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3e      	ldr	r2, [pc, #248]	; (8003cac <HAL_GPIO_Init+0x2c8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <HAL_GPIO_Init+0x1e4>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <HAL_GPIO_Init+0x2cc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_GPIO_Init+0x1e0>
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e006      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e004      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e002      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_GPIO_Init+0x1ee>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	f002 0203 	and.w	r2, r2, #3
 8003bd8:	0092      	lsls	r2, r2, #2
 8003bda:	4093      	lsls	r3, r2
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003be2:	492f      	ldr	r1, [pc, #188]	; (8003ca0 <HAL_GPIO_Init+0x2bc>)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	3302      	adds	r3, #2
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d006      	beq.n	8003c0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	492c      	ldr	r1, [pc, #176]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	608b      	str	r3, [r1, #8]
 8003c08:	e006      	b.n	8003c18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	4928      	ldr	r1, [pc, #160]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c24:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	4922      	ldr	r1, [pc, #136]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60cb      	str	r3, [r1, #12]
 8003c30:	e006      	b.n	8003c40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	491e      	ldr	r1, [pc, #120]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d006      	beq.n	8003c5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	4918      	ldr	r1, [pc, #96]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
 8003c58:	e006      	b.n	8003c68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c5a:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	4914      	ldr	r1, [pc, #80]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d021      	beq.n	8003cb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c74:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	490e      	ldr	r1, [pc, #56]	; (8003cb4 <HAL_GPIO_Init+0x2d0>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
 8003c80:	e021      	b.n	8003cc6 <HAL_GPIO_Init+0x2e2>
 8003c82:	bf00      	nop
 8003c84:	10320000 	.word	0x10320000
 8003c88:	10310000 	.word	0x10310000
 8003c8c:	10220000 	.word	0x10220000
 8003c90:	10210000 	.word	0x10210000
 8003c94:	10120000 	.word	0x10120000
 8003c98:	10110000 	.word	0x10110000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40010800 	.word	0x40010800
 8003ca8:	40010c00 	.word	0x40010c00
 8003cac:	40011000 	.word	0x40011000
 8003cb0:	40011400 	.word	0x40011400
 8003cb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_GPIO_Init+0x304>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	4909      	ldr	r1, [pc, #36]	; (8003ce8 <HAL_GPIO_Init+0x304>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	3301      	adds	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f47f ae8e 	bne.w	80039f8 <HAL_GPIO_Init+0x14>
  }
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	372c      	adds	r7, #44	; 0x2c
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cfc:	787b      	ldrb	r3, [r7, #1]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d08:	e003      	b.n	8003d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d0a:	887b      	ldrh	r3, [r7, #2]
 8003d0c:	041a      	lsls	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	611a      	str	r2, [r3, #16]
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e12b      	b.n	8003f86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff f94a 	bl	8002fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	; 0x24
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d80:	f001 fbf0 	bl	8005564 <HAL_RCC_GetPCLK1Freq>
 8003d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4a81      	ldr	r2, [pc, #516]	; (8003f90 <HAL_I2C_Init+0x274>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d807      	bhi.n	8003da0 <HAL_I2C_Init+0x84>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a80      	ldr	r2, [pc, #512]	; (8003f94 <HAL_I2C_Init+0x278>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	bf94      	ite	ls
 8003d98:	2301      	movls	r3, #1
 8003d9a:	2300      	movhi	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e006      	b.n	8003dae <HAL_I2C_Init+0x92>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a7d      	ldr	r2, [pc, #500]	; (8003f98 <HAL_I2C_Init+0x27c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	bf94      	ite	ls
 8003da8:	2301      	movls	r3, #1
 8003daa:	2300      	movhi	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e0e7      	b.n	8003f86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a78      	ldr	r2, [pc, #480]	; (8003f9c <HAL_I2C_Init+0x280>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	0c9b      	lsrs	r3, r3, #18
 8003dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a6a      	ldr	r2, [pc, #424]	; (8003f90 <HAL_I2C_Init+0x274>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d802      	bhi.n	8003df0 <HAL_I2C_Init+0xd4>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	3301      	adds	r3, #1
 8003dee:	e009      	b.n	8003e04 <HAL_I2C_Init+0xe8>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	4a69      	ldr	r2, [pc, #420]	; (8003fa0 <HAL_I2C_Init+0x284>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	099b      	lsrs	r3, r3, #6
 8003e02:	3301      	adds	r3, #1
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	495c      	ldr	r1, [pc, #368]	; (8003f90 <HAL_I2C_Init+0x274>)
 8003e20:	428b      	cmp	r3, r1
 8003e22:	d819      	bhi.n	8003e58 <HAL_I2C_Init+0x13c>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e59      	subs	r1, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e32:	1c59      	adds	r1, r3, #1
 8003e34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e38:	400b      	ands	r3, r1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_I2C_Init+0x138>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1e59      	subs	r1, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e52:	e051      	b.n	8003ef8 <HAL_I2C_Init+0x1dc>
 8003e54:	2304      	movs	r3, #4
 8003e56:	e04f      	b.n	8003ef8 <HAL_I2C_Init+0x1dc>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d111      	bne.n	8003e84 <HAL_I2C_Init+0x168>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1e58      	subs	r0, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	440b      	add	r3, r1
 8003e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2301      	moveq	r3, #1
 8003e7e:	2300      	movne	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e012      	b.n	8003eaa <HAL_I2C_Init+0x18e>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e58      	subs	r0, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	0099      	lsls	r1, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Init+0x196>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e022      	b.n	8003ef8 <HAL_I2C_Init+0x1dc>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_I2C_Init+0x1bc>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1e58      	subs	r0, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	440b      	add	r3, r1
 8003ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ecc:	3301      	adds	r3, #1
 8003ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed6:	e00f      	b.n	8003ef8 <HAL_I2C_Init+0x1dc>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1e58      	subs	r0, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	0099      	lsls	r1, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	6809      	ldr	r1, [r1, #0]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6911      	ldr	r1, [r2, #16]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68d2      	ldr	r2, [r2, #12]
 8003f32:	4311      	orrs	r1, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	000186a0 	.word	0x000186a0
 8003f94:	001e847f 	.word	0x001e847f
 8003f98:	003d08ff 	.word	0x003d08ff
 8003f9c:	431bde83 	.word	0x431bde83
 8003fa0:	10624dd3 	.word	0x10624dd3

08003fa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	4608      	mov	r0, r1
 8003fae:	4611      	mov	r1, r2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	817b      	strh	r3, [r7, #10]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	813b      	strh	r3, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fbe:	f7ff f9d9 	bl	8003374 <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	f040 80d9 	bne.w	8004184 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	2319      	movs	r3, #25
 8003fd8:	2201      	movs	r2, #1
 8003fda:	496d      	ldr	r1, [pc, #436]	; (8004190 <HAL_I2C_Mem_Write+0x1ec>)
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fcc1 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e0cc      	b.n	8004186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2C_Mem_Write+0x56>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0c5      	b.n	8004186 <HAL_I2C_Mem_Write+0x1e2>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d007      	beq.n	8004020 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2221      	movs	r2, #33	; 0x21
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a4d      	ldr	r2, [pc, #308]	; (8004194 <HAL_I2C_Mem_Write+0x1f0>)
 8004060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004062:	88f8      	ldrh	r0, [r7, #6]
 8004064:	893a      	ldrh	r2, [r7, #8]
 8004066:	8979      	ldrh	r1, [r7, #10]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	4603      	mov	r3, r0
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 faf8 	bl	8004668 <I2C_RequestMemoryWrite>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d052      	beq.n	8004124 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e081      	b.n	8004186 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fd86 	bl	8004b98 <I2C_WaitOnTXEFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b04      	cmp	r3, #4
 8004098:	d107      	bne.n	80040aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e06b      	b.n	8004186 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	781a      	ldrb	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d11b      	bne.n	8004124 <HAL_I2C_Mem_Write+0x180>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d017      	beq.n	8004124 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	781a      	ldrb	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1aa      	bne.n	8004082 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fd79 	bl	8004c28 <I2C_WaitOnBTFFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00d      	beq.n	8004158 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	2b04      	cmp	r3, #4
 8004142:	d107      	bne.n	8004154 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004152:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e016      	b.n	8004186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	e000      	b.n	8004186 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
  }
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	00100002 	.word	0x00100002
 8004194:	ffff0000 	.word	0xffff0000

08004198 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08c      	sub	sp, #48	; 0x30
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	817b      	strh	r3, [r7, #10]
 80041aa:	460b      	mov	r3, r1
 80041ac:	813b      	strh	r3, [r7, #8]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041b6:	f7ff f8dd 	bl	8003374 <HAL_GetTick>
 80041ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	f040 8244 	bne.w	8004652 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	2319      	movs	r3, #25
 80041d0:	2201      	movs	r2, #1
 80041d2:	4982      	ldr	r1, [pc, #520]	; (80043dc <HAL_I2C_Mem_Read+0x244>)
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fbc5 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
 80041e2:	e237      	b.n	8004654 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x5a>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e230      	b.n	8004654 <HAL_I2C_Mem_Read+0x4bc>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d007      	beq.n	8004218 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004226:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2222      	movs	r2, #34	; 0x22
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2240      	movs	r2, #64	; 0x40
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a62      	ldr	r2, [pc, #392]	; (80043e0 <HAL_I2C_Mem_Read+0x248>)
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800425a:	88f8      	ldrh	r0, [r7, #6]
 800425c:	893a      	ldrh	r2, [r7, #8]
 800425e:	8979      	ldrh	r1, [r7, #10]
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	4603      	mov	r3, r0
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fa92 	bl	8004794 <I2C_RequestMemoryRead>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e1ec      	b.n	8004654 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427e:	2b00      	cmp	r3, #0
 8004280:	d113      	bne.n	80042aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e1c0      	b.n	800462c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d11e      	bne.n	80042f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042c2:	b672      	cpsid	i
}
 80042c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c6:	2300      	movs	r3, #0
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042ec:	b662      	cpsie	i
}
 80042ee:	e035      	b.n	800435c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d11e      	bne.n	8004336 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004306:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004308:	b672      	cpsid	i
}
 800430a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004330:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004332:	b662      	cpsie	i
}
 8004334:	e012      	b.n	800435c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004344:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800435c:	e166      	b.n	800462c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	2b03      	cmp	r3, #3
 8004364:	f200 811f 	bhi.w	80045a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	2b01      	cmp	r3, #1
 800436e:	d123      	bne.n	80043b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004372:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fc9f 	bl	8004cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e167      	b.n	8004654 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b6:	e139      	b.n	800462c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d152      	bne.n	8004466 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	2200      	movs	r2, #0
 80043c8:	4906      	ldr	r1, [pc, #24]	; (80043e4 <HAL_I2C_Mem_Read+0x24c>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 faca 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e13c      	b.n	8004654 <HAL_I2C_Mem_Read+0x4bc>
 80043da:	bf00      	nop
 80043dc:	00100002 	.word	0x00100002
 80043e0:	ffff0000 	.word	0xffff0000
 80043e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80043e8:	b672      	cpsid	i
}
 80043ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800442e:	b662      	cpsie	i
}
 8004430:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004464:	e0e2      	b.n	800462c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	2200      	movs	r2, #0
 800446e:	497b      	ldr	r1, [pc, #492]	; (800465c <HAL_I2C_Mem_Read+0x4c4>)
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fa77 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0e9      	b.n	8004654 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004490:	b672      	cpsid	i
}
 8004492:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044c6:	4b66      	ldr	r3, [pc, #408]	; (8004660 <HAL_I2C_Mem_Read+0x4c8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	08db      	lsrs	r3, r3, #3
 80044cc:	4a65      	ldr	r2, [pc, #404]	; (8004664 <HAL_I2C_Mem_Read+0x4cc>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	0a1a      	lsrs	r2, r3, #8
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	00da      	lsls	r2, r3, #3
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d118      	bne.n	800451e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800450e:	b662      	cpsie	i
}
 8004510:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e09a      	b.n	8004654 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d1d9      	bne.n	80044e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800456e:	b662      	cpsie	i
}
 8004570:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045a4:	e042      	b.n	800462c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fb84 	bl	8004cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e04c      	b.n	8004654 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d118      	bne.n	800462c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	f47f ae94 	bne.w	800435e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e000      	b.n	8004654 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3728      	adds	r7, #40	; 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	00010004 	.word	0x00010004
 8004660:	2000000c 	.word	0x2000000c
 8004664:	14f8b589 	.word	0x14f8b589

08004668 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4603      	mov	r3, r0
 8004678:	817b      	strh	r3, [r7, #10]
 800467a:	460b      	mov	r3, r1
 800467c:	813b      	strh	r3, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	2200      	movs	r2, #0
 800469a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f960 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b8:	d103      	bne.n	80046c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e05f      	b.n	8004786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	492d      	ldr	r1, [pc, #180]	; (8004790 <I2C_RequestMemoryWrite+0x128>)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f9bb 	bl	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e04c      	b.n	8004786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	6a39      	ldr	r1, [r7, #32]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fa46 	bl	8004b98 <I2C_WaitOnTXEFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b04      	cmp	r3, #4
 8004718:	d107      	bne.n	800472a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e02b      	b.n	8004786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d105      	bne.n	8004740 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004734:	893b      	ldrh	r3, [r7, #8]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	611a      	str	r2, [r3, #16]
 800473e:	e021      	b.n	8004784 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004740:	893b      	ldrh	r3, [r7, #8]
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	b29b      	uxth	r3, r3
 8004746:	b2da      	uxtb	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800474e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004750:	6a39      	ldr	r1, [r7, #32]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fa20 	bl	8004b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00d      	beq.n	800477a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	2b04      	cmp	r3, #4
 8004764:	d107      	bne.n	8004776 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e005      	b.n	8004786 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800477a:	893b      	ldrh	r3, [r7, #8]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	00010002 	.word	0x00010002

08004794 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	4608      	mov	r0, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	461a      	mov	r2, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	817b      	strh	r3, [r7, #10]
 80047a6:	460b      	mov	r3, r1
 80047a8:	813b      	strh	r3, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 f8c2 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f4:	d103      	bne.n	80047fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e0aa      	b.n	8004958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004802:	897b      	ldrh	r3, [r7, #10]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	4952      	ldr	r1, [pc, #328]	; (8004960 <I2C_RequestMemoryRead+0x1cc>)
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f91d 	bl	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e097      	b.n	8004958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	6a39      	ldr	r1, [r7, #32]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f9a8 	bl	8004b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00d      	beq.n	800486a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b04      	cmp	r3, #4
 8004854:	d107      	bne.n	8004866 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004864:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e076      	b.n	8004958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d105      	bne.n	800487c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004870:	893b      	ldrh	r3, [r7, #8]
 8004872:	b2da      	uxtb	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	611a      	str	r2, [r3, #16]
 800487a:	e021      	b.n	80048c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800487c:	893b      	ldrh	r3, [r7, #8]
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	b29b      	uxth	r3, r3
 8004882:	b2da      	uxtb	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800488a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488c:	6a39      	ldr	r1, [r7, #32]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f982 	bl	8004b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00d      	beq.n	80048b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d107      	bne.n	80048b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e050      	b.n	8004958 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048b6:	893b      	ldrh	r3, [r7, #8]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	6a39      	ldr	r1, [r7, #32]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f967 	bl	8004b98 <I2C_WaitOnTXEFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d107      	bne.n	80048e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e035      	b.n	8004958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	2200      	movs	r2, #0
 8004904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f82b 	bl	8004964 <I2C_WaitOnFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00d      	beq.n	8004930 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004922:	d103      	bne.n	800492c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800492a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e013      	b.n	8004958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004930:	897b      	ldrh	r3, [r7, #10]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	6a3a      	ldr	r2, [r7, #32]
 8004944:	4906      	ldr	r1, [pc, #24]	; (8004960 <I2C_RequestMemoryRead+0x1cc>)
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f886 	bl	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	00010002 	.word	0x00010002

08004964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004974:	e048      	b.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d044      	beq.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497e:	f7fe fcf9 	bl	8003374 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d139      	bne.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	0c1b      	lsrs	r3, r3, #16
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10d      	bne.n	80049ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	43da      	mvns	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4013      	ands	r3, r2
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	e00c      	b.n	80049d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	43da      	mvns	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4013      	ands	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf0c      	ite	eq
 80049cc:	2301      	moveq	r3, #1
 80049ce:	2300      	movne	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	461a      	mov	r2, r3
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d116      	bne.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	f043 0220 	orr.w	r2, r3, #32
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e023      	b.n	8004a50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	0c1b      	lsrs	r3, r3, #16
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d10d      	bne.n	8004a2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	43da      	mvns	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	e00c      	b.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	43da      	mvns	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d093      	beq.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a66:	e071      	b.n	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a76:	d123      	bne.n	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	f043 0204 	orr.w	r2, r3, #4
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e067      	b.n	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d041      	beq.n	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac8:	f7fe fc54 	bl	8003374 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d302      	bcc.n	8004ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d136      	bne.n	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d10c      	bne.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	43da      	mvns	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4013      	ands	r3, r2
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e00b      	b.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e021      	b.n	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10c      	bne.n	8004b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	43da      	mvns	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4013      	ands	r3, r2
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e00b      	b.n	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	43da      	mvns	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf14      	ite	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	2300      	moveq	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f47f af6d 	bne.w	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ba4:	e034      	b.n	8004c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f8e3 	bl	8004d72 <I2C_IsAcknowledgeFailed>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e034      	b.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d028      	beq.n	8004c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fe fbd9 	bl	8003374 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11d      	bne.n	8004c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	2b80      	cmp	r3, #128	; 0x80
 8004be0:	d016      	beq.n	8004c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f043 0220 	orr.w	r2, r3, #32
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e007      	b.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b80      	cmp	r3, #128	; 0x80
 8004c1c:	d1c3      	bne.n	8004ba6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c34:	e034      	b.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f89b 	bl	8004d72 <I2C_IsAcknowledgeFailed>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e034      	b.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d028      	beq.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4e:	f7fe fb91 	bl	8003374 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11d      	bne.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d016      	beq.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e007      	b.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d1c3      	bne.n	8004c36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cc4:	e049      	b.n	8004d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d119      	bne.n	8004d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0210 	mvn.w	r2, #16
 8004cdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e030      	b.n	8004d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d08:	f7fe fb34 	bl	8003374 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d302      	bcc.n	8004d1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11d      	bne.n	8004d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d016      	beq.n	8004d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f043 0220 	orr.w	r2, r3, #32
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e007      	b.n	8004d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d1ae      	bne.n	8004cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d88:	d11b      	bne.n	8004dc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f043 0204 	orr.w	r2, r3, #4
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr
	...

08004dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e272      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8087 	beq.w	8004efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004df0:	4b92      	ldr	r3, [pc, #584]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d00c      	beq.n	8004e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dfc:	4b8f      	ldr	r3, [pc, #572]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d112      	bne.n	8004e2e <HAL_RCC_OscConfig+0x5e>
 8004e08:	4b8c      	ldr	r3, [pc, #560]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e14:	d10b      	bne.n	8004e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e16:	4b89      	ldr	r3, [pc, #548]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d06c      	beq.n	8004efc <HAL_RCC_OscConfig+0x12c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d168      	bne.n	8004efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e24c      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e36:	d106      	bne.n	8004e46 <HAL_RCC_OscConfig+0x76>
 8004e38:	4b80      	ldr	r3, [pc, #512]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a7f      	ldr	r2, [pc, #508]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e02e      	b.n	8004ea4 <HAL_RCC_OscConfig+0xd4>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x98>
 8004e4e:	4b7b      	ldr	r3, [pc, #492]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a7a      	ldr	r2, [pc, #488]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	4b78      	ldr	r3, [pc, #480]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a77      	ldr	r2, [pc, #476]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e01d      	b.n	8004ea4 <HAL_RCC_OscConfig+0xd4>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCC_OscConfig+0xbc>
 8004e72:	4b72      	ldr	r3, [pc, #456]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a71      	ldr	r2, [pc, #452]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	4b6f      	ldr	r3, [pc, #444]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a6e      	ldr	r2, [pc, #440]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e00b      	b.n	8004ea4 <HAL_RCC_OscConfig+0xd4>
 8004e8c:	4b6b      	ldr	r3, [pc, #428]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a6a      	ldr	r2, [pc, #424]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	4b68      	ldr	r3, [pc, #416]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a67      	ldr	r2, [pc, #412]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d013      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fe fa62 	bl	8003374 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb4:	f7fe fa5e 	bl	8003374 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b64      	cmp	r3, #100	; 0x64
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e200      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	4b5d      	ldr	r3, [pc, #372]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0xe4>
 8004ed2:	e014      	b.n	8004efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fa4e 	bl	8003374 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fe fa4a 	bl	8003374 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e1ec      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	4b53      	ldr	r3, [pc, #332]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x10c>
 8004efa:	e000      	b.n	8004efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d063      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f0a:	4b4c      	ldr	r3, [pc, #304]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00b      	beq.n	8004f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f16:	4b49      	ldr	r3, [pc, #292]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d11c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x18c>
 8004f22:	4b46      	ldr	r3, [pc, #280]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d116      	bne.n	8004f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2e:	4b43      	ldr	r3, [pc, #268]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_RCC_OscConfig+0x176>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e1c0      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f46:	4b3d      	ldr	r3, [pc, #244]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4939      	ldr	r1, [pc, #228]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5a:	e03a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d020      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f64:	4b36      	ldr	r3, [pc, #216]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6a:	f7fe fa03 	bl	8003374 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f72:	f7fe f9ff 	bl	8003374 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e1a1      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f84:	4b2d      	ldr	r3, [pc, #180]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f90:	4b2a      	ldr	r3, [pc, #168]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4927      	ldr	r1, [pc, #156]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]
 8004fa4:	e015      	b.n	8004fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa6:	4b26      	ldr	r3, [pc, #152]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fac:	f7fe f9e2 	bl	8003374 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb4:	f7fe f9de 	bl	8003374 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e180      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc6:	4b1d      	ldr	r3, [pc, #116]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d03a      	beq.n	8005054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d019      	beq.n	800501a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe6:	4b17      	ldr	r3, [pc, #92]	; (8005044 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fec:	f7fe f9c2 	bl	8003374 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff4:	f7fe f9be 	bl	8003374 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e160      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005006:	4b0d      	ldr	r3, [pc, #52]	; (800503c <HAL_RCC_OscConfig+0x26c>)
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005012:	2001      	movs	r0, #1
 8005014:	f000 fafe 	bl	8005614 <RCC_Delay>
 8005018:	e01c      	b.n	8005054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <HAL_RCC_OscConfig+0x274>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005020:	f7fe f9a8 	bl	8003374 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005026:	e00f      	b.n	8005048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005028:	f7fe f9a4 	bl	8003374 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d908      	bls.n	8005048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e146      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	42420000 	.word	0x42420000
 8005044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005048:	4b92      	ldr	r3, [pc, #584]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e9      	bne.n	8005028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80a6 	beq.w	80051ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005066:	4b8b      	ldr	r3, [pc, #556]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10d      	bne.n	800508e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	4b88      	ldr	r3, [pc, #544]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	4a87      	ldr	r2, [pc, #540]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507c:	61d3      	str	r3, [r2, #28]
 800507e:	4b85      	ldr	r3, [pc, #532]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508e:	4b82      	ldr	r3, [pc, #520]	; (8005298 <HAL_RCC_OscConfig+0x4c8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d118      	bne.n	80050cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800509a:	4b7f      	ldr	r3, [pc, #508]	; (8005298 <HAL_RCC_OscConfig+0x4c8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a7e      	ldr	r2, [pc, #504]	; (8005298 <HAL_RCC_OscConfig+0x4c8>)
 80050a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a6:	f7fe f965 	bl	8003374 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ae:	f7fe f961 	bl	8003374 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b64      	cmp	r3, #100	; 0x64
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e103      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c0:	4b75      	ldr	r3, [pc, #468]	; (8005298 <HAL_RCC_OscConfig+0x4c8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d106      	bne.n	80050e2 <HAL_RCC_OscConfig+0x312>
 80050d4:	4b6f      	ldr	r3, [pc, #444]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	4a6e      	ldr	r2, [pc, #440]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	6213      	str	r3, [r2, #32]
 80050e0:	e02d      	b.n	800513e <HAL_RCC_OscConfig+0x36e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10c      	bne.n	8005104 <HAL_RCC_OscConfig+0x334>
 80050ea:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	4a69      	ldr	r2, [pc, #420]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	6213      	str	r3, [r2, #32]
 80050f6:	4b67      	ldr	r3, [pc, #412]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	4a66      	ldr	r2, [pc, #408]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050fc:	f023 0304 	bic.w	r3, r3, #4
 8005100:	6213      	str	r3, [r2, #32]
 8005102:	e01c      	b.n	800513e <HAL_RCC_OscConfig+0x36e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	2b05      	cmp	r3, #5
 800510a:	d10c      	bne.n	8005126 <HAL_RCC_OscConfig+0x356>
 800510c:	4b61      	ldr	r3, [pc, #388]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	4a60      	ldr	r2, [pc, #384]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005112:	f043 0304 	orr.w	r3, r3, #4
 8005116:	6213      	str	r3, [r2, #32]
 8005118:	4b5e      	ldr	r3, [pc, #376]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	4a5d      	ldr	r2, [pc, #372]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	6213      	str	r3, [r2, #32]
 8005124:	e00b      	b.n	800513e <HAL_RCC_OscConfig+0x36e>
 8005126:	4b5b      	ldr	r3, [pc, #364]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	4a5a      	ldr	r2, [pc, #360]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800512c:	f023 0301 	bic.w	r3, r3, #1
 8005130:	6213      	str	r3, [r2, #32]
 8005132:	4b58      	ldr	r3, [pc, #352]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	4a57      	ldr	r2, [pc, #348]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005138:	f023 0304 	bic.w	r3, r3, #4
 800513c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d015      	beq.n	8005172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005146:	f7fe f915 	bl	8003374 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514c:	e00a      	b.n	8005164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514e:	f7fe f911 	bl	8003374 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f241 3288 	movw	r2, #5000	; 0x1388
 800515c:	4293      	cmp	r3, r2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e0b1      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005164:	4b4b      	ldr	r3, [pc, #300]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0ee      	beq.n	800514e <HAL_RCC_OscConfig+0x37e>
 8005170:	e014      	b.n	800519c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005172:	f7fe f8ff 	bl	8003374 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005178:	e00a      	b.n	8005190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fe f8fb 	bl	8003374 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	; 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e09b      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005190:	4b40      	ldr	r3, [pc, #256]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1ee      	bne.n	800517a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d105      	bne.n	80051ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a2:	4b3c      	ldr	r3, [pc, #240]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	4a3b      	ldr	r2, [pc, #236]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8087 	beq.w	80052c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051b8:	4b36      	ldr	r3, [pc, #216]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d061      	beq.n	8005288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d146      	bne.n	800525a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051cc:	4b33      	ldr	r3, [pc, #204]	; (800529c <HAL_RCC_OscConfig+0x4cc>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d2:	f7fe f8cf 	bl	8003374 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051da:	f7fe f8cb 	bl	8003374 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e06d      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ec:	4b29      	ldr	r3, [pc, #164]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f0      	bne.n	80051da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005200:	d108      	bne.n	8005214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005202:	4b24      	ldr	r3, [pc, #144]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	4921      	ldr	r1, [pc, #132]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005210:	4313      	orrs	r3, r2
 8005212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005214:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a19      	ldr	r1, [r3, #32]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	430b      	orrs	r3, r1
 8005226:	491b      	ldr	r1, [pc, #108]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800522c:	4b1b      	ldr	r3, [pc, #108]	; (800529c <HAL_RCC_OscConfig+0x4cc>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005232:	f7fe f89f 	bl	8003374 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523a:	f7fe f89b 	bl	8003374 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e03d      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800524c:	4b11      	ldr	r3, [pc, #68]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x46a>
 8005258:	e035      	b.n	80052c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b10      	ldr	r3, [pc, #64]	; (800529c <HAL_RCC_OscConfig+0x4cc>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fe f888 	bl	8003374 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005268:	f7fe f884 	bl	8003374 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e026      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x498>
 8005286:	e01e      	b.n	80052c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d107      	bne.n	80052a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e019      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
 8005294:	40021000 	.word	0x40021000
 8005298:	40007000 	.word	0x40007000
 800529c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <HAL_RCC_OscConfig+0x500>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000

080052d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0d0      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e8:	4b6a      	ldr	r3, [pc, #424]	; (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d910      	bls.n	8005318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f6:	4b67      	ldr	r3, [pc, #412]	; (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 0207 	bic.w	r2, r3, #7
 80052fe:	4965      	ldr	r1, [pc, #404]	; (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	4313      	orrs	r3, r2
 8005304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b63      	ldr	r3, [pc, #396]	; (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0b8      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005330:	4b59      	ldr	r3, [pc, #356]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a58      	ldr	r2, [pc, #352]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005336:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800533a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005348:	4b53      	ldr	r3, [pc, #332]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a52      	ldr	r2, [pc, #328]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800534e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b50      	ldr	r3, [pc, #320]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	494d      	ldr	r1, [pc, #308]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005362:	4313      	orrs	r3, r2
 8005364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d040      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	4b47      	ldr	r3, [pc, #284]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d115      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e07f      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005392:	4b41      	ldr	r3, [pc, #260]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e073      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a2:	4b3d      	ldr	r3, [pc, #244]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e06b      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053b2:	4b39      	ldr	r3, [pc, #228]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f023 0203 	bic.w	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4936      	ldr	r1, [pc, #216]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053c4:	f7fd ffd6 	bl	8003374 <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	e00a      	b.n	80053e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053cc:	f7fd ffd2 	bl	8003374 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e053      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	4b2d      	ldr	r3, [pc, #180]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 020c 	and.w	r2, r3, #12
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d1eb      	bne.n	80053cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053f4:	4b27      	ldr	r3, [pc, #156]	; (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d210      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005402:	4b24      	ldr	r3, [pc, #144]	; (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 0207 	bic.w	r2, r3, #7
 800540a:	4922      	ldr	r1, [pc, #136]	; (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	4313      	orrs	r3, r2
 8005410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005412:	4b20      	ldr	r3, [pc, #128]	; (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e032      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005430:	4b19      	ldr	r3, [pc, #100]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4916      	ldr	r1, [pc, #88]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800543e:	4313      	orrs	r3, r2
 8005440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	490e      	ldr	r1, [pc, #56]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800545e:	4313      	orrs	r3, r2
 8005460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005462:	f000 f821 	bl	80054a8 <HAL_RCC_GetSysClockFreq>
 8005466:	4602      	mov	r2, r0
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	490a      	ldr	r1, [pc, #40]	; (800549c <HAL_RCC_ClockConfig+0x1c8>)
 8005474:	5ccb      	ldrb	r3, [r1, r3]
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <HAL_RCC_ClockConfig+0x1cc>)
 800547c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800547e:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fd fe7a 	bl	800317c <HAL_InitTick>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40022000 	.word	0x40022000
 8005498:	40021000 	.word	0x40021000
 800549c:	0800bbfc 	.word	0x0800bbfc
 80054a0:	2000000c 	.word	0x2000000c
 80054a4:	20000010 	.word	0x20000010

080054a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	2300      	movs	r3, #0
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054c2:	4b1e      	ldr	r3, [pc, #120]	; (800553c <HAL_RCC_GetSysClockFreq+0x94>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d002      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x30>
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d003      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0x36>
 80054d6:	e027      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054d8:	4b19      	ldr	r3, [pc, #100]	; (8005540 <HAL_RCC_GetSysClockFreq+0x98>)
 80054da:	613b      	str	r3, [r7, #16]
      break;
 80054dc:	e027      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	0c9b      	lsrs	r3, r3, #18
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	4a17      	ldr	r2, [pc, #92]	; (8005544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80054e8:	5cd3      	ldrb	r3, [r2, r3]
 80054ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054f6:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_RCC_GetSysClockFreq+0x94>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0c5b      	lsrs	r3, r3, #17
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	4a11      	ldr	r2, [pc, #68]	; (8005548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a0d      	ldr	r2, [pc, #52]	; (8005540 <HAL_RCC_GetSysClockFreq+0x98>)
 800550a:	fb03 f202 	mul.w	r2, r3, r2
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e004      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a0c      	ldr	r2, [pc, #48]	; (800554c <HAL_RCC_GetSysClockFreq+0xa4>)
 800551c:	fb02 f303 	mul.w	r3, r2, r3
 8005520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	613b      	str	r3, [r7, #16]
      break;
 8005526:	e002      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetSysClockFreq+0x98>)
 800552a:	613b      	str	r3, [r7, #16]
      break;
 800552c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800552e:	693b      	ldr	r3, [r7, #16]
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	007a1200 	.word	0x007a1200
 8005544:	0800bc14 	.word	0x0800bc14
 8005548:	0800bc24 	.word	0x0800bc24
 800554c:	003d0900 	.word	0x003d0900

08005550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005554:	4b02      	ldr	r3, [pc, #8]	; (8005560 <HAL_RCC_GetHCLKFreq+0x10>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	2000000c 	.word	0x2000000c

08005564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005568:	f7ff fff2 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4903      	ldr	r1, [pc, #12]	; (8005588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000
 8005588:	0800bc0c 	.word	0x0800bc0c

0800558c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005590:	f7ff ffde 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b05      	ldr	r3, [pc, #20]	; (80055ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	0adb      	lsrs	r3, r3, #11
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	4903      	ldr	r1, [pc, #12]	; (80055b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000
 80055b0:	0800bc0c 	.word	0x0800bc0c

080055b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	220f      	movs	r2, #15
 80055c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055c4:	4b11      	ldr	r3, [pc, #68]	; (800560c <HAL_RCC_GetClockConfig+0x58>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f003 0203 	and.w	r2, r3, #3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055d0:	4b0e      	ldr	r3, [pc, #56]	; (800560c <HAL_RCC_GetClockConfig+0x58>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RCC_GetClockConfig+0x58>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055e8:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_RCC_GetClockConfig+0x58>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	08db      	lsrs	r3, r3, #3
 80055ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055f6:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_RCC_GetClockConfig+0x5c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0207 	and.w	r2, r3, #7
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	40021000 	.word	0x40021000
 8005610:	40022000 	.word	0x40022000

08005614 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <RCC_Delay+0x34>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0a      	ldr	r2, [pc, #40]	; (800564c <RCC_Delay+0x38>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	0a5b      	lsrs	r3, r3, #9
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005630:	bf00      	nop
  }
  while (Delay --);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1e5a      	subs	r2, r3, #1
 8005636:	60fa      	str	r2, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f9      	bne.n	8005630 <RCC_Delay+0x1c>
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	2000000c 	.word	0x2000000c
 800564c:	10624dd3 	.word	0x10624dd3

08005650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e041      	b.n	80056e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fd fcee 	bl	8003058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3304      	adds	r3, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f000 fa74 	bl	8005b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d001      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e03a      	b.n	800577e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a18      	ldr	r2, [pc, #96]	; (8005788 <HAL_TIM_Base_Start_IT+0x98>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00e      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x58>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005732:	d009      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x58>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a14      	ldr	r2, [pc, #80]	; (800578c <HAL_TIM_Base_Start_IT+0x9c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x58>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a13      	ldr	r2, [pc, #76]	; (8005790 <HAL_TIM_Base_Start_IT+0xa0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d111      	bne.n	800576c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b06      	cmp	r3, #6
 8005758:	d010      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0201 	orr.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576a:	e007      	b.n	800577c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800

08005794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0202 	mvn.w	r2, #2
 80057c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f9b4 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9a7 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f9b6 	bl	8005b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d122      	bne.n	8005844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d11b      	bne.n	8005844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0204 	mvn.w	r2, #4
 8005814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f98a 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 8005830:	e005      	b.n	800583e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f97d 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f98c 	bl	8005b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b08      	cmp	r3, #8
 8005850:	d122      	bne.n	8005898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b08      	cmp	r3, #8
 800585e:	d11b      	bne.n	8005898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0208 	mvn.w	r2, #8
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2204      	movs	r2, #4
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f960 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f953 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f962 	bl	8005b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d122      	bne.n	80058ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0210 	mvn.w	r2, #16
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2208      	movs	r2, #8
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f936 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f929 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f938 	bl	8005b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0201 	mvn.w	r2, #1
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fd f92c 	bl	8002b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d10e      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d107      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa7b 	bl	8005e3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b40      	cmp	r3, #64	; 0x40
 8005950:	d10e      	bne.n	8005970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d107      	bne.n	8005970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8fc 	bl	8005b68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b20      	cmp	r3, #32
 800597c:	d10e      	bne.n	800599c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b20      	cmp	r3, #32
 800598a:	d107      	bne.n	800599c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0220 	mvn.w	r2, #32
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa46 	bl	8005e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_TIM_ConfigClockSource+0x1c>
 80059bc:	2302      	movs	r3, #2
 80059be:	e0b4      	b.n	8005b2a <HAL_TIM_ConfigClockSource+0x186>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f8:	d03e      	beq.n	8005a78 <HAL_TIM_ConfigClockSource+0xd4>
 80059fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fe:	f200 8087 	bhi.w	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a06:	f000 8086 	beq.w	8005b16 <HAL_TIM_ConfigClockSource+0x172>
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0e:	d87f      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b70      	cmp	r3, #112	; 0x70
 8005a12:	d01a      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0xa6>
 8005a14:	2b70      	cmp	r3, #112	; 0x70
 8005a16:	d87b      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b60      	cmp	r3, #96	; 0x60
 8005a1a:	d050      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x11a>
 8005a1c:	2b60      	cmp	r3, #96	; 0x60
 8005a1e:	d877      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	2b50      	cmp	r3, #80	; 0x50
 8005a22:	d03c      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0xfa>
 8005a24:	2b50      	cmp	r3, #80	; 0x50
 8005a26:	d873      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d058      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x13a>
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	d86f      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a30:	2b30      	cmp	r3, #48	; 0x30
 8005a32:	d064      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x15a>
 8005a34:	2b30      	cmp	r3, #48	; 0x30
 8005a36:	d86b      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d060      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x15a>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d867      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d05c      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x15a>
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d05a      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x15a>
 8005a48:	e062      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a5a:	f000 f968 	bl	8005d2e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	609a      	str	r2, [r3, #8]
      break;
 8005a76:	e04f      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a88:	f000 f951 	bl	8005d2e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a9a:	609a      	str	r2, [r3, #8]
      break;
 8005a9c:	e03c      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 f8c8 	bl	8005c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2150      	movs	r1, #80	; 0x50
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f91f 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005abc:	e02c      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 f8e6 	bl	8005c9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2160      	movs	r1, #96	; 0x60
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f90f 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005adc:	e01c      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aea:	461a      	mov	r2, r3
 8005aec:	f000 f8a8 	bl	8005c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2140      	movs	r1, #64	; 0x40
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f8ff 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005afc:	e00c      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f000 f8f6 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005b0e:	e003      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	73fb      	strb	r3, [r7, #15]
      break;
 8005b14:	e000      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr

08005b56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
	...

08005b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a29      	ldr	r2, [pc, #164]	; (8005c34 <TIM_Base_SetConfig+0xb8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00b      	beq.n	8005bac <TIM_Base_SetConfig+0x30>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9a:	d007      	beq.n	8005bac <TIM_Base_SetConfig+0x30>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a26      	ldr	r2, [pc, #152]	; (8005c38 <TIM_Base_SetConfig+0xbc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_Base_SetConfig+0x30>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a25      	ldr	r2, [pc, #148]	; (8005c3c <TIM_Base_SetConfig+0xc0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d108      	bne.n	8005bbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <TIM_Base_SetConfig+0xb8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <TIM_Base_SetConfig+0x62>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bcc:	d007      	beq.n	8005bde <TIM_Base_SetConfig+0x62>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <TIM_Base_SetConfig+0xbc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_Base_SetConfig+0x62>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a18      	ldr	r2, [pc, #96]	; (8005c3c <TIM_Base_SetConfig+0xc0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d108      	bne.n	8005bf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a07      	ldr	r2, [pc, #28]	; (8005c34 <TIM_Base_SetConfig+0xb8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d103      	bne.n	8005c24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	615a      	str	r2, [r3, #20]
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800

08005c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f023 0201 	bic.w	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f023 030a 	bic.w	r3, r3, #10
 8005c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0210 	bic.w	r2, r3, #16
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	031b      	lsls	r3, r3, #12
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	621a      	str	r2, [r3, #32]
}
 8005cf0:	bf00      	nop
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr

08005cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f043 0307 	orr.w	r3, r3, #7
 8005d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	609a      	str	r2, [r3, #8]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b087      	sub	sp, #28
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	021a      	lsls	r2, r3, #8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	609a      	str	r2, [r3, #8]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e046      	b.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a12      	ldr	r2, [pc, #72]	; (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a10      	ldr	r2, [pc, #64]	; (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10c      	bne.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr
 8005e1c:	40012c00 	.word	0x40012c00
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800

08005e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e042      	b.n	8005ee4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fd f90c 	bl	8003090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2224      	movs	r2, #36	; 0x24
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fbff 	bl	8006694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	d16d      	bne.n	8005fe8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_UART_Transmit+0x2c>
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e066      	b.n	8005fea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2221      	movs	r2, #33	; 0x21
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f2a:	f7fd fa23 	bl	8003374 <HAL_GetTick>
 8005f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f44:	d108      	bne.n	8005f58 <HAL_UART_Transmit+0x6c>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	e003      	b.n	8005f60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f60:	e02a      	b.n	8005fb8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2180      	movs	r1, #128	; 0x80
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f9ff 	bl	8006370 <UART_WaitOnFlagUntilTimeout>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e036      	b.n	8005fea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	3302      	adds	r3, #2
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	e007      	b.n	8005faa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1cf      	bne.n	8005f62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2140      	movs	r1, #64	; 0x40
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f9cf 	bl	8006370 <UART_WaitOnFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e006      	b.n	8005fea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e000      	b.n	8005fea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005fe8:	2302      	movs	r3, #2
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b20      	cmp	r3, #32
 800600a:	d112      	bne.n	8006032 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_UART_Receive_DMA+0x26>
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e00b      	b.n	8006034 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	461a      	mov	r2, r3
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 fa0f 	bl	800644c <UART_Start_Receive_DMA>
 800602e:	4603      	mov	r3, r0
 8006030:	e000      	b.n	8006034 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006032:	2302      	movs	r3, #2
  }
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b090      	sub	sp, #64	; 0x40
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006044:	2300      	movs	r3, #0
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf14      	ite	ne
 8006056:	2301      	movne	r3, #1
 8006058:	2300      	moveq	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b21      	cmp	r3, #33	; 0x21
 8006068:	d128      	bne.n	80060bc <HAL_UART_DMAStop+0x80>
 800606a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d025      	beq.n	80060bc <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3314      	adds	r3, #20
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	623b      	str	r3, [r7, #32]
   return(result);
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006086:	63bb      	str	r3, [r7, #56]	; 0x38
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3314      	adds	r3, #20
 800608e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006090:	633a      	str	r2, [r7, #48]	; 0x30
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e5      	bne.n	8006070 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fd fb27 	bl	8003704 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa62 	bl	8006580 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bf14      	ite	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	2300      	moveq	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b22      	cmp	r3, #34	; 0x22
 80060dc:	d128      	bne.n	8006130 <HAL_UART_DMAStop+0xf4>
 80060de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d025      	beq.n	8006130 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fa:	637b      	str	r3, [r7, #52]	; 0x34
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3314      	adds	r3, #20
 8006102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006104:	61fa      	str	r2, [r7, #28]
 8006106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	69b9      	ldr	r1, [r7, #24]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	617b      	str	r3, [r7, #20]
   return(result);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e5      	bne.n	80060e4 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	4618      	mov	r0, r3
 8006126:	f7fd faed 	bl	8003704 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fa4f 	bl	80065ce <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3740      	adds	r7, #64	; 0x40
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr

0800615e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr

08006174 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b09c      	sub	sp, #112	; 0x70
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d172      	bne.n	8006276 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006192:	2200      	movs	r2, #0
 8006194:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80061b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	667b      	str	r3, [r7, #100]	; 0x64
 80061e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3314      	adds	r3, #20
 80061e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80061ea:	647a      	str	r2, [r7, #68]	; 0x44
 80061ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e5      	bne.n	80061ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3314      	adds	r3, #20
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	623b      	str	r3, [r7, #32]
   return(result);
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006214:	663b      	str	r3, [r7, #96]	; 0x60
 8006216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3314      	adds	r3, #20
 800621c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800621e:	633a      	str	r2, [r7, #48]	; 0x30
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e5      	bne.n	80061fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	2b01      	cmp	r3, #1
 8006240:	d119      	bne.n	8006276 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	330c      	adds	r3, #12
 8006248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	60fb      	str	r3, [r7, #12]
   return(result);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f023 0310 	bic.w	r3, r3, #16
 8006258:	65fb      	str	r3, [r7, #92]	; 0x5c
 800625a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	330c      	adds	r3, #12
 8006260:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006262:	61fa      	str	r2, [r7, #28]
 8006264:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	69b9      	ldr	r1, [r7, #24]
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	617b      	str	r3, [r7, #20]
   return(result);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e5      	bne.n	8006242 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006278:	2200      	movs	r2, #0
 800627a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	2b01      	cmp	r3, #1
 8006282:	d106      	bne.n	8006292 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006286:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006288:	4619      	mov	r1, r3
 800628a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800628c:	f7ff ff67 	bl	800615e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006290:	e002      	b.n	8006298 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006292:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006294:	f7fc f822 	bl	80022dc <HAL_UART_RxCpltCallback>
}
 8006298:	bf00      	nop
 800629a:	3770      	adds	r7, #112	; 0x70
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d108      	bne.n	80062ce <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062c0:	085b      	lsrs	r3, r3, #1
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	4619      	mov	r1, r3
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff ff49 	bl	800615e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062cc:	e002      	b.n	80062d4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff ff33 	bl	800613a <HAL_UART_RxHalfCpltCallback>
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	bf14      	ite	ne
 80062fc:	2301      	movne	r3, #1
 80062fe:	2300      	moveq	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b21      	cmp	r3, #33	; 0x21
 800630e:	d108      	bne.n	8006322 <UART_DMAError+0x46>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2200      	movs	r2, #0
 800631a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800631c:	68b8      	ldr	r0, [r7, #8]
 800631e:	f000 f92f 	bl	8006580 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	bf14      	ite	ne
 8006330:	2301      	movne	r3, #1
 8006332:	2300      	moveq	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b22      	cmp	r3, #34	; 0x22
 8006342:	d108      	bne.n	8006356 <UART_DMAError+0x7a>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2200      	movs	r2, #0
 800634e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006350:	68b8      	ldr	r0, [r7, #8]
 8006352:	f000 f93c 	bl	80065ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635a:	f043 0210 	orr.w	r2, r3, #16
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006362:	68b8      	ldr	r0, [r7, #8]
 8006364:	f7ff fef2 	bl	800614c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b090      	sub	sp, #64	; 0x40
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	4613      	mov	r3, r2
 800637e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006380:	e050      	b.n	8006424 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006388:	d04c      	beq.n	8006424 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800638a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638c:	2b00      	cmp	r3, #0
 800638e:	d007      	beq.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006390:	f7fc fff0 	bl	8003374 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800639c:	429a      	cmp	r2, r3
 800639e:	d241      	bcs.n	8006424 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063c0:	637a      	str	r2, [r7, #52]	; 0x34
 80063c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e5      	bne.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3314      	adds	r3, #20
 80063da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	613b      	str	r3, [r7, #16]
   return(result);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3314      	adds	r3, #20
 80063f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063f4:	623a      	str	r2, [r7, #32]
 80063f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	69f9      	ldr	r1, [r7, #28]
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	61bb      	str	r3, [r7, #24]
   return(result);
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e5      	bne.n	80063d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e00f      	b.n	8006444 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4013      	ands	r3, r2
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	429a      	cmp	r2, r3
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	429a      	cmp	r2, r3
 8006440:	d09f      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3740      	adds	r7, #64	; 0x40
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b098      	sub	sp, #96	; 0x60
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2222      	movs	r2, #34	; 0x22
 8006470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006478:	4a3e      	ldr	r2, [pc, #248]	; (8006574 <UART_Start_Receive_DMA+0x128>)
 800647a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006480:	4a3d      	ldr	r2, [pc, #244]	; (8006578 <UART_Start_Receive_DMA+0x12c>)
 8006482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006488:	4a3c      	ldr	r2, [pc, #240]	; (800657c <UART_Start_Receive_DMA+0x130>)
 800648a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006490:	2200      	movs	r2, #0
 8006492:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006494:	f107 0308 	add.w	r3, r7, #8
 8006498:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	88fb      	ldrh	r3, [r7, #6]
 80064ac:	f7fd f8ca 	bl	8003644 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80064b0:	2300      	movs	r3, #0
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d019      	beq.n	8006502 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	330c      	adds	r3, #12
 80064d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	330c      	adds	r3, #12
 80064ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80064f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80064f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80064fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e5      	bne.n	80064ce <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3314      	adds	r3, #20
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	f043 0301 	orr.w	r3, r3, #1
 8006518:	657b      	str	r3, [r7, #84]	; 0x54
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3314      	adds	r3, #20
 8006520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006522:	63ba      	str	r2, [r7, #56]	; 0x38
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e5      	bne.n	8006502 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3314      	adds	r3, #20
 800653c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	617b      	str	r3, [r7, #20]
   return(result);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654c:	653b      	str	r3, [r7, #80]	; 0x50
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3314      	adds	r3, #20
 8006554:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006556:	627a      	str	r2, [r7, #36]	; 0x24
 8006558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6a39      	ldr	r1, [r7, #32]
 800655c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	61fb      	str	r3, [r7, #28]
   return(result);
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e5      	bne.n	8006536 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3760      	adds	r7, #96	; 0x60
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	08006175 	.word	0x08006175
 8006578:	080062a1 	.word	0x080062a1
 800657c:	080062dd 	.word	0x080062dd

08006580 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b089      	sub	sp, #36	; 0x24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	330c      	adds	r3, #12
 800658e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	60bb      	str	r3, [r7, #8]
   return(result);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	330c      	adds	r3, #12
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	61ba      	str	r2, [r7, #24]
 80065aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6979      	ldr	r1, [r7, #20]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	613b      	str	r3, [r7, #16]
   return(result);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e5      	bne.n	8006588 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80065c4:	bf00      	nop
 80065c6:	3724      	adds	r7, #36	; 0x24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr

080065ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b095      	sub	sp, #84	; 0x54
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065f6:	643a      	str	r2, [r7, #64]	; 0x40
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e5      	bne.n	80065d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3314      	adds	r3, #20
 8006610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	61fb      	str	r3, [r7, #28]
   return(result);
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	64bb      	str	r3, [r7, #72]	; 0x48
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3314      	adds	r3, #20
 8006628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800662a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e5      	bne.n	800660a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	2b01      	cmp	r3, #1
 8006644:	d119      	bne.n	800667a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	330c      	adds	r3, #12
 800664c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	60bb      	str	r3, [r7, #8]
   return(result);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f023 0310 	bic.w	r3, r3, #16
 800665c:	647b      	str	r3, [r7, #68]	; 0x44
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006666:	61ba      	str	r2, [r7, #24]
 8006668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6979      	ldr	r1, [r7, #20]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	613b      	str	r3, [r7, #16]
   return(result);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e5      	bne.n	8006646 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006688:	bf00      	nop
 800668a:	3754      	adds	r7, #84	; 0x54
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr
	...

08006694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80066ce:	f023 030c 	bic.w	r3, r3, #12
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	430b      	orrs	r3, r1
 80066da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2c      	ldr	r2, [pc, #176]	; (80067a8 <UART_SetConfig+0x114>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d103      	bne.n	8006704 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80066fc:	f7fe ff46 	bl	800558c <HAL_RCC_GetPCLK2Freq>
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	e002      	b.n	800670a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006704:	f7fe ff2e 	bl	8005564 <HAL_RCC_GetPCLK1Freq>
 8006708:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	009a      	lsls	r2, r3, #2
 8006714:	441a      	add	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006720:	4a22      	ldr	r2, [pc, #136]	; (80067ac <UART_SetConfig+0x118>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	0119      	lsls	r1, r3, #4
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009a      	lsls	r2, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006740:	4b1a      	ldr	r3, [pc, #104]	; (80067ac <UART_SetConfig+0x118>)
 8006742:	fba3 0302 	umull	r0, r3, r3, r2
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	2064      	movs	r0, #100	; 0x64
 800674a:	fb00 f303 	mul.w	r3, r0, r3
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	3332      	adds	r3, #50	; 0x32
 8006754:	4a15      	ldr	r2, [pc, #84]	; (80067ac <UART_SetConfig+0x118>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006760:	4419      	add	r1, r3
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009a      	lsls	r2, r3, #2
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	fbb2 f2f3 	udiv	r2, r2, r3
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <UART_SetConfig+0x118>)
 800677a:	fba3 0302 	umull	r0, r3, r3, r2
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	2064      	movs	r0, #100	; 0x64
 8006782:	fb00 f303 	mul.w	r3, r0, r3
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	3332      	adds	r3, #50	; 0x32
 800678c:	4a07      	ldr	r2, [pc, #28]	; (80067ac <UART_SetConfig+0x118>)
 800678e:	fba2 2303 	umull	r2, r3, r2, r3
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	f003 020f 	and.w	r2, r3, #15
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	440a      	add	r2, r1
 800679e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	40013800 	.word	0x40013800
 80067ac:	51eb851f 	.word	0x51eb851f

080067b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067b6:	f3ef 8305 	mrs	r3, IPSR
 80067ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80067bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10f      	bne.n	80067e2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c2:	f3ef 8310 	mrs	r3, PRIMASK
 80067c6:	607b      	str	r3, [r7, #4]
  return(result);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <osKernelInitialize+0x32>
 80067ce:	4b10      	ldr	r3, [pc, #64]	; (8006810 <osKernelInitialize+0x60>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d109      	bne.n	80067ea <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067d6:	f3ef 8311 	mrs	r3, BASEPRI
 80067da:	603b      	str	r3, [r7, #0]
  return(result);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80067e2:	f06f 0305 	mvn.w	r3, #5
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e00c      	b.n	8006804 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067ea:	4b09      	ldr	r3, [pc, #36]	; (8006810 <osKernelInitialize+0x60>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d105      	bne.n	80067fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80067f2:	4b07      	ldr	r3, [pc, #28]	; (8006810 <osKernelInitialize+0x60>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e002      	b.n	8006804 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006802:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006804:	68fb      	ldr	r3, [r7, #12]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr
 8006810:	20000248 	.word	0x20000248

08006814 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800681a:	f3ef 8305 	mrs	r3, IPSR
 800681e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006820:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006826:	f3ef 8310 	mrs	r3, PRIMASK
 800682a:	607b      	str	r3, [r7, #4]
  return(result);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <osKernelStart+0x32>
 8006832:	4b11      	ldr	r3, [pc, #68]	; (8006878 <osKernelStart+0x64>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d109      	bne.n	800684e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800683a:	f3ef 8311 	mrs	r3, BASEPRI
 800683e:	603b      	str	r3, [r7, #0]
  return(result);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006846:	f06f 0305 	mvn.w	r3, #5
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e00e      	b.n	800686c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <osKernelStart+0x64>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d107      	bne.n	8006866 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006856:	4b08      	ldr	r3, [pc, #32]	; (8006878 <osKernelStart+0x64>)
 8006858:	2202      	movs	r2, #2
 800685a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800685c:	f001 fe7c 	bl	8008558 <vTaskStartScheduler>
      stat = osOK;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e002      	b.n	800686c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006866:	f04f 33ff 	mov.w	r3, #4294967295
 800686a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800686c:	68fb      	ldr	r3, [r7, #12]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000248 	.word	0x20000248

0800687c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800687c:	b580      	push	{r7, lr}
 800687e:	b092      	sub	sp, #72	; 0x48
 8006880:	af04      	add	r7, sp, #16
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800688c:	f3ef 8305 	mrs	r3, IPSR
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006894:	2b00      	cmp	r3, #0
 8006896:	f040 8094 	bne.w	80069c2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800689a:	f3ef 8310 	mrs	r3, PRIMASK
 800689e:	623b      	str	r3, [r7, #32]
  return(result);
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 808d 	bne.w	80069c2 <osThreadNew+0x146>
 80068a8:	4b48      	ldr	r3, [pc, #288]	; (80069cc <osThreadNew+0x150>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d106      	bne.n	80068be <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068b0:	f3ef 8311 	mrs	r3, BASEPRI
 80068b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 8082 	bne.w	80069c2 <osThreadNew+0x146>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d07e      	beq.n	80069c2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80068c8:	2318      	movs	r3, #24
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80068cc:	2300      	movs	r3, #0
 80068ce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80068d0:	f107 031b 	add.w	r3, r7, #27
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d045      	beq.n	800696e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <osThreadNew+0x74>
        name = attr->name;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <osThreadNew+0x9a>
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	2b38      	cmp	r3, #56	; 0x38
 8006908:	d805      	bhi.n	8006916 <osThreadNew+0x9a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <osThreadNew+0x9e>
        return (NULL);
 8006916:	2300      	movs	r3, #0
 8006918:	e054      	b.n	80069c4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	089b      	lsrs	r3, r3, #2
 8006928:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00e      	beq.n	8006950 <osThreadNew+0xd4>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2ba7      	cmp	r3, #167	; 0xa7
 8006938:	d90a      	bls.n	8006950 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800693e:	2b00      	cmp	r3, #0
 8006940:	d006      	beq.n	8006950 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <osThreadNew+0xd4>
        mem = 1;
 800694a:	2301      	movs	r3, #1
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
 800694e:	e010      	b.n	8006972 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10c      	bne.n	8006972 <osThreadNew+0xf6>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d108      	bne.n	8006972 <osThreadNew+0xf6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <osThreadNew+0xf6>
          mem = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
 800696c:	e001      	b.n	8006972 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	2b01      	cmp	r3, #1
 8006976:	d110      	bne.n	800699a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006980:	9202      	str	r2, [sp, #8]
 8006982:	9301      	str	r3, [sp, #4]
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f001 fbfe 	bl	8008190 <xTaskCreateStatic>
 8006994:	4603      	mov	r3, r0
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	e013      	b.n	80069c2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	2b00      	cmp	r3, #0
 800699e:	d110      	bne.n	80069c2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f107 0314 	add.w	r3, r7, #20
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f001 fc48 	bl	8008248 <xTaskCreate>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d001      	beq.n	80069c2 <osThreadNew+0x146>
          hTask = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069c2:	697b      	ldr	r3, [r7, #20]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3738      	adds	r7, #56	; 0x38
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20000248 	.word	0x20000248

080069d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069d8:	f3ef 8305 	mrs	r3, IPSR
 80069dc:	613b      	str	r3, [r7, #16]
  return(result);
 80069de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10f      	bne.n	8006a04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e4:	f3ef 8310 	mrs	r3, PRIMASK
 80069e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <osDelay+0x34>
 80069f0:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <osDelay+0x58>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d109      	bne.n	8006a0c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069f8:	f3ef 8311 	mrs	r3, BASEPRI
 80069fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <osDelay+0x3c>
    stat = osErrorISR;
 8006a04:	f06f 0305 	mvn.w	r3, #5
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	e007      	b.n	8006a1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fd6a 	bl	80084f0 <vTaskDelay>
    }
  }

  return (stat);
 8006a1c:	697b      	ldr	r3, [r7, #20]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000248 	.word	0x20000248

08006a2c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08c      	sub	sp, #48	; 0x30
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a3c:	f3ef 8305 	mrs	r3, IPSR
 8006a40:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 8086 	bne.w	8006b56 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a4e:	617b      	str	r3, [r7, #20]
  return(result);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d17f      	bne.n	8006b56 <osSemaphoreNew+0x12a>
 8006a56:	4b42      	ldr	r3, [pc, #264]	; (8006b60 <osSemaphoreNew+0x134>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d105      	bne.n	8006a6a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a62:	613b      	str	r3, [r7, #16]
  return(result);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d175      	bne.n	8006b56 <osSemaphoreNew+0x12a>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d072      	beq.n	8006b56 <osSemaphoreNew+0x12a>
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d86e      	bhi.n	8006b56 <osSemaphoreNew+0x12a>
    mem = -1;
 8006a78:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d015      	beq.n	8006ab0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d006      	beq.n	8006a9a <osSemaphoreNew+0x6e>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b4f      	cmp	r3, #79	; 0x4f
 8006a92:	d902      	bls.n	8006a9a <osSemaphoreNew+0x6e>
        mem = 1;
 8006a94:	2301      	movs	r3, #1
 8006a96:	623b      	str	r3, [r7, #32]
 8006a98:	e00c      	b.n	8006ab4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d108      	bne.n	8006ab4 <osSemaphoreNew+0x88>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <osSemaphoreNew+0x88>
          mem = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	623b      	str	r3, [r7, #32]
 8006aae:	e001      	b.n	8006ab4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d04c      	beq.n	8006b56 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d128      	bne.n	8006b14 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10a      	bne.n	8006ade <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2203      	movs	r2, #3
 8006ace:	9200      	str	r2, [sp, #0]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	f000 fbb9 	bl	800724c <xQueueGenericCreateStatic>
 8006ada:	6278      	str	r0, [r7, #36]	; 0x24
 8006adc:	e005      	b.n	8006aea <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006ade:	2203      	movs	r2, #3
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	f000 fc29 	bl	800733a <xQueueGenericCreate>
 8006ae8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d022      	beq.n	8006b36 <osSemaphoreNew+0x10a>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d01f      	beq.n	8006b36 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006af6:	2300      	movs	r3, #0
 8006af8:	2200      	movs	r2, #0
 8006afa:	2100      	movs	r1, #0
 8006afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006afe:	f000 fce7 	bl	80074d0 <xQueueGenericSend>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d016      	beq.n	8006b36 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b0a:	f001 f971 	bl	8007df0 <vQueueDelete>
            hSemaphore = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
 8006b12:	e010      	b.n	8006b36 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d108      	bne.n	8006b2c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 fc6a 	bl	80073fc <xQueueCreateCountingSemaphoreStatic>
 8006b28:	6278      	str	r0, [r7, #36]	; 0x24
 8006b2a:	e004      	b.n	8006b36 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fc9b 	bl	800746a <xQueueCreateCountingSemaphore>
 8006b34:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00c      	beq.n	8006b56 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <osSemaphoreNew+0x11e>
          name = attr->name;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	e001      	b.n	8006b4e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006b4e:	69f9      	ldr	r1, [r7, #28]
 8006b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b52:	f001 fa97 	bl	8008084 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3728      	adds	r7, #40	; 0x28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20000248 	.word	0x20000248

08006b64 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006b7c:	f06f 0303 	mvn.w	r3, #3
 8006b80:	61fb      	str	r3, [r7, #28]
 8006b82:	e04b      	b.n	8006c1c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b84:	f3ef 8305 	mrs	r3, IPSR
 8006b88:	617b      	str	r3, [r7, #20]
  return(result);
 8006b8a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10f      	bne.n	8006bb0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b90:	f3ef 8310 	mrs	r3, PRIMASK
 8006b94:	613b      	str	r3, [r7, #16]
  return(result);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d109      	bne.n	8006bb0 <osSemaphoreAcquire+0x4c>
 8006b9c:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <osSemaphoreAcquire+0xc4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d128      	bne.n	8006bf6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ba4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d022      	beq.n	8006bf6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006bb6:	f06f 0303 	mvn.w	r3, #3
 8006bba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006bbc:	e02d      	b.n	8006c1a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	2100      	movs	r1, #0
 8006bca:	69b8      	ldr	r0, [r7, #24]
 8006bcc:	f001 f890 	bl	8007cf0 <xQueueReceiveFromISR>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d003      	beq.n	8006bde <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006bd6:	f06f 0302 	mvn.w	r3, #2
 8006bda:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006bdc:	e01d      	b.n	8006c1a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01a      	beq.n	8006c1a <osSemaphoreAcquire+0xb6>
 8006be4:	4b11      	ldr	r3, [pc, #68]	; (8006c2c <osSemaphoreAcquire+0xc8>)
 8006be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006bf4:	e011      	b.n	8006c1a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	69b8      	ldr	r0, [r7, #24]
 8006bfa:	f000 ff6d 	bl	8007ad8 <xQueueSemaphoreTake>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d00b      	beq.n	8006c1c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006c0a:	f06f 0301 	mvn.w	r3, #1
 8006c0e:	61fb      	str	r3, [r7, #28]
 8006c10:	e004      	b.n	8006c1c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006c12:	f06f 0302 	mvn.w	r3, #2
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	e000      	b.n	8006c1c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006c1a:	bf00      	nop
      }
    }
  }

  return (stat);
 8006c1c:	69fb      	ldr	r3, [r7, #28]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000248 	.word	0x20000248
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d103      	bne.n	8006c4e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006c46:	f06f 0303 	mvn.w	r3, #3
 8006c4a:	61fb      	str	r3, [r7, #28]
 8006c4c:	e03e      	b.n	8006ccc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c4e:	f3ef 8305 	mrs	r3, IPSR
 8006c52:	617b      	str	r3, [r7, #20]
  return(result);
 8006c54:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10f      	bne.n	8006c7a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <osSemaphoreRelease+0x4a>
 8006c66:	4b1c      	ldr	r3, [pc, #112]	; (8006cd8 <osSemaphoreRelease+0xa8>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d120      	bne.n	8006cb0 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c72:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01a      	beq.n	8006cb0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c7e:	f107 0308 	add.w	r3, r7, #8
 8006c82:	4619      	mov	r1, r3
 8006c84:	69b8      	ldr	r0, [r7, #24]
 8006c86:	f000 fdb9 	bl	80077fc <xQueueGiveFromISR>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d003      	beq.n	8006c98 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006c90:	f06f 0302 	mvn.w	r3, #2
 8006c94:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c96:	e018      	b.n	8006cca <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d015      	beq.n	8006cca <osSemaphoreRelease+0x9a>
 8006c9e:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <osSemaphoreRelease+0xac>)
 8006ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006cae:	e00c      	b.n	8006cca <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	69b8      	ldr	r0, [r7, #24]
 8006cb8:	f000 fc0a 	bl	80074d0 <xQueueGenericSend>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d004      	beq.n	8006ccc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006cc2:	f06f 0302 	mvn.w	r3, #2
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e000      	b.n	8006ccc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006cca:	bf00      	nop
    }
  }

  return (stat);
 8006ccc:	69fb      	ldr	r3, [r7, #28]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000248 	.word	0x20000248
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08c      	sub	sp, #48	; 0x30
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006cec:	2300      	movs	r3, #0
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cf0:	f3ef 8305 	mrs	r3, IPSR
 8006cf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006cf6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d16f      	bne.n	8006ddc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8006d00:	617b      	str	r3, [r7, #20]
  return(result);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d169      	bne.n	8006ddc <osMessageQueueNew+0xfc>
 8006d08:	4b37      	ldr	r3, [pc, #220]	; (8006de8 <osMessageQueueNew+0x108>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d105      	bne.n	8006d1c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d10:	f3ef 8311 	mrs	r3, BASEPRI
 8006d14:	613b      	str	r3, [r7, #16]
  return(result);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d15f      	bne.n	8006ddc <osMessageQueueNew+0xfc>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d05c      	beq.n	8006ddc <osMessageQueueNew+0xfc>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d059      	beq.n	8006ddc <osMessageQueueNew+0xfc>
    mem = -1;
 8006d28:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d029      	beq.n	8006d88 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d012      	beq.n	8006d62 <osMessageQueueNew+0x82>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b4f      	cmp	r3, #79	; 0x4f
 8006d42:	d90e      	bls.n	8006d62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00a      	beq.n	8006d62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	695a      	ldr	r2, [r3, #20]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68b9      	ldr	r1, [r7, #8]
 8006d54:	fb01 f303 	mul.w	r3, r1, r3
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d302      	bcc.n	8006d62 <osMessageQueueNew+0x82>
        mem = 1;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	623b      	str	r3, [r7, #32]
 8006d60:	e014      	b.n	8006d8c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d110      	bne.n	8006d8c <osMessageQueueNew+0xac>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10c      	bne.n	8006d8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d108      	bne.n	8006d8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d104      	bne.n	8006d8c <osMessageQueueNew+0xac>
          mem = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	623b      	str	r3, [r7, #32]
 8006d86:	e001      	b.n	8006d8c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d10b      	bne.n	8006daa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691a      	ldr	r2, [r3, #16]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	9100      	str	r1, [sp, #0]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fa53 	bl	800724c <xQueueGenericCreateStatic>
 8006da6:	6278      	str	r0, [r7, #36]	; 0x24
 8006da8:	e008      	b.n	8006dbc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d105      	bne.n	8006dbc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006db0:	2200      	movs	r2, #0
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 fac0 	bl	800733a <xQueueGenericCreate>
 8006dba:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	61fb      	str	r3, [r7, #28]
 8006dce:	e001      	b.n	8006dd4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006dd4:	69f9      	ldr	r1, [r7, #28]
 8006dd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dd8:	f001 f954 	bl	8008084 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3728      	adds	r7, #40	; 0x28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000248 	.word	0x20000248

08006dec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08a      	sub	sp, #40	; 0x28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e04:	f3ef 8305 	mrs	r3, IPSR
 8006e08:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e0a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e10:	f3ef 8310 	mrs	r3, PRIMASK
 8006e14:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d109      	bne.n	8006e30 <osMessageQueuePut+0x44>
 8006e1c:	4b2b      	ldr	r3, [pc, #172]	; (8006ecc <osMessageQueuePut+0xe0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d12e      	bne.n	8006e82 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e24:	f3ef 8311 	mrs	r3, BASEPRI
 8006e28:	617b      	str	r3, [r7, #20]
  return(result);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d028      	beq.n	8006e82 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <osMessageQueuePut+0x56>
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <osMessageQueuePut+0x56>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006e42:	f06f 0303 	mvn.w	r3, #3
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e48:	e039      	b.n	8006ebe <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006e4e:	f107 0210 	add.w	r2, r7, #16
 8006e52:	2300      	movs	r3, #0
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	6a38      	ldr	r0, [r7, #32]
 8006e58:	f000 fc38 	bl	80076cc <xQueueGenericSendFromISR>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d003      	beq.n	8006e6a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006e62:	f06f 0302 	mvn.w	r3, #2
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e68:	e029      	b.n	8006ebe <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d026      	beq.n	8006ebe <osMessageQueuePut+0xd2>
 8006e70:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <osMessageQueuePut+0xe4>)
 8006e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e80:	e01d      	b.n	8006ebe <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <osMessageQueuePut+0xa2>
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d103      	bne.n	8006e96 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006e8e:	f06f 0303 	mvn.w	r3, #3
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
 8006e94:	e014      	b.n	8006ec0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e96:	2300      	movs	r3, #0
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	6a38      	ldr	r0, [r7, #32]
 8006e9e:	f000 fb17 	bl	80074d0 <xQueueGenericSend>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d00b      	beq.n	8006ec0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006eae:	f06f 0301 	mvn.w	r3, #1
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb4:	e004      	b.n	8006ec0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006eb6:	f06f 0302 	mvn.w	r3, #2
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebc:	e000      	b.n	8006ec0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ebe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3728      	adds	r7, #40	; 0x28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000248 	.word	0x20000248
 8006ed0:	e000ed04 	.word	0xe000ed04

08006ed4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08a      	sub	sp, #40	; 0x28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eea:	f3ef 8305 	mrs	r3, IPSR
 8006eee:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ef0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10f      	bne.n	8006f16 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8006efa:	61bb      	str	r3, [r7, #24]
  return(result);
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d109      	bne.n	8006f16 <osMessageQueueGet+0x42>
 8006f02:	4b2b      	ldr	r3, [pc, #172]	; (8006fb0 <osMessageQueueGet+0xdc>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d12e      	bne.n	8006f68 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f0e:	617b      	str	r3, [r7, #20]
  return(result);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d028      	beq.n	8006f68 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <osMessageQueueGet+0x54>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <osMessageQueueGet+0x54>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006f28:	f06f 0303 	mvn.w	r3, #3
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f2e:	e038      	b.n	8006fa2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006f34:	f107 0310 	add.w	r3, r7, #16
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	6a38      	ldr	r0, [r7, #32]
 8006f3e:	f000 fed7 	bl	8007cf0 <xQueueReceiveFromISR>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d003      	beq.n	8006f50 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006f48:	f06f 0302 	mvn.w	r3, #2
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f4e:	e028      	b.n	8006fa2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d025      	beq.n	8006fa2 <osMessageQueueGet+0xce>
 8006f56:	4b17      	ldr	r3, [pc, #92]	; (8006fb4 <osMessageQueueGet+0xe0>)
 8006f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f66:	e01c      	b.n	8006fa2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <osMessageQueueGet+0xa0>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d103      	bne.n	8006f7c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006f74:	f06f 0303 	mvn.w	r3, #3
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7a:	e013      	b.n	8006fa4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	6a38      	ldr	r0, [r7, #32]
 8006f82:	f000 fcc9 	bl	8007918 <xQueueReceive>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d00b      	beq.n	8006fa4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006f92:	f06f 0301 	mvn.w	r3, #1
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
 8006f98:	e004      	b.n	8006fa4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006f9a:	f06f 0302 	mvn.w	r3, #2
 8006f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa0:	e000      	b.n	8006fa4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fa2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3728      	adds	r7, #40	; 0x28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000248 	.word	0x20000248
 8006fb4:	e000ed04 	.word	0xe000ed04

08006fb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4a06      	ldr	r2, [pc, #24]	; (8006fe0 <vApplicationGetIdleTaskMemory+0x28>)
 8006fc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4a05      	ldr	r2, [pc, #20]	; (8006fe4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006fce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2280      	movs	r2, #128	; 0x80
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bc80      	pop	{r7}
 8006fde:	4770      	bx	lr
 8006fe0:	2000024c 	.word	0x2000024c
 8006fe4:	200002f4 	.word	0x200002f4

08006fe8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4a07      	ldr	r2, [pc, #28]	; (8007014 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ff8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	4a06      	ldr	r2, [pc, #24]	; (8007018 <vApplicationGetTimerTaskMemory+0x30>)
 8006ffe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007006:	601a      	str	r2, [r3, #0]
}
 8007008:	bf00      	nop
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	200004f4 	.word	0x200004f4
 8007018:	2000059c 	.word	0x2000059c

0800701c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f103 0208 	add.w	r2, r3, #8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f04f 32ff 	mov.w	r2, #4294967295
 8007034:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f103 0208 	add.w	r2, r3, #8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f103 0208 	add.w	r2, r3, #8
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	bc80      	pop	{r7}
 8007058:	4770      	bx	lr

0800705a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	bc80      	pop	{r7}
 8007070:	4770      	bx	lr

08007072 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	601a      	str	r2, [r3, #0]
}
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr

080070b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d103      	bne.n	80070d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e00c      	b.n	80070f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3308      	adds	r3, #8
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	e002      	b.n	80070e6 <vListInsert+0x2e>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d2f6      	bcs.n	80070e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]
}
 800711e:	bf00      	nop
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr

08007128 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6892      	ldr	r2, [r2, #8]
 800713e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6852      	ldr	r2, [r2, #4]
 8007148:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d103      	bne.n	800715c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	1e5a      	subs	r2, r3, #1
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	4770      	bx	lr
	...

0800717c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071a2:	bf00      	nop
 80071a4:	e7fe      	b.n	80071a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071a6:	f002 fc21 	bl	80099ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	68f9      	ldr	r1, [r7, #12]
 80071b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071b6:	fb01 f303 	mul.w	r3, r1, r3
 80071ba:	441a      	add	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d6:	3b01      	subs	r3, #1
 80071d8:	68f9      	ldr	r1, [r7, #12]
 80071da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	441a      	add	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	22ff      	movs	r2, #255	; 0xff
 80071ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	22ff      	movs	r2, #255	; 0xff
 80071f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d114      	bne.n	8007226 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01a      	beq.n	800723a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3310      	adds	r3, #16
 8007208:	4618      	mov	r0, r3
 800720a:	f001 fc41 	bl	8008a90 <xTaskRemoveFromEventList>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d012      	beq.n	800723a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007214:	4b0c      	ldr	r3, [pc, #48]	; (8007248 <xQueueGenericReset+0xcc>)
 8007216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	e009      	b.n	800723a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3310      	adds	r3, #16
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fef6 	bl	800701c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3324      	adds	r3, #36	; 0x24
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff fef1 	bl	800701c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800723a:	f002 fc07 	bl	8009a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800723e:	2301      	movs	r3, #1
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08e      	sub	sp, #56	; 0x38
 8007250:	af02      	add	r7, sp, #8
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <xQueueGenericCreateStatic+0x52>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <xQueueGenericCreateStatic+0x56>
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <xQueueGenericCreateStatic+0x58>
 80072a2:	2300      	movs	r3, #0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	623b      	str	r3, [r7, #32]
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d102      	bne.n	80072ca <xQueueGenericCreateStatic+0x7e>
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <xQueueGenericCreateStatic+0x82>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <xQueueGenericCreateStatic+0x84>
 80072ce:	2300      	movs	r3, #0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	61fb      	str	r3, [r7, #28]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072ea:	2350      	movs	r3, #80	; 0x50
 80072ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b50      	cmp	r3, #80	; 0x50
 80072f2:	d00a      	beq.n	800730a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	61bb      	str	r3, [r7, #24]
}
 8007306:	bf00      	nop
 8007308:	e7fe      	b.n	8007308 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00d      	beq.n	8007330 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800731c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f843 	bl	80073b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007332:	4618      	mov	r0, r3
 8007334:	3730      	adds	r7, #48	; 0x30
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800733a:	b580      	push	{r7, lr}
 800733c:	b08a      	sub	sp, #40	; 0x28
 800733e:	af02      	add	r7, sp, #8
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	4613      	mov	r3, r2
 8007346:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <xQueueGenericCreate+0x2a>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	613b      	str	r3, [r7, #16]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d102      	bne.n	8007370 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800736a:	2300      	movs	r3, #0
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	e004      	b.n	800737a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	fb02 f303 	mul.w	r3, r2, r3
 8007378:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	3350      	adds	r3, #80	; 0x50
 800737e:	4618      	mov	r0, r3
 8007380:	f002 fc34 	bl	8009bec <pvPortMalloc>
 8007384:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00f      	beq.n	80073ac <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	3350      	adds	r3, #80	; 0x50
 8007390:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800739a:	79fa      	ldrb	r2, [r7, #7]
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f805 	bl	80073b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80073ac:	69bb      	ldr	r3, [r7, #24]
	}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3720      	adds	r7, #32
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
 80073c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	e002      	b.n	80073d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073e4:	2101      	movs	r1, #1
 80073e6:	69b8      	ldr	r0, [r7, #24]
 80073e8:	f7ff fec8 	bl	800717c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af02      	add	r7, sp, #8
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	61bb      	str	r3, [r7, #24]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	429a      	cmp	r2, r3
 800742a:	d90a      	bls.n	8007442 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	617b      	str	r3, [r7, #20]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007442:	2302      	movs	r3, #2
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	2100      	movs	r1, #0
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f7ff fefd 	bl	800724c <xQueueGenericCreateStatic>
 8007452:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007460:	69fb      	ldr	r3, [r7, #28]
	}
 8007462:	4618      	mov	r0, r3
 8007464:	3720      	adds	r7, #32
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10a      	bne.n	8007490 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	613b      	str	r3, [r7, #16]
}
 800748c:	bf00      	nop
 800748e:	e7fe      	b.n	800748e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	429a      	cmp	r2, r3
 8007496:	d90a      	bls.n	80074ae <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	60fb      	str	r3, [r7, #12]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80074ae:	2202      	movs	r2, #2
 80074b0:	2100      	movs	r1, #0
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff ff41 	bl	800733a <xQueueGenericCreate>
 80074b8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80074c6:	697b      	ldr	r3, [r7, #20]
	}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08e      	sub	sp, #56	; 0x38
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074de:	2300      	movs	r3, #0
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <xQueueGenericSend+0x32>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d103      	bne.n	8007510 <xQueueGenericSend+0x40>
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <xQueueGenericSend+0x44>
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <xQueueGenericSend+0x46>
 8007514:	2300      	movs	r3, #0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10a      	bne.n	8007530 <xQueueGenericSend+0x60>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d103      	bne.n	800753e <xQueueGenericSend+0x6e>
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753a:	2b01      	cmp	r3, #1
 800753c:	d101      	bne.n	8007542 <xQueueGenericSend+0x72>
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <xQueueGenericSend+0x74>
 8007542:	2300      	movs	r3, #0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10a      	bne.n	800755e <xQueueGenericSend+0x8e>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	623b      	str	r3, [r7, #32]
}
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800755e:	f001 fc5d 	bl	8008e1c <xTaskGetSchedulerState>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d102      	bne.n	800756e <xQueueGenericSend+0x9e>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <xQueueGenericSend+0xa2>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <xQueueGenericSend+0xa4>
 8007572:	2300      	movs	r3, #0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <xQueueGenericSend+0xbe>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	61fb      	str	r3, [r7, #28]
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800758e:	f002 fa2d 	bl	80099ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	429a      	cmp	r2, r3
 800759c:	d302      	bcc.n	80075a4 <xQueueGenericSend+0xd4>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d129      	bne.n	80075f8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	68b9      	ldr	r1, [r7, #8]
 80075a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075aa:	f000 fc5b 	bl	8007e64 <prvCopyDataToQueue>
 80075ae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d010      	beq.n	80075da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	3324      	adds	r3, #36	; 0x24
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 fa67 	bl	8008a90 <xTaskRemoveFromEventList>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d013      	beq.n	80075f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075c8:	4b3f      	ldr	r3, [pc, #252]	; (80076c8 <xQueueGenericSend+0x1f8>)
 80075ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	e00a      	b.n	80075f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075e0:	4b39      	ldr	r3, [pc, #228]	; (80076c8 <xQueueGenericSend+0x1f8>)
 80075e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075f0:	f002 fa2c 	bl	8009a4c <vPortExitCritical>
				return pdPASS;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e063      	b.n	80076c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075fe:	f002 fa25 	bl	8009a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007602:	2300      	movs	r3, #0
 8007604:	e05c      	b.n	80076c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007608:	2b00      	cmp	r3, #0
 800760a:	d106      	bne.n	800761a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800760c:	f107 0314 	add.w	r3, r7, #20
 8007610:	4618      	mov	r0, r3
 8007612:	f001 faa1 	bl	8008b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007616:	2301      	movs	r3, #1
 8007618:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800761a:	f002 fa17 	bl	8009a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800761e:	f001 f80b 	bl	8008638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007622:	f002 f9e3 	bl	80099ec <vPortEnterCritical>
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800762c:	b25b      	sxtb	r3, r3
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007632:	d103      	bne.n	800763c <xQueueGenericSend+0x16c>
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007642:	b25b      	sxtb	r3, r3
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007648:	d103      	bne.n	8007652 <xQueueGenericSend+0x182>
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007652:	f002 f9fb 	bl	8009a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007656:	1d3a      	adds	r2, r7, #4
 8007658:	f107 0314 	add.w	r3, r7, #20
 800765c:	4611      	mov	r1, r2
 800765e:	4618      	mov	r0, r3
 8007660:	f001 fa90 	bl	8008b84 <xTaskCheckForTimeOut>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d124      	bne.n	80076b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800766a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800766c:	f000 fcf2 	bl	8008054 <prvIsQueueFull>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d018      	beq.n	80076a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	3310      	adds	r3, #16
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4611      	mov	r1, r2
 800767e:	4618      	mov	r0, r3
 8007680:	f001 f9b6 	bl	80089f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007686:	f000 fc7d 	bl	8007f84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800768a:	f000 ffe3 	bl	8008654 <xTaskResumeAll>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	f47f af7c 	bne.w	800758e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007696:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <xQueueGenericSend+0x1f8>)
 8007698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	e772      	b.n	800758e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076aa:	f000 fc6b 	bl	8007f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076ae:	f000 ffd1 	bl	8008654 <xTaskResumeAll>
 80076b2:	e76c      	b.n	800758e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076b6:	f000 fc65 	bl	8007f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ba:	f000 ffcb 	bl	8008654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076be:	2300      	movs	r3, #0
		}
	}
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3738      	adds	r7, #56	; 0x38
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08e      	sub	sp, #56	; 0x38
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10a      	bne.n	80076fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <xQueueGenericSendFromISR+0x3c>
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <xQueueGenericSendFromISR+0x40>
 8007708:	2301      	movs	r3, #1
 800770a:	e000      	b.n	800770e <xQueueGenericSendFromISR+0x42>
 800770c:	2300      	movs	r3, #0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	623b      	str	r3, [r7, #32]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d103      	bne.n	8007736 <xQueueGenericSendFromISR+0x6a>
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007732:	2b01      	cmp	r3, #1
 8007734:	d101      	bne.n	800773a <xQueueGenericSendFromISR+0x6e>
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <xQueueGenericSendFromISR+0x70>
 800773a:	2300      	movs	r3, #0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	61fb      	str	r3, [r7, #28]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007756:	f002 fa0b 	bl	8009b70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800775a:	f3ef 8211 	mrs	r2, BASEPRI
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	61ba      	str	r2, [r7, #24]
 8007770:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007772:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777e:	429a      	cmp	r2, r3
 8007780:	d302      	bcc.n	8007788 <xQueueGenericSendFromISR+0xbc>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d12c      	bne.n	80077e2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800778e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007798:	f000 fb64 	bl	8007e64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800779c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80077a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a4:	d112      	bne.n	80077cc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d016      	beq.n	80077dc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	3324      	adds	r3, #36	; 0x24
 80077b2:	4618      	mov	r0, r3
 80077b4:	f001 f96c 	bl	8008a90 <xTaskRemoveFromEventList>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00e      	beq.n	80077dc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	e007      	b.n	80077dc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077d0:	3301      	adds	r3, #1
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	b25a      	sxtb	r2, r3
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077dc:	2301      	movs	r3, #1
 80077de:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80077e0:	e001      	b.n	80077e6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	637b      	str	r3, [r7, #52]	; 0x34
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3738      	adds	r7, #56	; 0x38
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08e      	sub	sp, #56	; 0x38
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	623b      	str	r3, [r7, #32]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <xQueueGiveFromISR+0x48>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	61fb      	str	r3, [r7, #28]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <xQueueGiveFromISR+0x58>
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <xQueueGiveFromISR+0x5c>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <xQueueGiveFromISR+0x5e>
 8007858:	2300      	movs	r3, #0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <xQueueGiveFromISR+0x78>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	61bb      	str	r3, [r7, #24]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007874:	f002 f97c 	bl	8009b70 <vPortValidateInterruptPriority>
	__asm volatile
 8007878:	f3ef 8211 	mrs	r2, BASEPRI
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	617a      	str	r2, [r7, #20]
 800788e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007890:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d22b      	bcs.n	80078fc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078be:	d112      	bne.n	80078e6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d016      	beq.n	80078f6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 f8df 	bl	8008a90 <xTaskRemoveFromEventList>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00e      	beq.n	80078f6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2201      	movs	r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	e007      	b.n	80078f6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078ea:	3301      	adds	r3, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	b25a      	sxtb	r2, r3
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80078f6:	2301      	movs	r3, #1
 80078f8:	637b      	str	r3, [r7, #52]	; 0x34
 80078fa:	e001      	b.n	8007900 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f383 8811 	msr	BASEPRI, r3
}
 800790a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800790e:	4618      	mov	r0, r3
 8007910:	3738      	adds	r7, #56	; 0x38
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08c      	sub	sp, #48	; 0x30
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007924:	2300      	movs	r3, #0
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <xQueueReceive+0x30>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	623b      	str	r3, [r7, #32]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d103      	bne.n	8007956 <xQueueReceive+0x3e>
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <xQueueReceive+0x42>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <xQueueReceive+0x44>
 800795a:	2300      	movs	r3, #0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xQueueReceive+0x5e>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	61fb      	str	r3, [r7, #28]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007976:	f001 fa51 	bl	8008e1c <xTaskGetSchedulerState>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <xQueueReceive+0x6e>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <xQueueReceive+0x72>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <xQueueReceive+0x74>
 800798a:	2300      	movs	r3, #0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10a      	bne.n	80079a6 <xQueueReceive+0x8e>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	61bb      	str	r3, [r7, #24]
}
 80079a2:	bf00      	nop
 80079a4:	e7fe      	b.n	80079a4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80079a6:	f002 f821 	bl	80099ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d01f      	beq.n	80079f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ba:	f000 fabd 	bl	8007f38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	1e5a      	subs	r2, r3, #1
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00f      	beq.n	80079ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	3310      	adds	r3, #16
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 f85c 	bl	8008a90 <xTaskRemoveFromEventList>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079de:	4b3d      	ldr	r3, [pc, #244]	; (8007ad4 <xQueueReceive+0x1bc>)
 80079e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079ee:	f002 f82d 	bl	8009a4c <vPortExitCritical>
				return pdPASS;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e069      	b.n	8007aca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d103      	bne.n	8007a04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079fc:	f002 f826 	bl	8009a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e062      	b.n	8007aca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a0a:	f107 0310 	add.w	r3, r7, #16
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f001 f8a2 	bl	8008b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a18:	f002 f818 	bl	8009a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a1c:	f000 fe0c 	bl	8008638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a20:	f001 ffe4 	bl	80099ec <vPortEnterCritical>
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d103      	bne.n	8007a3a <xQueueReceive+0x122>
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a40:	b25b      	sxtb	r3, r3
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d103      	bne.n	8007a50 <xQueueReceive+0x138>
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a50:	f001 fffc 	bl	8009a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a54:	1d3a      	adds	r2, r7, #4
 8007a56:	f107 0310 	add.w	r3, r7, #16
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f001 f891 	bl	8008b84 <xTaskCheckForTimeOut>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d123      	bne.n	8007ab0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a6a:	f000 fadd 	bl	8008028 <prvIsQueueEmpty>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d017      	beq.n	8007aa4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a76:	3324      	adds	r3, #36	; 0x24
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 ffb7 	bl	80089f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a84:	f000 fa7e 	bl	8007f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a88:	f000 fde4 	bl	8008654 <xTaskResumeAll>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d189      	bne.n	80079a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007a92:	4b10      	ldr	r3, [pc, #64]	; (8007ad4 <xQueueReceive+0x1bc>)
 8007a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	e780      	b.n	80079a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aa6:	f000 fa6d 	bl	8007f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007aaa:	f000 fdd3 	bl	8008654 <xTaskResumeAll>
 8007aae:	e77a      	b.n	80079a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ab2:	f000 fa67 	bl	8007f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ab6:	f000 fdcd 	bl	8008654 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007abc:	f000 fab4 	bl	8008028 <prvIsQueueEmpty>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f43f af6f 	beq.w	80079a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ac8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3730      	adds	r7, #48	; 0x30
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08e      	sub	sp, #56	; 0x38
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	623b      	str	r3, [r7, #32]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	61fb      	str	r3, [r7, #28]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b28:	f001 f978 	bl	8008e1c <xTaskGetSchedulerState>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <xQueueSemaphoreTake+0x60>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <xQueueSemaphoreTake+0x64>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <xQueueSemaphoreTake+0x66>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	61bb      	str	r3, [r7, #24]
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b58:	f001 ff48 	bl	80099ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d024      	beq.n	8007bb2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	1e5a      	subs	r2, r3, #1
 8007b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007b78:	f001 fad0 	bl	800911c <pvTaskIncrementMutexHeldCount>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00f      	beq.n	8007baa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	3310      	adds	r3, #16
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 ff7e 	bl	8008a90 <xTaskRemoveFromEventList>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b9a:	4b54      	ldr	r3, [pc, #336]	; (8007cec <xQueueSemaphoreTake+0x214>)
 8007b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007baa:	f001 ff4f 	bl	8009a4c <vPortExitCritical>
				return pdPASS;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e097      	b.n	8007ce2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d111      	bne.n	8007bdc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	617b      	str	r3, [r7, #20]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007bd4:	f001 ff3a 	bl	8009a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e082      	b.n	8007ce2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007be2:	f107 030c 	add.w	r3, r7, #12
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 ffb6 	bl	8008b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bec:	2301      	movs	r3, #1
 8007bee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bf0:	f001 ff2c 	bl	8009a4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bf4:	f000 fd20 	bl	8008638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bf8:	f001 fef8 	bl	80099ec <vPortEnterCritical>
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c02:	b25b      	sxtb	r3, r3
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d103      	bne.n	8007c12 <xQueueSemaphoreTake+0x13a>
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c18:	b25b      	sxtb	r3, r3
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1e:	d103      	bne.n	8007c28 <xQueueSemaphoreTake+0x150>
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c28:	f001 ff10 	bl	8009a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c2c:	463a      	mov	r2, r7
 8007c2e:	f107 030c 	add.w	r3, r7, #12
 8007c32:	4611      	mov	r1, r2
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 ffa5 	bl	8008b84 <xTaskCheckForTimeOut>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d132      	bne.n	8007ca6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c42:	f000 f9f1 	bl	8008028 <prvIsQueueEmpty>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d026      	beq.n	8007c9a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007c54:	f001 feca 	bl	80099ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f001 f8fb 	bl	8008e58 <xTaskPriorityInherit>
 8007c62:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007c64:	f001 fef2 	bl	8009a4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	3324      	adds	r3, #36	; 0x24
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	4611      	mov	r1, r2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 febd 	bl	80089f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c78:	f000 f984 	bl	8007f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c7c:	f000 fcea 	bl	8008654 <xTaskResumeAll>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f47f af68 	bne.w	8007b58 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007c88:	4b18      	ldr	r3, [pc, #96]	; (8007cec <xQueueSemaphoreTake+0x214>)
 8007c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	e75e      	b.n	8007b58 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c9c:	f000 f972 	bl	8007f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ca0:	f000 fcd8 	bl	8008654 <xTaskResumeAll>
 8007ca4:	e758      	b.n	8007b58 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ca8:	f000 f96c 	bl	8007f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cac:	f000 fcd2 	bl	8008654 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cb2:	f000 f9b9 	bl	8008028 <prvIsQueueEmpty>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f43f af4d 	beq.w	8007b58 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00d      	beq.n	8007ce0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007cc4:	f001 fe92 	bl	80099ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cca:	f000 f8b4 	bl	8007e36 <prvGetDisinheritPriorityAfterTimeout>
 8007cce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 f99a 	bl	8009010 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007cdc:	f001 feb6 	bl	8009a4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ce0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3738      	adds	r7, #56	; 0x38
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	e000ed04 	.word	0xe000ed04

08007cf0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08e      	sub	sp, #56	; 0x38
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	623b      	str	r3, [r7, #32]
}
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d103      	bne.n	8007d2a <xQueueReceiveFromISR+0x3a>
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <xQueueReceiveFromISR+0x3e>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e000      	b.n	8007d30 <xQueueReceiveFromISR+0x40>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	61fb      	str	r3, [r7, #28]
}
 8007d46:	bf00      	nop
 8007d48:	e7fe      	b.n	8007d48 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d4a:	f001 ff11 	bl	8009b70 <vPortValidateInterruptPriority>
	__asm volatile
 8007d4e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	61ba      	str	r2, [r7, #24]
 8007d64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d02f      	beq.n	8007dd6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d84:	f000 f8d8 	bl	8007f38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	1e5a      	subs	r2, r3, #1
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007d90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d98:	d112      	bne.n	8007dc0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d016      	beq.n	8007dd0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	3310      	adds	r3, #16
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fe72 	bl	8008a90 <xTaskRemoveFromEventList>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00e      	beq.n	8007dd0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	e007      	b.n	8007dd0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	b25a      	sxtb	r2, r3
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd4:	e001      	b.n	8007dda <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f383 8811 	msr	BASEPRI, r3
}
 8007de4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3738      	adds	r7, #56	; 0x38
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <vQueueDelete+0x28>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	60bb      	str	r3, [r7, #8]
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f95b 	bl	80080d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d102      	bne.n	8007e2e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f001 ffa3 	bl	8009d74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007e36:	b480      	push	{r7}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d006      	beq.n	8007e54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	e001      	b.n	8007e58 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007e58:	68fb      	ldr	r3, [r7, #12]
	}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr

08007e64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10d      	bne.n	8007e9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d14d      	bne.n	8007f26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 f850 	bl	8008f34 <xTaskPriorityDisinherit>
 8007e94:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	605a      	str	r2, [r3, #4]
 8007e9c:	e043      	b.n	8007f26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d119      	bne.n	8007ed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6898      	ldr	r0, [r3, #8]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eac:	461a      	mov	r2, r3
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	f002 f8fe 	bl	800a0b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebc:	441a      	add	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d32b      	bcc.n	8007f26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	609a      	str	r2, [r3, #8]
 8007ed6:	e026      	b.n	8007f26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68d8      	ldr	r0, [r3, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	f002 f8e4 	bl	800a0b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	425b      	negs	r3, r3
 8007ef2:	441a      	add	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d207      	bcs.n	8007f14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0c:	425b      	negs	r3, r3
 8007f0e:	441a      	add	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d105      	bne.n	8007f26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f2e:	697b      	ldr	r3, [r7, #20]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d018      	beq.n	8007f7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	441a      	add	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d303      	bcc.n	8007f6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68d9      	ldr	r1, [r3, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f74:	461a      	mov	r2, r3
 8007f76:	6838      	ldr	r0, [r7, #0]
 8007f78:	f002 f89a 	bl	800a0b0 <memcpy>
	}
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f8c:	f001 fd2e 	bl	80099ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f98:	e011      	b.n	8007fbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d012      	beq.n	8007fc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3324      	adds	r3, #36	; 0x24
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fd72 	bl	8008a90 <xTaskRemoveFromEventList>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fb2:	f000 fe49 	bl	8008c48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	dce9      	bgt.n	8007f9a <prvUnlockQueue+0x16>
 8007fc6:	e000      	b.n	8007fca <prvUnlockQueue+0x46>
					break;
 8007fc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	22ff      	movs	r2, #255	; 0xff
 8007fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007fd2:	f001 fd3b 	bl	8009a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007fd6:	f001 fd09 	bl	80099ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fe2:	e011      	b.n	8008008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d012      	beq.n	8008012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3310      	adds	r3, #16
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 fd4d 	bl	8008a90 <xTaskRemoveFromEventList>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ffc:	f000 fe24 	bl	8008c48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	3b01      	subs	r3, #1
 8008004:	b2db      	uxtb	r3, r3
 8008006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800800c:	2b00      	cmp	r3, #0
 800800e:	dce9      	bgt.n	8007fe4 <prvUnlockQueue+0x60>
 8008010:	e000      	b.n	8008014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	22ff      	movs	r2, #255	; 0xff
 8008018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800801c:	f001 fd16 	bl	8009a4c <vPortExitCritical>
}
 8008020:	bf00      	nop
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008030:	f001 fcdc 	bl	80099ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	2b00      	cmp	r3, #0
 800803a:	d102      	bne.n	8008042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e001      	b.n	8008046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008046:	f001 fd01 	bl	8009a4c <vPortExitCritical>

	return xReturn;
 800804a:	68fb      	ldr	r3, [r7, #12]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800805c:	f001 fcc6 	bl	80099ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008068:	429a      	cmp	r2, r3
 800806a:	d102      	bne.n	8008072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800806c:	2301      	movs	r3, #1
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	e001      	b.n	8008076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008076:	f001 fce9 	bl	8009a4c <vPortExitCritical>

	return xReturn;
 800807a:	68fb      	ldr	r3, [r7, #12]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	e014      	b.n	80080be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008094:	4a0e      	ldr	r2, [pc, #56]	; (80080d0 <vQueueAddToRegistry+0x4c>)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10b      	bne.n	80080b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080a0:	490b      	ldr	r1, [pc, #44]	; (80080d0 <vQueueAddToRegistry+0x4c>)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080aa:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <vQueueAddToRegistry+0x4c>)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	00db      	lsls	r3, r3, #3
 80080b0:	4413      	add	r3, r2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080b6:	e006      	b.n	80080c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b07      	cmp	r3, #7
 80080c2:	d9e7      	bls.n	8008094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bc80      	pop	{r7}
 80080ce:	4770      	bx	lr
 80080d0:	2000099c 	.word	0x2000099c

080080d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	e016      	b.n	8008110 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80080e2:	4a10      	ldr	r2, [pc, #64]	; (8008124 <vQueueUnregisterQueue+0x50>)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	4413      	add	r3, r2
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d10b      	bne.n	800810a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80080f2:	4a0c      	ldr	r2, [pc, #48]	; (8008124 <vQueueUnregisterQueue+0x50>)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2100      	movs	r1, #0
 80080f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80080fc:	4a09      	ldr	r2, [pc, #36]	; (8008124 <vQueueUnregisterQueue+0x50>)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	4413      	add	r3, r2
 8008104:	2200      	movs	r2, #0
 8008106:	605a      	str	r2, [r3, #4]
				break;
 8008108:	e006      	b.n	8008118 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3301      	adds	r3, #1
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b07      	cmp	r3, #7
 8008114:	d9e5      	bls.n	80080e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	bc80      	pop	{r7}
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	2000099c 	.word	0x2000099c

08008128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008138:	f001 fc58 	bl	80099ec <vPortEnterCritical>
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008142:	b25b      	sxtb	r3, r3
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008148:	d103      	bne.n	8008152 <vQueueWaitForMessageRestricted+0x2a>
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008158:	b25b      	sxtb	r3, r3
 800815a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815e:	d103      	bne.n	8008168 <vQueueWaitForMessageRestricted+0x40>
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008168:	f001 fc70 	bl	8009a4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	2b00      	cmp	r3, #0
 8008172:	d106      	bne.n	8008182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	3324      	adds	r3, #36	; 0x24
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fc5b 	bl	8008a38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008182:	6978      	ldr	r0, [r7, #20]
 8008184:	f7ff fefe 	bl	8007f84 <prvUnlockQueue>
	}
 8008188:	bf00      	nop
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08e      	sub	sp, #56	; 0x38
 8008194:	af04      	add	r7, sp, #16
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800819e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	623b      	str	r3, [r7, #32]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	61fb      	str	r3, [r7, #28]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081d6:	23a8      	movs	r3, #168	; 0xa8
 80081d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2ba8      	cmp	r3, #168	; 0xa8
 80081de:	d00a      	beq.n	80081f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	61bb      	str	r3, [r7, #24]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01e      	beq.n	800823a <xTaskCreateStatic+0xaa>
 80081fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d01b      	beq.n	800823a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800820a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	2202      	movs	r2, #2
 8008210:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008214:	2300      	movs	r3, #0
 8008216:	9303      	str	r3, [sp, #12]
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	9302      	str	r3, [sp, #8]
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	68b9      	ldr	r1, [r7, #8]
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 f851 	bl	80082d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008234:	f000 f8ec 	bl	8008410 <prvAddNewTaskToReadyList>
 8008238:	e001      	b.n	800823e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800823e:	697b      	ldr	r3, [r7, #20]
	}
 8008240:	4618      	mov	r0, r3
 8008242:	3728      	adds	r7, #40	; 0x28
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08c      	sub	sp, #48	; 0x30
 800824c:	af04      	add	r7, sp, #16
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	4613      	mov	r3, r2
 8008256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4618      	mov	r0, r3
 800825e:	f001 fcc5 	bl	8009bec <pvPortMalloc>
 8008262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00e      	beq.n	8008288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800826a:	20a8      	movs	r0, #168	; 0xa8
 800826c:	f001 fcbe 	bl	8009bec <pvPortMalloc>
 8008270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	631a      	str	r2, [r3, #48]	; 0x30
 800827e:	e005      	b.n	800828c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008280:	6978      	ldr	r0, [r7, #20]
 8008282:	f001 fd77 	bl	8009d74 <vPortFree>
 8008286:	e001      	b.n	800828c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008288:	2300      	movs	r3, #0
 800828a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d017      	beq.n	80082c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800829a:	88fa      	ldrh	r2, [r7, #6]
 800829c:	2300      	movs	r3, #0
 800829e:	9303      	str	r3, [sp, #12]
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	9302      	str	r3, [sp, #8]
 80082a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	68b9      	ldr	r1, [r7, #8]
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f80f 	bl	80082d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082b6:	69f8      	ldr	r0, [r7, #28]
 80082b8:	f000 f8aa 	bl	8008410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082bc:	2301      	movs	r3, #1
 80082be:	61bb      	str	r3, [r7, #24]
 80082c0:	e002      	b.n	80082c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082c2:	f04f 33ff 	mov.w	r3, #4294967295
 80082c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082c8:	69bb      	ldr	r3, [r7, #24]
	}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3720      	adds	r7, #32
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	461a      	mov	r2, r3
 80082ec:	21a5      	movs	r1, #165	; 0xa5
 80082ee:	f001 fe55 	bl	8009f9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80082fc:	3b01      	subs	r3, #1
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	f023 0307 	bic.w	r3, r3, #7
 800830a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	f003 0307 	and.w	r3, r3, #7
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	617b      	str	r3, [r7, #20]
}
 8008328:	bf00      	nop
 800832a:	e7fe      	b.n	800832a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]
 8008330:	e012      	b.n	8008358 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	4413      	add	r3, r2
 8008338:	7819      	ldrb	r1, [r3, #0]
 800833a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	3334      	adds	r3, #52	; 0x34
 8008342:	460a      	mov	r2, r1
 8008344:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	4413      	add	r3, r2
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d006      	beq.n	8008360 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	3301      	adds	r3, #1
 8008356:	61fb      	str	r3, [r7, #28]
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2b0f      	cmp	r3, #15
 800835c:	d9e9      	bls.n	8008332 <prvInitialiseNewTask+0x5e>
 800835e:	e000      	b.n	8008362 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008360:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	2b37      	cmp	r3, #55	; 0x37
 800836e:	d901      	bls.n	8008374 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008370:	2337      	movs	r3, #55	; 0x37
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800837e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	2200      	movs	r2, #0
 8008384:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	3304      	adds	r3, #4
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fe65 	bl	800705a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	3318      	adds	r3, #24
 8008394:	4618      	mov	r0, r3
 8008396:	f7fe fe60 	bl	800705a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	3354      	adds	r3, #84	; 0x54
 80083c4:	224c      	movs	r2, #76	; 0x4c
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fde7 	bl	8009f9c <memset>
 80083ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d0:	4a0c      	ldr	r2, [pc, #48]	; (8008404 <prvInitialiseNewTask+0x130>)
 80083d2:	659a      	str	r2, [r3, #88]	; 0x58
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	4a0c      	ldr	r2, [pc, #48]	; (8008408 <prvInitialiseNewTask+0x134>)
 80083d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	4a0b      	ldr	r2, [pc, #44]	; (800840c <prvInitialiseNewTask+0x138>)
 80083de:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	69b8      	ldr	r0, [r7, #24]
 80083e6:	f001 fa13 	bl	8009810 <pxPortInitialiseStack>
 80083ea:	4602      	mov	r2, r0
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80083f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083fc:	bf00      	nop
 80083fe:	3720      	adds	r7, #32
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	20001c28 	.word	0x20001c28
 8008408:	20001c90 	.word	0x20001c90
 800840c:	20001cf8 	.word	0x20001cf8

08008410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008418:	f001 fae8 	bl	80099ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800841c:	4b2d      	ldr	r3, [pc, #180]	; (80084d4 <prvAddNewTaskToReadyList+0xc4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3301      	adds	r3, #1
 8008422:	4a2c      	ldr	r2, [pc, #176]	; (80084d4 <prvAddNewTaskToReadyList+0xc4>)
 8008424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008426:	4b2c      	ldr	r3, [pc, #176]	; (80084d8 <prvAddNewTaskToReadyList+0xc8>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800842e:	4a2a      	ldr	r2, [pc, #168]	; (80084d8 <prvAddNewTaskToReadyList+0xc8>)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008434:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <prvAddNewTaskToReadyList+0xc4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d110      	bne.n	800845e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800843c:	f000 fc28 	bl	8008c90 <prvInitialiseTaskLists>
 8008440:	e00d      	b.n	800845e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008442:	4b26      	ldr	r3, [pc, #152]	; (80084dc <prvAddNewTaskToReadyList+0xcc>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d109      	bne.n	800845e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800844a:	4b23      	ldr	r3, [pc, #140]	; (80084d8 <prvAddNewTaskToReadyList+0xc8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	429a      	cmp	r2, r3
 8008456:	d802      	bhi.n	800845e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008458:	4a1f      	ldr	r2, [pc, #124]	; (80084d8 <prvAddNewTaskToReadyList+0xc8>)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800845e:	4b20      	ldr	r3, [pc, #128]	; (80084e0 <prvAddNewTaskToReadyList+0xd0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	4a1e      	ldr	r2, [pc, #120]	; (80084e0 <prvAddNewTaskToReadyList+0xd0>)
 8008466:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008468:	4b1d      	ldr	r3, [pc, #116]	; (80084e0 <prvAddNewTaskToReadyList+0xd0>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <prvAddNewTaskToReadyList+0xd4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d903      	bls.n	8008484 <prvAddNewTaskToReadyList+0x74>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	4a18      	ldr	r2, [pc, #96]	; (80084e4 <prvAddNewTaskToReadyList+0xd4>)
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <prvAddNewTaskToReadyList+0xd8>)
 8008492:	441a      	add	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f7fe fde9 	bl	8007072 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084a0:	f001 fad4 	bl	8009a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084a4:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <prvAddNewTaskToReadyList+0xcc>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00e      	beq.n	80084ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084ac:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <prvAddNewTaskToReadyList+0xc8>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d207      	bcs.n	80084ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084ba:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <prvAddNewTaskToReadyList+0xdc>)
 80084bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000eb0 	.word	0x20000eb0
 80084d8:	200009dc 	.word	0x200009dc
 80084dc:	20000ebc 	.word	0x20000ebc
 80084e0:	20000ecc 	.word	0x20000ecc
 80084e4:	20000eb8 	.word	0x20000eb8
 80084e8:	200009e0 	.word	0x200009e0
 80084ec:	e000ed04 	.word	0xe000ed04

080084f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d017      	beq.n	8008532 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008502:	4b13      	ldr	r3, [pc, #76]	; (8008550 <vTaskDelay+0x60>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <vTaskDelay+0x30>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	60bb      	str	r3, [r7, #8]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008520:	f000 f88a 	bl	8008638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008524:	2100      	movs	r1, #0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fe0c 	bl	8009144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800852c:	f000 f892 	bl	8008654 <xTaskResumeAll>
 8008530:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d107      	bne.n	8008548 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008538:	4b06      	ldr	r3, [pc, #24]	; (8008554 <vTaskDelay+0x64>)
 800853a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20000ed8 	.word	0x20000ed8
 8008554:	e000ed04 	.word	0xe000ed04

08008558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	; 0x28
 800855c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800855e:	2300      	movs	r3, #0
 8008560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008566:	463a      	mov	r2, r7
 8008568:	1d39      	adds	r1, r7, #4
 800856a:	f107 0308 	add.w	r3, r7, #8
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fd22 	bl	8006fb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	9202      	str	r2, [sp, #8]
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	2300      	movs	r3, #0
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	460a      	mov	r2, r1
 8008586:	4924      	ldr	r1, [pc, #144]	; (8008618 <vTaskStartScheduler+0xc0>)
 8008588:	4824      	ldr	r0, [pc, #144]	; (800861c <vTaskStartScheduler+0xc4>)
 800858a:	f7ff fe01 	bl	8008190 <xTaskCreateStatic>
 800858e:	4603      	mov	r3, r0
 8008590:	4a23      	ldr	r2, [pc, #140]	; (8008620 <vTaskStartScheduler+0xc8>)
 8008592:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008594:	4b22      	ldr	r3, [pc, #136]	; (8008620 <vTaskStartScheduler+0xc8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800859c:	2301      	movs	r3, #1
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e001      	b.n	80085a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d102      	bne.n	80085b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085ac:	f000 fe1e 	bl	80091ec <xTimerCreateTimerTask>
 80085b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d11b      	bne.n	80085f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	613b      	str	r3, [r7, #16]
}
 80085ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085cc:	4b15      	ldr	r3, [pc, #84]	; (8008624 <vTaskStartScheduler+0xcc>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3354      	adds	r3, #84	; 0x54
 80085d2:	4a15      	ldr	r2, [pc, #84]	; (8008628 <vTaskStartScheduler+0xd0>)
 80085d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085d6:	4b15      	ldr	r3, [pc, #84]	; (800862c <vTaskStartScheduler+0xd4>)
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295
 80085dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085de:	4b14      	ldr	r3, [pc, #80]	; (8008630 <vTaskStartScheduler+0xd8>)
 80085e0:	2201      	movs	r2, #1
 80085e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80085e4:	4b13      	ldr	r3, [pc, #76]	; (8008634 <vTaskStartScheduler+0xdc>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085ea:	f001 f98d 	bl	8009908 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085ee:	e00e      	b.n	800860e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f6:	d10a      	bne.n	800860e <vTaskStartScheduler+0xb6>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	60fb      	str	r3, [r7, #12]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <vTaskStartScheduler+0xb4>
}
 800860e:	bf00      	nop
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	0800bb74 	.word	0x0800bb74
 800861c:	08008c61 	.word	0x08008c61
 8008620:	20000ed4 	.word	0x20000ed4
 8008624:	200009dc 	.word	0x200009dc
 8008628:	20000068 	.word	0x20000068
 800862c:	20000ed0 	.word	0x20000ed0
 8008630:	20000ebc 	.word	0x20000ebc
 8008634:	20000eb4 	.word	0x20000eb4

08008638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008638:	b480      	push	{r7}
 800863a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800863c:	4b04      	ldr	r3, [pc, #16]	; (8008650 <vTaskSuspendAll+0x18>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3301      	adds	r3, #1
 8008642:	4a03      	ldr	r2, [pc, #12]	; (8008650 <vTaskSuspendAll+0x18>)
 8008644:	6013      	str	r3, [r2, #0]
}
 8008646:	bf00      	nop
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20000ed8 	.word	0x20000ed8

08008654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800865e:	2300      	movs	r3, #0
 8008660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008662:	4b42      	ldr	r3, [pc, #264]	; (800876c <xTaskResumeAll+0x118>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <xTaskResumeAll+0x2c>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	603b      	str	r3, [r7, #0]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008680:	f001 f9b4 	bl	80099ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008684:	4b39      	ldr	r3, [pc, #228]	; (800876c <xTaskResumeAll+0x118>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3b01      	subs	r3, #1
 800868a:	4a38      	ldr	r2, [pc, #224]	; (800876c <xTaskResumeAll+0x118>)
 800868c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800868e:	4b37      	ldr	r3, [pc, #220]	; (800876c <xTaskResumeAll+0x118>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d162      	bne.n	800875c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008696:	4b36      	ldr	r3, [pc, #216]	; (8008770 <xTaskResumeAll+0x11c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d05e      	beq.n	800875c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800869e:	e02f      	b.n	8008700 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80086a0:	4b34      	ldr	r3, [pc, #208]	; (8008774 <xTaskResumeAll+0x120>)
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3318      	adds	r3, #24
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe fd3b 	bl	8007128 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3304      	adds	r3, #4
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe fd36 	bl	8007128 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4b2d      	ldr	r3, [pc, #180]	; (8008778 <xTaskResumeAll+0x124>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d903      	bls.n	80086d0 <xTaskResumeAll+0x7c>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	4a2a      	ldr	r2, [pc, #168]	; (8008778 <xTaskResumeAll+0x124>)
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4a27      	ldr	r2, [pc, #156]	; (800877c <xTaskResumeAll+0x128>)
 80086de:	441a      	add	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f7fe fcc3 	bl	8007072 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f0:	4b23      	ldr	r3, [pc, #140]	; (8008780 <xTaskResumeAll+0x12c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d302      	bcc.n	8008700 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80086fa:	4b22      	ldr	r3, [pc, #136]	; (8008784 <xTaskResumeAll+0x130>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008700:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <xTaskResumeAll+0x120>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1cb      	bne.n	80086a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800870e:	f000 fb61 	bl	8008dd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008712:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <xTaskResumeAll+0x134>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d010      	beq.n	8008740 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800871e:	f000 f845 	bl	80087ac <xTaskIncrementTick>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008728:	4b16      	ldr	r3, [pc, #88]	; (8008784 <xTaskResumeAll+0x130>)
 800872a:	2201      	movs	r2, #1
 800872c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3b01      	subs	r3, #1
 8008732:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1f1      	bne.n	800871e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800873a:	4b13      	ldr	r3, [pc, #76]	; (8008788 <xTaskResumeAll+0x134>)
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008740:	4b10      	ldr	r3, [pc, #64]	; (8008784 <xTaskResumeAll+0x130>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d009      	beq.n	800875c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008748:	2301      	movs	r3, #1
 800874a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800874c:	4b0f      	ldr	r3, [pc, #60]	; (800878c <xTaskResumeAll+0x138>)
 800874e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800875c:	f001 f976 	bl	8009a4c <vPortExitCritical>

	return xAlreadyYielded;
 8008760:	68bb      	ldr	r3, [r7, #8]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000ed8 	.word	0x20000ed8
 8008770:	20000eb0 	.word	0x20000eb0
 8008774:	20000e70 	.word	0x20000e70
 8008778:	20000eb8 	.word	0x20000eb8
 800877c:	200009e0 	.word	0x200009e0
 8008780:	200009dc 	.word	0x200009dc
 8008784:	20000ec4 	.word	0x20000ec4
 8008788:	20000ec0 	.word	0x20000ec0
 800878c:	e000ed04 	.word	0xe000ed04

08008790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008796:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <xTaskGetTickCount+0x18>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800879c:	687b      	ldr	r3, [r7, #4]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr
 80087a8:	20000eb4 	.word	0x20000eb4

080087ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087b2:	2300      	movs	r3, #0
 80087b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087b6:	4b51      	ldr	r3, [pc, #324]	; (80088fc <xTaskIncrementTick+0x150>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f040 808e 	bne.w	80088dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087c0:	4b4f      	ldr	r3, [pc, #316]	; (8008900 <xTaskIncrementTick+0x154>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3301      	adds	r3, #1
 80087c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087c8:	4a4d      	ldr	r2, [pc, #308]	; (8008900 <xTaskIncrementTick+0x154>)
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d120      	bne.n	8008816 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087d4:	4b4b      	ldr	r3, [pc, #300]	; (8008904 <xTaskIncrementTick+0x158>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	603b      	str	r3, [r7, #0]
}
 80087f0:	bf00      	nop
 80087f2:	e7fe      	b.n	80087f2 <xTaskIncrementTick+0x46>
 80087f4:	4b43      	ldr	r3, [pc, #268]	; (8008904 <xTaskIncrementTick+0x158>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	4b43      	ldr	r3, [pc, #268]	; (8008908 <xTaskIncrementTick+0x15c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a41      	ldr	r2, [pc, #260]	; (8008904 <xTaskIncrementTick+0x158>)
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	4a41      	ldr	r2, [pc, #260]	; (8008908 <xTaskIncrementTick+0x15c>)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	4b40      	ldr	r3, [pc, #256]	; (800890c <xTaskIncrementTick+0x160>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3301      	adds	r3, #1
 800880e:	4a3f      	ldr	r2, [pc, #252]	; (800890c <xTaskIncrementTick+0x160>)
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	f000 fadf 	bl	8008dd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008816:	4b3e      	ldr	r3, [pc, #248]	; (8008910 <xTaskIncrementTick+0x164>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	429a      	cmp	r2, r3
 800881e:	d34e      	bcc.n	80088be <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008820:	4b38      	ldr	r3, [pc, #224]	; (8008904 <xTaskIncrementTick+0x158>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <xTaskIncrementTick+0x82>
 800882a:	2301      	movs	r3, #1
 800882c:	e000      	b.n	8008830 <xTaskIncrementTick+0x84>
 800882e:	2300      	movs	r3, #0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008834:	4b36      	ldr	r3, [pc, #216]	; (8008910 <xTaskIncrementTick+0x164>)
 8008836:	f04f 32ff 	mov.w	r2, #4294967295
 800883a:	601a      	str	r2, [r3, #0]
					break;
 800883c:	e03f      	b.n	80088be <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800883e:	4b31      	ldr	r3, [pc, #196]	; (8008904 <xTaskIncrementTick+0x158>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	429a      	cmp	r2, r3
 8008854:	d203      	bcs.n	800885e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008856:	4a2e      	ldr	r2, [pc, #184]	; (8008910 <xTaskIncrementTick+0x164>)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6013      	str	r3, [r2, #0]
						break;
 800885c:	e02f      	b.n	80088be <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	3304      	adds	r3, #4
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fc60 	bl	8007128 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886c:	2b00      	cmp	r3, #0
 800886e:	d004      	beq.n	800887a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	3318      	adds	r3, #24
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe fc57 	bl	8007128 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887e:	4b25      	ldr	r3, [pc, #148]	; (8008914 <xTaskIncrementTick+0x168>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d903      	bls.n	800888e <xTaskIncrementTick+0xe2>
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888a:	4a22      	ldr	r2, [pc, #136]	; (8008914 <xTaskIncrementTick+0x168>)
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008892:	4613      	mov	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4a1f      	ldr	r2, [pc, #124]	; (8008918 <xTaskIncrementTick+0x16c>)
 800889c:	441a      	add	r2, r3
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4619      	mov	r1, r3
 80088a4:	4610      	mov	r0, r2
 80088a6:	f7fe fbe4 	bl	8007072 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ae:	4b1b      	ldr	r3, [pc, #108]	; (800891c <xTaskIncrementTick+0x170>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d3b3      	bcc.n	8008820 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80088b8:	2301      	movs	r3, #1
 80088ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088bc:	e7b0      	b.n	8008820 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088be:	4b17      	ldr	r3, [pc, #92]	; (800891c <xTaskIncrementTick+0x170>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c4:	4914      	ldr	r1, [pc, #80]	; (8008918 <xTaskIncrementTick+0x16c>)
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	440b      	add	r3, r1
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d907      	bls.n	80088e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80088d6:	2301      	movs	r3, #1
 80088d8:	617b      	str	r3, [r7, #20]
 80088da:	e004      	b.n	80088e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80088dc:	4b10      	ldr	r3, [pc, #64]	; (8008920 <xTaskIncrementTick+0x174>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3301      	adds	r3, #1
 80088e2:	4a0f      	ldr	r2, [pc, #60]	; (8008920 <xTaskIncrementTick+0x174>)
 80088e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80088e6:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <xTaskIncrementTick+0x178>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80088ee:	2301      	movs	r3, #1
 80088f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80088f2:	697b      	ldr	r3, [r7, #20]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000ed8 	.word	0x20000ed8
 8008900:	20000eb4 	.word	0x20000eb4
 8008904:	20000e68 	.word	0x20000e68
 8008908:	20000e6c 	.word	0x20000e6c
 800890c:	20000ec8 	.word	0x20000ec8
 8008910:	20000ed0 	.word	0x20000ed0
 8008914:	20000eb8 	.word	0x20000eb8
 8008918:	200009e0 	.word	0x200009e0
 800891c:	200009dc 	.word	0x200009dc
 8008920:	20000ec0 	.word	0x20000ec0
 8008924:	20000ec4 	.word	0x20000ec4

08008928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800892e:	4b2a      	ldr	r3, [pc, #168]	; (80089d8 <vTaskSwitchContext+0xb0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008936:	4b29      	ldr	r3, [pc, #164]	; (80089dc <vTaskSwitchContext+0xb4>)
 8008938:	2201      	movs	r2, #1
 800893a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800893c:	e046      	b.n	80089cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800893e:	4b27      	ldr	r3, [pc, #156]	; (80089dc <vTaskSwitchContext+0xb4>)
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008944:	4b26      	ldr	r3, [pc, #152]	; (80089e0 <vTaskSwitchContext+0xb8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e010      	b.n	800896e <vTaskSwitchContext+0x46>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <vTaskSwitchContext+0x40>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	607b      	str	r3, [r7, #4]
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <vTaskSwitchContext+0x3e>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3b01      	subs	r3, #1
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	491d      	ldr	r1, [pc, #116]	; (80089e4 <vTaskSwitchContext+0xbc>)
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	4613      	mov	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	440b      	add	r3, r1
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0e4      	beq.n	800894c <vTaskSwitchContext+0x24>
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4a15      	ldr	r2, [pc, #84]	; (80089e4 <vTaskSwitchContext+0xbc>)
 800898e:	4413      	add	r3, r2
 8008990:	60bb      	str	r3, [r7, #8]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	605a      	str	r2, [r3, #4]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	3308      	adds	r3, #8
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d104      	bne.n	80089b2 <vTaskSwitchContext+0x8a>
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	605a      	str	r2, [r3, #4]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	4a0b      	ldr	r2, [pc, #44]	; (80089e8 <vTaskSwitchContext+0xc0>)
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	4a08      	ldr	r2, [pc, #32]	; (80089e0 <vTaskSwitchContext+0xb8>)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <vTaskSwitchContext+0xc0>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3354      	adds	r3, #84	; 0x54
 80089c8:	4a08      	ldr	r2, [pc, #32]	; (80089ec <vTaskSwitchContext+0xc4>)
 80089ca:	6013      	str	r3, [r2, #0]
}
 80089cc:	bf00      	nop
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	20000ed8 	.word	0x20000ed8
 80089dc:	20000ec4 	.word	0x20000ec4
 80089e0:	20000eb8 	.word	0x20000eb8
 80089e4:	200009e0 	.word	0x200009e0
 80089e8:	200009dc 	.word	0x200009dc
 80089ec:	20000068 	.word	0x20000068

080089f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	60fb      	str	r3, [r7, #12]
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a16:	4b07      	ldr	r3, [pc, #28]	; (8008a34 <vTaskPlaceOnEventList+0x44>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3318      	adds	r3, #24
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7fe fb4a 	bl	80070b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a24:	2101      	movs	r1, #1
 8008a26:	6838      	ldr	r0, [r7, #0]
 8008a28:	f000 fb8c 	bl	8009144 <prvAddCurrentTaskToDelayedList>
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	200009dc 	.word	0x200009dc

08008a38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10a      	bne.n	8008a60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	617b      	str	r3, [r7, #20]
}
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a60:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <vTaskPlaceOnEventListRestricted+0x54>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3318      	adds	r3, #24
 8008a66:	4619      	mov	r1, r3
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7fe fb02 	bl	8007072 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a74:	f04f 33ff 	mov.w	r3, #4294967295
 8008a78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	68b8      	ldr	r0, [r7, #8]
 8008a7e:	f000 fb61 	bl	8009144 <prvAddCurrentTaskToDelayedList>
	}
 8008a82:	bf00      	nop
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	200009dc 	.word	0x200009dc

08008a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60fb      	str	r3, [r7, #12]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	3318      	adds	r3, #24
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fb31 	bl	8007128 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ac6:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <xTaskRemoveFromEventList+0xb0>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d11d      	bne.n	8008b0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fb28 	bl	8007128 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008adc:	4b19      	ldr	r3, [pc, #100]	; (8008b44 <xTaskRemoveFromEventList+0xb4>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d903      	bls.n	8008aec <xTaskRemoveFromEventList+0x5c>
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	4a16      	ldr	r2, [pc, #88]	; (8008b44 <xTaskRemoveFromEventList+0xb4>)
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af0:	4613      	mov	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4a13      	ldr	r2, [pc, #76]	; (8008b48 <xTaskRemoveFromEventList+0xb8>)
 8008afa:	441a      	add	r2, r3
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4619      	mov	r1, r3
 8008b02:	4610      	mov	r0, r2
 8008b04:	f7fe fab5 	bl	8007072 <vListInsertEnd>
 8008b08:	e005      	b.n	8008b16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	3318      	adds	r3, #24
 8008b0e:	4619      	mov	r1, r3
 8008b10:	480e      	ldr	r0, [pc, #56]	; (8008b4c <xTaskRemoveFromEventList+0xbc>)
 8008b12:	f7fe faae 	bl	8007072 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1a:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <xTaskRemoveFromEventList+0xc0>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d905      	bls.n	8008b30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b28:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <xTaskRemoveFromEventList+0xc4>)
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	e001      	b.n	8008b34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008b30:	2300      	movs	r3, #0
 8008b32:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008b34:	697b      	ldr	r3, [r7, #20]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	20000ed8 	.word	0x20000ed8
 8008b44:	20000eb8 	.word	0x20000eb8
 8008b48:	200009e0 	.word	0x200009e0
 8008b4c:	20000e70 	.word	0x20000e70
 8008b50:	200009dc 	.word	0x200009dc
 8008b54:	20000ec4 	.word	0x20000ec4

08008b58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b60:	4b06      	ldr	r3, [pc, #24]	; (8008b7c <vTaskInternalSetTimeOutState+0x24>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <vTaskInternalSetTimeOutState+0x28>)
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	605a      	str	r2, [r3, #4]
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20000ec8 	.word	0x20000ec8
 8008b80:	20000eb4 	.word	0x20000eb4

08008b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	613b      	str	r3, [r7, #16]
}
 8008ba6:	bf00      	nop
 8008ba8:	e7fe      	b.n	8008ba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10a      	bne.n	8008bc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	60fb      	str	r3, [r7, #12]
}
 8008bc2:	bf00      	nop
 8008bc4:	e7fe      	b.n	8008bc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008bc6:	f000 ff11 	bl	80099ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bca:	4b1d      	ldr	r3, [pc, #116]	; (8008c40 <xTaskCheckForTimeOut+0xbc>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be2:	d102      	bne.n	8008bea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61fb      	str	r3, [r7, #28]
 8008be8:	e023      	b.n	8008c32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	4b15      	ldr	r3, [pc, #84]	; (8008c44 <xTaskCheckForTimeOut+0xc0>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d007      	beq.n	8008c06 <xTaskCheckForTimeOut+0x82>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d302      	bcc.n	8008c06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	61fb      	str	r3, [r7, #28]
 8008c04:	e015      	b.n	8008c32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d20b      	bcs.n	8008c28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	1ad2      	subs	r2, r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7ff ff9b 	bl	8008b58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c22:	2300      	movs	r3, #0
 8008c24:	61fb      	str	r3, [r7, #28]
 8008c26:	e004      	b.n	8008c32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c32:	f000 ff0b 	bl	8009a4c <vPortExitCritical>

	return xReturn;
 8008c36:	69fb      	ldr	r3, [r7, #28]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3720      	adds	r7, #32
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	20000eb4 	.word	0x20000eb4
 8008c44:	20000ec8 	.word	0x20000ec8

08008c48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c4c:	4b03      	ldr	r3, [pc, #12]	; (8008c5c <vTaskMissedYield+0x14>)
 8008c4e:	2201      	movs	r2, #1
 8008c50:	601a      	str	r2, [r3, #0]
}
 8008c52:	bf00      	nop
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bc80      	pop	{r7}
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20000ec4 	.word	0x20000ec4

08008c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c68:	f000 f852 	bl	8008d10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <prvIdleTask+0x28>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d9f9      	bls.n	8008c68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <prvIdleTask+0x2c>)
 8008c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c84:	e7f0      	b.n	8008c68 <prvIdleTask+0x8>
 8008c86:	bf00      	nop
 8008c88:	200009e0 	.word	0x200009e0
 8008c8c:	e000ed04 	.word	0xe000ed04

08008c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c96:	2300      	movs	r3, #0
 8008c98:	607b      	str	r3, [r7, #4]
 8008c9a:	e00c      	b.n	8008cb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4a12      	ldr	r2, [pc, #72]	; (8008cf0 <prvInitialiseTaskLists+0x60>)
 8008ca8:	4413      	add	r3, r2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe f9b6 	bl	800701c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	607b      	str	r3, [r7, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b37      	cmp	r3, #55	; 0x37
 8008cba:	d9ef      	bls.n	8008c9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cbc:	480d      	ldr	r0, [pc, #52]	; (8008cf4 <prvInitialiseTaskLists+0x64>)
 8008cbe:	f7fe f9ad 	bl	800701c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cc2:	480d      	ldr	r0, [pc, #52]	; (8008cf8 <prvInitialiseTaskLists+0x68>)
 8008cc4:	f7fe f9aa 	bl	800701c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cc8:	480c      	ldr	r0, [pc, #48]	; (8008cfc <prvInitialiseTaskLists+0x6c>)
 8008cca:	f7fe f9a7 	bl	800701c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cce:	480c      	ldr	r0, [pc, #48]	; (8008d00 <prvInitialiseTaskLists+0x70>)
 8008cd0:	f7fe f9a4 	bl	800701c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008cd4:	480b      	ldr	r0, [pc, #44]	; (8008d04 <prvInitialiseTaskLists+0x74>)
 8008cd6:	f7fe f9a1 	bl	800701c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <prvInitialiseTaskLists+0x78>)
 8008cdc:	4a05      	ldr	r2, [pc, #20]	; (8008cf4 <prvInitialiseTaskLists+0x64>)
 8008cde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <prvInitialiseTaskLists+0x7c>)
 8008ce2:	4a05      	ldr	r2, [pc, #20]	; (8008cf8 <prvInitialiseTaskLists+0x68>)
 8008ce4:	601a      	str	r2, [r3, #0]
}
 8008ce6:	bf00      	nop
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	200009e0 	.word	0x200009e0
 8008cf4:	20000e40 	.word	0x20000e40
 8008cf8:	20000e54 	.word	0x20000e54
 8008cfc:	20000e70 	.word	0x20000e70
 8008d00:	20000e84 	.word	0x20000e84
 8008d04:	20000e9c 	.word	0x20000e9c
 8008d08:	20000e68 	.word	0x20000e68
 8008d0c:	20000e6c 	.word	0x20000e6c

08008d10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d16:	e019      	b.n	8008d4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d18:	f000 fe68 	bl	80099ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008d1c:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <prvCheckTasksWaitingTermination+0x50>)
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fe f9fd 	bl	8007128 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <prvCheckTasksWaitingTermination+0x54>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	4a0b      	ldr	r2, [pc, #44]	; (8008d64 <prvCheckTasksWaitingTermination+0x54>)
 8008d36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d38:	4b0b      	ldr	r3, [pc, #44]	; (8008d68 <prvCheckTasksWaitingTermination+0x58>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	4a0a      	ldr	r2, [pc, #40]	; (8008d68 <prvCheckTasksWaitingTermination+0x58>)
 8008d40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d42:	f000 fe83 	bl	8009a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f810 	bl	8008d6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d4c:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <prvCheckTasksWaitingTermination+0x58>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e1      	bne.n	8008d18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000e84 	.word	0x20000e84
 8008d64:	20000eb0 	.word	0x20000eb0
 8008d68:	20000e98 	.word	0x20000e98

08008d6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3354      	adds	r3, #84	; 0x54
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f001 f917 	bl	8009fac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d108      	bne.n	8008d9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fff1 	bl	8009d74 <vPortFree>
				vPortFree( pxTCB );
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 ffee 	bl	8009d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d98:	e018      	b.n	8008dcc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d103      	bne.n	8008dac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 ffe5 	bl	8009d74 <vPortFree>
	}
 8008daa:	e00f      	b.n	8008dcc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d00a      	beq.n	8008dcc <prvDeleteTCB+0x60>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	60fb      	str	r3, [r7, #12]
}
 8008dc8:	bf00      	nop
 8008dca:	e7fe      	b.n	8008dca <prvDeleteTCB+0x5e>
	}
 8008dcc:	bf00      	nop
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dda:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <prvResetNextTaskUnblockTime+0x40>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <prvResetNextTaskUnblockTime+0x14>
 8008de4:	2301      	movs	r3, #1
 8008de6:	e000      	b.n	8008dea <prvResetNextTaskUnblockTime+0x16>
 8008de8:	2300      	movs	r3, #0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d004      	beq.n	8008df8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dee:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <prvResetNextTaskUnblockTime+0x44>)
 8008df0:	f04f 32ff 	mov.w	r2, #4294967295
 8008df4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008df6:	e008      	b.n	8008e0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008df8:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <prvResetNextTaskUnblockTime+0x40>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	4a04      	ldr	r2, [pc, #16]	; (8008e18 <prvResetNextTaskUnblockTime+0x44>)
 8008e08:	6013      	str	r3, [r2, #0]
}
 8008e0a:	bf00      	nop
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bc80      	pop	{r7}
 8008e12:	4770      	bx	lr
 8008e14:	20000e68 	.word	0x20000e68
 8008e18:	20000ed0 	.word	0x20000ed0

08008e1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <xTaskGetSchedulerState+0x34>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	607b      	str	r3, [r7, #4]
 8008e2e:	e008      	b.n	8008e42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e30:	4b08      	ldr	r3, [pc, #32]	; (8008e54 <xTaskGetSchedulerState+0x38>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d102      	bne.n	8008e3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	607b      	str	r3, [r7, #4]
 8008e3c:	e001      	b.n	8008e42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e42:	687b      	ldr	r3, [r7, #4]
	}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bc80      	pop	{r7}
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20000ebc 	.word	0x20000ebc
 8008e54:	20000ed8 	.word	0x20000ed8

08008e58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d056      	beq.n	8008f1c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e72:	4b2d      	ldr	r3, [pc, #180]	; (8008f28 <xTaskPriorityInherit+0xd0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d246      	bcs.n	8008f0a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	db06      	blt.n	8008e92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e84:	4b28      	ldr	r3, [pc, #160]	; (8008f28 <xTaskPriorityInherit+0xd0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	6959      	ldr	r1, [r3, #20]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4a22      	ldr	r2, [pc, #136]	; (8008f2c <xTaskPriorityInherit+0xd4>)
 8008ea4:	4413      	add	r3, r2
 8008ea6:	4299      	cmp	r1, r3
 8008ea8:	d101      	bne.n	8008eae <xTaskPriorityInherit+0x56>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e000      	b.n	8008eb0 <xTaskPriorityInherit+0x58>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d022      	beq.n	8008efa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe f935 	bl	8007128 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ebe:	4b1a      	ldr	r3, [pc, #104]	; (8008f28 <xTaskPriorityInherit+0xd0>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ecc:	4b18      	ldr	r3, [pc, #96]	; (8008f30 <xTaskPriorityInherit+0xd8>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d903      	bls.n	8008edc <xTaskPriorityInherit+0x84>
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	4a15      	ldr	r2, [pc, #84]	; (8008f30 <xTaskPriorityInherit+0xd8>)
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4a10      	ldr	r2, [pc, #64]	; (8008f2c <xTaskPriorityInherit+0xd4>)
 8008eea:	441a      	add	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	f7fe f8bd 	bl	8007072 <vListInsertEnd>
 8008ef8:	e004      	b.n	8008f04 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008efa:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <xTaskPriorityInherit+0xd0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008f04:	2301      	movs	r3, #1
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	e008      	b.n	8008f1c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f0e:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <xTaskPriorityInherit+0xd0>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d201      	bcs.n	8008f1c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
	}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	200009dc 	.word	0x200009dc
 8008f2c:	200009e0 	.word	0x200009e0
 8008f30:	20000eb8 	.word	0x20000eb8

08008f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d056      	beq.n	8008ff8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f4a:	4b2e      	ldr	r3, [pc, #184]	; (8009004 <xTaskPriorityDisinherit+0xd0>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d00a      	beq.n	8008f6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	60fb      	str	r3, [r7, #12]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10a      	bne.n	8008f88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	60bb      	str	r3, [r7, #8]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f8c:	1e5a      	subs	r2, r3, #1
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d02c      	beq.n	8008ff8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d128      	bne.n	8008ff8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe f8bc 	bl	8007128 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <xTaskPriorityDisinherit+0xd4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d903      	bls.n	8008fd8 <xTaskPriorityDisinherit+0xa4>
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	4a0c      	ldr	r2, [pc, #48]	; (8009008 <xTaskPriorityDisinherit+0xd4>)
 8008fd6:	6013      	str	r3, [r2, #0]
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fdc:	4613      	mov	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4a09      	ldr	r2, [pc, #36]	; (800900c <xTaskPriorityDisinherit+0xd8>)
 8008fe6:	441a      	add	r2, r3
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	3304      	adds	r3, #4
 8008fec:	4619      	mov	r1, r3
 8008fee:	4610      	mov	r0, r2
 8008ff0:	f7fe f83f 	bl	8007072 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ff8:	697b      	ldr	r3, [r7, #20]
	}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	200009dc 	.word	0x200009dc
 8009008:	20000eb8 	.word	0x20000eb8
 800900c:	200009e0 	.word	0x200009e0

08009010 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009010:	b580      	push	{r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800901e:	2301      	movs	r3, #1
 8009020:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d06f      	beq.n	8009108 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10a      	bne.n	8009046 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60fb      	str	r3, [r7, #12]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	429a      	cmp	r2, r3
 800904e:	d902      	bls.n	8009056 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	61fb      	str	r3, [r7, #28]
 8009054:	e002      	b.n	800905c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800905a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	429a      	cmp	r2, r3
 8009064:	d050      	beq.n	8009108 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	429a      	cmp	r2, r3
 800906e:	d14b      	bne.n	8009108 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009070:	4b27      	ldr	r3, [pc, #156]	; (8009110 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	429a      	cmp	r2, r3
 8009078:	d10a      	bne.n	8009090 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	60bb      	str	r3, [r7, #8]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	69fa      	ldr	r2, [r7, #28]
 800909a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	db04      	blt.n	80090ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	6959      	ldr	r1, [r3, #20]
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4a15      	ldr	r2, [pc, #84]	; (8009114 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80090be:	4413      	add	r3, r2
 80090c0:	4299      	cmp	r1, r3
 80090c2:	d101      	bne.n	80090c8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e000      	b.n	80090ca <vTaskPriorityDisinheritAfterTimeout+0xba>
 80090c8:	2300      	movs	r3, #0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01c      	beq.n	8009108 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe f828 	bl	8007128 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4b0e      	ldr	r3, [pc, #56]	; (8009118 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d903      	bls.n	80090ec <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	4a0b      	ldr	r2, [pc, #44]	; (8009118 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4a06      	ldr	r2, [pc, #24]	; (8009114 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80090fa:	441a      	add	r2, r3
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	3304      	adds	r3, #4
 8009100:	4619      	mov	r1, r3
 8009102:	4610      	mov	r0, r2
 8009104:	f7fd ffb5 	bl	8007072 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009108:	bf00      	nop
 800910a:	3720      	adds	r7, #32
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	200009dc 	.word	0x200009dc
 8009114:	200009e0 	.word	0x200009e0
 8009118:	20000eb8 	.word	0x20000eb8

0800911c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009120:	4b07      	ldr	r3, [pc, #28]	; (8009140 <pvTaskIncrementMutexHeldCount+0x24>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d004      	beq.n	8009132 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <pvTaskIncrementMutexHeldCount+0x24>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800912e:	3201      	adds	r2, #1
 8009130:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009132:	4b03      	ldr	r3, [pc, #12]	; (8009140 <pvTaskIncrementMutexHeldCount+0x24>)
 8009134:	681b      	ldr	r3, [r3, #0]
	}
 8009136:	4618      	mov	r0, r3
 8009138:	46bd      	mov	sp, r7
 800913a:	bc80      	pop	{r7}
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	200009dc 	.word	0x200009dc

08009144 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800914e:	4b21      	ldr	r3, [pc, #132]	; (80091d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009154:	4b20      	ldr	r3, [pc, #128]	; (80091d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3304      	adds	r3, #4
 800915a:	4618      	mov	r0, r3
 800915c:	f7fd ffe4 	bl	8007128 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009166:	d10a      	bne.n	800917e <prvAddCurrentTaskToDelayedList+0x3a>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800916e:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3304      	adds	r3, #4
 8009174:	4619      	mov	r1, r3
 8009176:	4819      	ldr	r0, [pc, #100]	; (80091dc <prvAddCurrentTaskToDelayedList+0x98>)
 8009178:	f7fd ff7b 	bl	8007072 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800917c:	e026      	b.n	80091cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4413      	add	r3, r2
 8009184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009186:	4b14      	ldr	r3, [pc, #80]	; (80091d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	429a      	cmp	r2, r3
 8009194:	d209      	bcs.n	80091aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009196:	4b12      	ldr	r3, [pc, #72]	; (80091e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	4b0f      	ldr	r3, [pc, #60]	; (80091d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3304      	adds	r3, #4
 80091a0:	4619      	mov	r1, r3
 80091a2:	4610      	mov	r0, r2
 80091a4:	f7fd ff88 	bl	80070b8 <vListInsert>
}
 80091a8:	e010      	b.n	80091cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091aa:	4b0e      	ldr	r3, [pc, #56]	; (80091e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4619      	mov	r1, r3
 80091b6:	4610      	mov	r0, r2
 80091b8:	f7fd ff7e 	bl	80070b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091bc:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d202      	bcs.n	80091cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091c6:	4a08      	ldr	r2, [pc, #32]	; (80091e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	6013      	str	r3, [r2, #0]
}
 80091cc:	bf00      	nop
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	20000eb4 	.word	0x20000eb4
 80091d8:	200009dc 	.word	0x200009dc
 80091dc:	20000e9c 	.word	0x20000e9c
 80091e0:	20000e6c 	.word	0x20000e6c
 80091e4:	20000e68 	.word	0x20000e68
 80091e8:	20000ed0 	.word	0x20000ed0

080091ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08a      	sub	sp, #40	; 0x28
 80091f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091f6:	f000 facb 	bl	8009790 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091fa:	4b1c      	ldr	r3, [pc, #112]	; (800926c <xTimerCreateTimerTask+0x80>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d021      	beq.n	8009246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800920a:	1d3a      	adds	r2, r7, #4
 800920c:	f107 0108 	add.w	r1, r7, #8
 8009210:	f107 030c 	add.w	r3, r7, #12
 8009214:	4618      	mov	r0, r3
 8009216:	f7fd fee7 	bl	8006fe8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	9202      	str	r2, [sp, #8]
 8009222:	9301      	str	r3, [sp, #4]
 8009224:	2302      	movs	r3, #2
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	2300      	movs	r3, #0
 800922a:	460a      	mov	r2, r1
 800922c:	4910      	ldr	r1, [pc, #64]	; (8009270 <xTimerCreateTimerTask+0x84>)
 800922e:	4811      	ldr	r0, [pc, #68]	; (8009274 <xTimerCreateTimerTask+0x88>)
 8009230:	f7fe ffae 	bl	8008190 <xTaskCreateStatic>
 8009234:	4603      	mov	r3, r0
 8009236:	4a10      	ldr	r2, [pc, #64]	; (8009278 <xTimerCreateTimerTask+0x8c>)
 8009238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800923a:	4b0f      	ldr	r3, [pc, #60]	; (8009278 <xTimerCreateTimerTask+0x8c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009242:	2301      	movs	r3, #1
 8009244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	613b      	str	r3, [r7, #16]
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009262:	697b      	ldr	r3, [r7, #20]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20000f0c 	.word	0x20000f0c
 8009270:	0800bb7c 	.word	0x0800bb7c
 8009274:	08009399 	.word	0x08009399
 8009278:	20000f10 	.word	0x20000f10

0800927c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	; 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800928a:	2300      	movs	r3, #0
 800928c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	623b      	str	r3, [r7, #32]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092aa:	4b1a      	ldr	r3, [pc, #104]	; (8009314 <xTimerGenericCommand+0x98>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d02a      	beq.n	8009308 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b05      	cmp	r3, #5
 80092c2:	dc18      	bgt.n	80092f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092c4:	f7ff fdaa 	bl	8008e1c <xTaskGetSchedulerState>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d109      	bne.n	80092e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092ce:	4b11      	ldr	r3, [pc, #68]	; (8009314 <xTimerGenericCommand+0x98>)
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	f107 0110 	add.w	r1, r7, #16
 80092d6:	2300      	movs	r3, #0
 80092d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092da:	f7fe f8f9 	bl	80074d0 <xQueueGenericSend>
 80092de:	6278      	str	r0, [r7, #36]	; 0x24
 80092e0:	e012      	b.n	8009308 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092e2:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <xTimerGenericCommand+0x98>)
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	f107 0110 	add.w	r1, r7, #16
 80092ea:	2300      	movs	r3, #0
 80092ec:	2200      	movs	r2, #0
 80092ee:	f7fe f8ef 	bl	80074d0 <xQueueGenericSend>
 80092f2:	6278      	str	r0, [r7, #36]	; 0x24
 80092f4:	e008      	b.n	8009308 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092f6:	4b07      	ldr	r3, [pc, #28]	; (8009314 <xTimerGenericCommand+0x98>)
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	f107 0110 	add.w	r1, r7, #16
 80092fe:	2300      	movs	r3, #0
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	f7fe f9e3 	bl	80076cc <xQueueGenericSendFromISR>
 8009306:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800930a:	4618      	mov	r0, r3
 800930c:	3728      	adds	r7, #40	; 0x28
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20000f0c 	.word	0x20000f0c

08009318 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af02      	add	r7, sp, #8
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009322:	4b1c      	ldr	r3, [pc, #112]	; (8009394 <prvProcessExpiredTimer+0x7c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	3304      	adds	r3, #4
 8009330:	4618      	mov	r0, r3
 8009332:	f7fd fef9 	bl	8007128 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d122      	bne.n	8009384 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	699a      	ldr	r2, [r3, #24]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	18d1      	adds	r1, r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	6978      	ldr	r0, [r7, #20]
 800934c:	f000 f8c8 	bl	80094e0 <prvInsertTimerInActiveList>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d016      	beq.n	8009384 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009356:	2300      	movs	r3, #0
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	2300      	movs	r3, #0
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	2100      	movs	r1, #0
 8009360:	6978      	ldr	r0, [r7, #20]
 8009362:	f7ff ff8b 	bl	800927c <xTimerGenericCommand>
 8009366:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10a      	bne.n	8009384 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	60fb      	str	r3, [r7, #12]
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	6978      	ldr	r0, [r7, #20]
 800938a:	4798      	blx	r3
}
 800938c:	bf00      	nop
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20000f04 	.word	0x20000f04

08009398 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093a0:	f107 0308 	add.w	r3, r7, #8
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 f857 	bl	8009458 <prvGetNextExpireTime>
 80093aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	4619      	mov	r1, r3
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f803 	bl	80093bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093b6:	f000 f8d5 	bl	8009564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093ba:	e7f1      	b.n	80093a0 <prvTimerTask+0x8>

080093bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093c6:	f7ff f937 	bl	8008638 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093ca:	f107 0308 	add.w	r3, r7, #8
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 f866 	bl	80094a0 <prvSampleTimeNow>
 80093d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d130      	bne.n	800943e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <prvProcessTimerOrBlockTask+0x3c>
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d806      	bhi.n	80093f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093ea:	f7ff f933 	bl	8008654 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7ff ff91 	bl	8009318 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093f6:	e024      	b.n	8009442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d008      	beq.n	8009410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <prvProcessTimerOrBlockTask+0x90>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	bf0c      	ite	eq
 8009408:	2301      	moveq	r3, #1
 800940a:	2300      	movne	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009410:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <prvProcessTimerOrBlockTask+0x94>)
 8009412:	6818      	ldr	r0, [r3, #0]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4619      	mov	r1, r3
 800941e:	f7fe fe83 	bl	8008128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009422:	f7ff f917 	bl	8008654 <xTaskResumeAll>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800942c:	4b09      	ldr	r3, [pc, #36]	; (8009454 <prvProcessTimerOrBlockTask+0x98>)
 800942e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	f3bf 8f6f 	isb	sy
}
 800943c:	e001      	b.n	8009442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800943e:	f7ff f909 	bl	8008654 <xTaskResumeAll>
}
 8009442:	bf00      	nop
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000f08 	.word	0x20000f08
 8009450:	20000f0c 	.word	0x20000f0c
 8009454:	e000ed04 	.word	0xe000ed04

08009458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009460:	4b0e      	ldr	r3, [pc, #56]	; (800949c <prvGetNextExpireTime+0x44>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	bf0c      	ite	eq
 800946a:	2301      	moveq	r3, #1
 800946c:	2300      	movne	r3, #0
 800946e:	b2db      	uxtb	r3, r3
 8009470:	461a      	mov	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d105      	bne.n	800948a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800947e:	4b07      	ldr	r3, [pc, #28]	; (800949c <prvGetNextExpireTime+0x44>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	e001      	b.n	800948e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800948e:	68fb      	ldr	r3, [r7, #12]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	bc80      	pop	{r7}
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	20000f04 	.word	0x20000f04

080094a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094a8:	f7ff f972 	bl	8008790 <xTaskGetTickCount>
 80094ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094ae:	4b0b      	ldr	r3, [pc, #44]	; (80094dc <prvSampleTimeNow+0x3c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d205      	bcs.n	80094c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094b8:	f000 f908 	bl	80096cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	e002      	b.n	80094ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094ca:	4a04      	ldr	r2, [pc, #16]	; (80094dc <prvSampleTimeNow+0x3c>)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094d0:	68fb      	ldr	r3, [r7, #12]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20000f14 	.word	0x20000f14

080094e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
 80094ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094ee:	2300      	movs	r3, #0
 80094f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	429a      	cmp	r2, r3
 8009504:	d812      	bhi.n	800952c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	429a      	cmp	r2, r3
 8009512:	d302      	bcc.n	800951a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009514:	2301      	movs	r3, #1
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	e01b      	b.n	8009552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800951a:	4b10      	ldr	r3, [pc, #64]	; (800955c <prvInsertTimerInActiveList+0x7c>)
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3304      	adds	r3, #4
 8009522:	4619      	mov	r1, r3
 8009524:	4610      	mov	r0, r2
 8009526:	f7fd fdc7 	bl	80070b8 <vListInsert>
 800952a:	e012      	b.n	8009552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	429a      	cmp	r2, r3
 8009532:	d206      	bcs.n	8009542 <prvInsertTimerInActiveList+0x62>
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d302      	bcc.n	8009542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	e007      	b.n	8009552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009542:	4b07      	ldr	r3, [pc, #28]	; (8009560 <prvInsertTimerInActiveList+0x80>)
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3304      	adds	r3, #4
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fd fdb3 	bl	80070b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009552:	697b      	ldr	r3, [r7, #20]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20000f08 	.word	0x20000f08
 8009560:	20000f04 	.word	0x20000f04

08009564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b08e      	sub	sp, #56	; 0x38
 8009568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800956a:	e09d      	b.n	80096a8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	da18      	bge.n	80095a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009572:	1d3b      	adds	r3, r7, #4
 8009574:	3304      	adds	r3, #4
 8009576:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10a      	bne.n	8009594 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	61fb      	str	r3, [r7, #28]
}
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800959a:	6850      	ldr	r0, [r2, #4]
 800959c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800959e:	6892      	ldr	r2, [r2, #8]
 80095a0:	4611      	mov	r1, r2
 80095a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	db7e      	blt.n	80096a8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	3304      	adds	r3, #4
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fd fdb4 	bl	8007128 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095c0:	463b      	mov	r3, r7
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff ff6c 	bl	80094a0 <prvSampleTimeNow>
 80095c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b09      	cmp	r3, #9
 80095ce:	d86a      	bhi.n	80096a6 <prvProcessReceivedCommands+0x142>
 80095d0:	a201      	add	r2, pc, #4	; (adr r2, 80095d8 <prvProcessReceivedCommands+0x74>)
 80095d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d6:	bf00      	nop
 80095d8:	08009601 	.word	0x08009601
 80095dc:	08009601 	.word	0x08009601
 80095e0:	08009601 	.word	0x08009601
 80095e4:	080096a9 	.word	0x080096a9
 80095e8:	0800965d 	.word	0x0800965d
 80095ec:	08009695 	.word	0x08009695
 80095f0:	08009601 	.word	0x08009601
 80095f4:	08009601 	.word	0x08009601
 80095f8:	080096a9 	.word	0x080096a9
 80095fc:	0800965d 	.word	0x0800965d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	18d1      	adds	r1, r2, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800960c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800960e:	f7ff ff67 	bl	80094e0 <prvInsertTimerInActiveList>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d047      	beq.n	80096a8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800961e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d13f      	bne.n	80096a8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	441a      	add	r2, r3
 8009630:	2300      	movs	r3, #0
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	2300      	movs	r3, #0
 8009636:	2100      	movs	r1, #0
 8009638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800963a:	f7ff fe1f 	bl	800927c <xTimerGenericCommand>
 800963e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d130      	bne.n	80096a8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	61bb      	str	r3, [r7, #24]
}
 8009658:	bf00      	nop
 800965a:	e7fe      	b.n	800965a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10a      	bne.n	8009680 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	617b      	str	r3, [r7, #20]
}
 800967c:	bf00      	nop
 800967e:	e7fe      	b.n	800967e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009682:	699a      	ldr	r2, [r3, #24]
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	18d1      	adds	r1, r2, r3
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800968c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800968e:	f7ff ff27 	bl	80094e0 <prvInsertTimerInActiveList>
					break;
 8009692:	e009      	b.n	80096a8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d104      	bne.n	80096a8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800969e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a0:	f000 fb68 	bl	8009d74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096a4:	e000      	b.n	80096a8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80096a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096a8:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <prvProcessReceivedCommands+0x164>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	1d39      	adds	r1, r7, #4
 80096ae:	2200      	movs	r2, #0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fe f931 	bl	8007918 <xQueueReceive>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f47f af57 	bne.w	800956c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80096be:	bf00      	nop
 80096c0:	bf00      	nop
 80096c2:	3730      	adds	r7, #48	; 0x30
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	20000f0c 	.word	0x20000f0c

080096cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096d2:	e045      	b.n	8009760 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096d4:	4b2c      	ldr	r3, [pc, #176]	; (8009788 <prvSwitchTimerLists+0xbc>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096de:	4b2a      	ldr	r3, [pc, #168]	; (8009788 <prvSwitchTimerLists+0xbc>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3304      	adds	r3, #4
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fd fd1b 	bl	8007128 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d12e      	bne.n	8009760 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	4413      	add	r3, r2
 800970a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	429a      	cmp	r2, r3
 8009712:	d90e      	bls.n	8009732 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009720:	4b19      	ldr	r3, [pc, #100]	; (8009788 <prvSwitchTimerLists+0xbc>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3304      	adds	r3, #4
 8009728:	4619      	mov	r1, r3
 800972a:	4610      	mov	r0, r2
 800972c:	f7fd fcc4 	bl	80070b8 <vListInsert>
 8009730:	e016      	b.n	8009760 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009732:	2300      	movs	r3, #0
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	2300      	movs	r3, #0
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	2100      	movs	r1, #0
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f7ff fd9d 	bl	800927c <xTimerGenericCommand>
 8009742:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <prvSwitchTimerLists+0x94>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	603b      	str	r3, [r7, #0]
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009760:	4b09      	ldr	r3, [pc, #36]	; (8009788 <prvSwitchTimerLists+0xbc>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1b4      	bne.n	80096d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800976a:	4b07      	ldr	r3, [pc, #28]	; (8009788 <prvSwitchTimerLists+0xbc>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009770:	4b06      	ldr	r3, [pc, #24]	; (800978c <prvSwitchTimerLists+0xc0>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a04      	ldr	r2, [pc, #16]	; (8009788 <prvSwitchTimerLists+0xbc>)
 8009776:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009778:	4a04      	ldr	r2, [pc, #16]	; (800978c <prvSwitchTimerLists+0xc0>)
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	6013      	str	r3, [r2, #0]
}
 800977e:	bf00      	nop
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20000f04 	.word	0x20000f04
 800978c:	20000f08 	.word	0x20000f08

08009790 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009796:	f000 f929 	bl	80099ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800979a:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <prvCheckForValidListAndQueue+0x60>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d120      	bne.n	80097e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097a2:	4814      	ldr	r0, [pc, #80]	; (80097f4 <prvCheckForValidListAndQueue+0x64>)
 80097a4:	f7fd fc3a 	bl	800701c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097a8:	4813      	ldr	r0, [pc, #76]	; (80097f8 <prvCheckForValidListAndQueue+0x68>)
 80097aa:	f7fd fc37 	bl	800701c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097ae:	4b13      	ldr	r3, [pc, #76]	; (80097fc <prvCheckForValidListAndQueue+0x6c>)
 80097b0:	4a10      	ldr	r2, [pc, #64]	; (80097f4 <prvCheckForValidListAndQueue+0x64>)
 80097b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097b4:	4b12      	ldr	r3, [pc, #72]	; (8009800 <prvCheckForValidListAndQueue+0x70>)
 80097b6:	4a10      	ldr	r2, [pc, #64]	; (80097f8 <prvCheckForValidListAndQueue+0x68>)
 80097b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097ba:	2300      	movs	r3, #0
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	4b11      	ldr	r3, [pc, #68]	; (8009804 <prvCheckForValidListAndQueue+0x74>)
 80097c0:	4a11      	ldr	r2, [pc, #68]	; (8009808 <prvCheckForValidListAndQueue+0x78>)
 80097c2:	2110      	movs	r1, #16
 80097c4:	200a      	movs	r0, #10
 80097c6:	f7fd fd41 	bl	800724c <xQueueGenericCreateStatic>
 80097ca:	4603      	mov	r3, r0
 80097cc:	4a08      	ldr	r2, [pc, #32]	; (80097f0 <prvCheckForValidListAndQueue+0x60>)
 80097ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097d0:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <prvCheckForValidListAndQueue+0x60>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097d8:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <prvCheckForValidListAndQueue+0x60>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	490b      	ldr	r1, [pc, #44]	; (800980c <prvCheckForValidListAndQueue+0x7c>)
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fc50 	bl	8008084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097e4:	f000 f932 	bl	8009a4c <vPortExitCritical>
}
 80097e8:	bf00      	nop
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000f0c 	.word	0x20000f0c
 80097f4:	20000edc 	.word	0x20000edc
 80097f8:	20000ef0 	.word	0x20000ef0
 80097fc:	20000f04 	.word	0x20000f04
 8009800:	20000f08 	.word	0x20000f08
 8009804:	20000fb8 	.word	0x20000fb8
 8009808:	20000f18 	.word	0x20000f18
 800980c:	0800bb84 	.word	0x0800bb84

08009810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3b04      	subs	r3, #4
 8009820:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3b04      	subs	r3, #4
 800982e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	f023 0201 	bic.w	r2, r3, #1
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3b04      	subs	r3, #4
 800983e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009840:	4a08      	ldr	r2, [pc, #32]	; (8009864 <pxPortInitialiseStack+0x54>)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3b14      	subs	r3, #20
 800984a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3b20      	subs	r3, #32
 8009856:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009858:	68fb      	ldr	r3, [r7, #12]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr
 8009864:	08009869 	.word	0x08009869

08009868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800986e:	2300      	movs	r3, #0
 8009870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009872:	4b12      	ldr	r3, [pc, #72]	; (80098bc <prvTaskExitError+0x54>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	d00a      	beq.n	8009892 <prvTaskExitError+0x2a>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	60fb      	str	r3, [r7, #12]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <prvTaskExitError+0x28>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	60bb      	str	r3, [r7, #8]
}
 80098a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098a6:	bf00      	nop
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0fc      	beq.n	80098a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098ae:	bf00      	nop
 80098b0:	bf00      	nop
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bc80      	pop	{r7}
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	20000018 	.word	0x20000018

080098c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <pxCurrentTCBConst2>)
 80098c2:	6819      	ldr	r1, [r3, #0]
 80098c4:	6808      	ldr	r0, [r1, #0]
 80098c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80098ca:	f380 8809 	msr	PSP, r0
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f04f 0000 	mov.w	r0, #0
 80098d6:	f380 8811 	msr	BASEPRI, r0
 80098da:	f04e 0e0d 	orr.w	lr, lr, #13
 80098de:	4770      	bx	lr

080098e0 <pxCurrentTCBConst2>:
 80098e0:	200009dc 	.word	0x200009dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop

080098e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80098e8:	4806      	ldr	r0, [pc, #24]	; (8009904 <prvPortStartFirstTask+0x1c>)
 80098ea:	6800      	ldr	r0, [r0, #0]
 80098ec:	6800      	ldr	r0, [r0, #0]
 80098ee:	f380 8808 	msr	MSP, r0
 80098f2:	b662      	cpsie	i
 80098f4:	b661      	cpsie	f
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	df00      	svc	0
 8009900:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009902:	bf00      	nop
 8009904:	e000ed08 	.word	0xe000ed08

08009908 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800990e:	4b32      	ldr	r3, [pc, #200]	; (80099d8 <xPortStartScheduler+0xd0>)
 8009910:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	22ff      	movs	r2, #255	; 0xff
 800991e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009928:	78fb      	ldrb	r3, [r7, #3]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009930:	b2da      	uxtb	r2, r3
 8009932:	4b2a      	ldr	r3, [pc, #168]	; (80099dc <xPortStartScheduler+0xd4>)
 8009934:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009936:	4b2a      	ldr	r3, [pc, #168]	; (80099e0 <xPortStartScheduler+0xd8>)
 8009938:	2207      	movs	r2, #7
 800993a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800993c:	e009      	b.n	8009952 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800993e:	4b28      	ldr	r3, [pc, #160]	; (80099e0 <xPortStartScheduler+0xd8>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3b01      	subs	r3, #1
 8009944:	4a26      	ldr	r2, [pc, #152]	; (80099e0 <xPortStartScheduler+0xd8>)
 8009946:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	b2db      	uxtb	r3, r3
 800994c:	005b      	lsls	r3, r3, #1
 800994e:	b2db      	uxtb	r3, r3
 8009950:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009952:	78fb      	ldrb	r3, [r7, #3]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995a:	2b80      	cmp	r3, #128	; 0x80
 800995c:	d0ef      	beq.n	800993e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800995e:	4b20      	ldr	r3, [pc, #128]	; (80099e0 <xPortStartScheduler+0xd8>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f1c3 0307 	rsb	r3, r3, #7
 8009966:	2b04      	cmp	r3, #4
 8009968:	d00a      	beq.n	8009980 <xPortStartScheduler+0x78>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	60bb      	str	r3, [r7, #8]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009980:	4b17      	ldr	r3, [pc, #92]	; (80099e0 <xPortStartScheduler+0xd8>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	021b      	lsls	r3, r3, #8
 8009986:	4a16      	ldr	r2, [pc, #88]	; (80099e0 <xPortStartScheduler+0xd8>)
 8009988:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800998a:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <xPortStartScheduler+0xd8>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009992:	4a13      	ldr	r2, [pc, #76]	; (80099e0 <xPortStartScheduler+0xd8>)
 8009994:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	b2da      	uxtb	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800999e:	4b11      	ldr	r3, [pc, #68]	; (80099e4 <xPortStartScheduler+0xdc>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a10      	ldr	r2, [pc, #64]	; (80099e4 <xPortStartScheduler+0xdc>)
 80099a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099aa:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <xPortStartScheduler+0xdc>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a0d      	ldr	r2, [pc, #52]	; (80099e4 <xPortStartScheduler+0xdc>)
 80099b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099b6:	f000 f8b9 	bl	8009b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099ba:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <xPortStartScheduler+0xe0>)
 80099bc:	2200      	movs	r2, #0
 80099be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099c0:	f7ff ff92 	bl	80098e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099c4:	f7fe ffb0 	bl	8008928 <vTaskSwitchContext>
	prvTaskExitError();
 80099c8:	f7ff ff4e 	bl	8009868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	e000e400 	.word	0xe000e400
 80099dc:	20001008 	.word	0x20001008
 80099e0:	2000100c 	.word	0x2000100c
 80099e4:	e000ed20 	.word	0xe000ed20
 80099e8:	20000018 	.word	0x20000018

080099ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	607b      	str	r3, [r7, #4]
}
 8009a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a06:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <vPortEnterCritical+0x58>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	4a0d      	ldr	r2, [pc, #52]	; (8009a44 <vPortEnterCritical+0x58>)
 8009a0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a10:	4b0c      	ldr	r3, [pc, #48]	; (8009a44 <vPortEnterCritical+0x58>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d10f      	bne.n	8009a38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a18:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <vPortEnterCritical+0x5c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	603b      	str	r3, [r7, #0]
}
 8009a34:	bf00      	nop
 8009a36:	e7fe      	b.n	8009a36 <vPortEnterCritical+0x4a>
	}
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bc80      	pop	{r7}
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	20000018 	.word	0x20000018
 8009a48:	e000ed04 	.word	0xe000ed04

08009a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a52:	4b11      	ldr	r3, [pc, #68]	; (8009a98 <vPortExitCritical+0x4c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10a      	bne.n	8009a70 <vPortExitCritical+0x24>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	607b      	str	r3, [r7, #4]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a70:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <vPortExitCritical+0x4c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	4a08      	ldr	r2, [pc, #32]	; (8009a98 <vPortExitCritical+0x4c>)
 8009a78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a7a:	4b07      	ldr	r3, [pc, #28]	; (8009a98 <vPortExitCritical+0x4c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d105      	bne.n	8009a8e <vPortExitCritical+0x42>
 8009a82:	2300      	movs	r3, #0
 8009a84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	f383 8811 	msr	BASEPRI, r3
}
 8009a8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a8e:	bf00      	nop
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bc80      	pop	{r7}
 8009a96:	4770      	bx	lr
 8009a98:	20000018 	.word	0x20000018
 8009a9c:	00000000 	.word	0x00000000

08009aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009aa0:	f3ef 8009 	mrs	r0, PSP
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	4b0d      	ldr	r3, [pc, #52]	; (8009ae0 <pxCurrentTCBConst>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009ab0:	6010      	str	r0, [r2, #0]
 8009ab2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009ab6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009aba:	f380 8811 	msr	BASEPRI, r0
 8009abe:	f7fe ff33 	bl	8008928 <vTaskSwitchContext>
 8009ac2:	f04f 0000 	mov.w	r0, #0
 8009ac6:	f380 8811 	msr	BASEPRI, r0
 8009aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009ace:	6819      	ldr	r1, [r3, #0]
 8009ad0:	6808      	ldr	r0, [r1, #0]
 8009ad2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009ad6:	f380 8809 	msr	PSP, r0
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	4770      	bx	lr

08009ae0 <pxCurrentTCBConst>:
 8009ae0:	200009dc 	.word	0x200009dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop

08009ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	607b      	str	r3, [r7, #4]
}
 8009b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b02:	f7fe fe53 	bl	80087ac <xTaskIncrementTick>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b0c:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <SysTick_Handler+0x40>)
 8009b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	2300      	movs	r3, #0
 8009b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f383 8811 	msr	BASEPRI, r3
}
 8009b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	e000ed04 	.word	0xe000ed04

08009b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b30:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <vPortSetupTimerInterrupt+0x30>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b36:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <vPortSetupTimerInterrupt+0x34>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b3c:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <vPortSetupTimerInterrupt+0x38>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a09      	ldr	r2, [pc, #36]	; (8009b68 <vPortSetupTimerInterrupt+0x3c>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	099b      	lsrs	r3, r3, #6
 8009b48:	4a08      	ldr	r2, [pc, #32]	; (8009b6c <vPortSetupTimerInterrupt+0x40>)
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b4e:	4b03      	ldr	r3, [pc, #12]	; (8009b5c <vPortSetupTimerInterrupt+0x30>)
 8009b50:	2207      	movs	r2, #7
 8009b52:	601a      	str	r2, [r3, #0]
}
 8009b54:	bf00      	nop
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr
 8009b5c:	e000e010 	.word	0xe000e010
 8009b60:	e000e018 	.word	0xe000e018
 8009b64:	2000000c 	.word	0x2000000c
 8009b68:	10624dd3 	.word	0x10624dd3
 8009b6c:	e000e014 	.word	0xe000e014

08009b70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b76:	f3ef 8305 	mrs	r3, IPSR
 8009b7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b0f      	cmp	r3, #15
 8009b80:	d914      	bls.n	8009bac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b82:	4a16      	ldr	r2, [pc, #88]	; (8009bdc <vPortValidateInterruptPriority+0x6c>)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	4413      	add	r3, r2
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b8c:	4b14      	ldr	r3, [pc, #80]	; (8009be0 <vPortValidateInterruptPriority+0x70>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	7afa      	ldrb	r2, [r7, #11]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d20a      	bcs.n	8009bac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	607b      	str	r3, [r7, #4]
}
 8009ba8:	bf00      	nop
 8009baa:	e7fe      	b.n	8009baa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bac:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <vPortValidateInterruptPriority+0x74>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bb4:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <vPortValidateInterruptPriority+0x78>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d90a      	bls.n	8009bd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	603b      	str	r3, [r7, #0]
}
 8009bce:	bf00      	nop
 8009bd0:	e7fe      	b.n	8009bd0 <vPortValidateInterruptPriority+0x60>
	}
 8009bd2:	bf00      	nop
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bc80      	pop	{r7}
 8009bda:	4770      	bx	lr
 8009bdc:	e000e3f0 	.word	0xe000e3f0
 8009be0:	20001008 	.word	0x20001008
 8009be4:	e000ed0c 	.word	0xe000ed0c
 8009be8:	2000100c 	.word	0x2000100c

08009bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08a      	sub	sp, #40	; 0x28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bf8:	f7fe fd1e 	bl	8008638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bfc:	4b58      	ldr	r3, [pc, #352]	; (8009d60 <pvPortMalloc+0x174>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c04:	f000 f910 	bl	8009e28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c08:	4b56      	ldr	r3, [pc, #344]	; (8009d64 <pvPortMalloc+0x178>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f040 808e 	bne.w	8009d32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01d      	beq.n	8009c58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c1c:	2208      	movs	r2, #8
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4413      	add	r3, r2
 8009c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d014      	beq.n	8009c58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f023 0307 	bic.w	r3, r3, #7
 8009c34:	3308      	adds	r3, #8
 8009c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00a      	beq.n	8009c58 <pvPortMalloc+0x6c>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	617b      	str	r3, [r7, #20]
}
 8009c54:	bf00      	nop
 8009c56:	e7fe      	b.n	8009c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d069      	beq.n	8009d32 <pvPortMalloc+0x146>
 8009c5e:	4b42      	ldr	r3, [pc, #264]	; (8009d68 <pvPortMalloc+0x17c>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d864      	bhi.n	8009d32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c68:	4b40      	ldr	r3, [pc, #256]	; (8009d6c <pvPortMalloc+0x180>)
 8009c6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c6c:	4b3f      	ldr	r3, [pc, #252]	; (8009d6c <pvPortMalloc+0x180>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c72:	e004      	b.n	8009c7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d903      	bls.n	8009c90 <pvPortMalloc+0xa4>
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1f1      	bne.n	8009c74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c90:	4b33      	ldr	r3, [pc, #204]	; (8009d60 <pvPortMalloc+0x174>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d04b      	beq.n	8009d32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2208      	movs	r2, #8
 8009ca0:	4413      	add	r3, r2
 8009ca2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	1ad2      	subs	r2, r2, r3
 8009cb4:	2308      	movs	r3, #8
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d91f      	bls.n	8009cfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00a      	beq.n	8009ce4 <pvPortMalloc+0xf8>
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	613b      	str	r3, [r7, #16]
}
 8009ce0:	bf00      	nop
 8009ce2:	e7fe      	b.n	8009ce2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	1ad2      	subs	r2, r2, r3
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cf6:	69b8      	ldr	r0, [r7, #24]
 8009cf8:	f000 f8f8 	bl	8009eec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cfc:	4b1a      	ldr	r3, [pc, #104]	; (8009d68 <pvPortMalloc+0x17c>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	4a18      	ldr	r2, [pc, #96]	; (8009d68 <pvPortMalloc+0x17c>)
 8009d08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d0a:	4b17      	ldr	r3, [pc, #92]	; (8009d68 <pvPortMalloc+0x17c>)
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	4b18      	ldr	r3, [pc, #96]	; (8009d70 <pvPortMalloc+0x184>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d203      	bcs.n	8009d1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d16:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <pvPortMalloc+0x17c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a15      	ldr	r2, [pc, #84]	; (8009d70 <pvPortMalloc+0x184>)
 8009d1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	4b10      	ldr	r3, [pc, #64]	; (8009d64 <pvPortMalloc+0x178>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	431a      	orrs	r2, r3
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	2200      	movs	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d32:	f7fe fc8f 	bl	8008654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	f003 0307 	and.w	r3, r3, #7
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00a      	beq.n	8009d56 <pvPortMalloc+0x16a>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	60fb      	str	r3, [r7, #12]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <pvPortMalloc+0x168>
	return pvReturn;
 8009d56:	69fb      	ldr	r3, [r7, #28]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3728      	adds	r7, #40	; 0x28
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	20001c18 	.word	0x20001c18
 8009d64:	20001c24 	.word	0x20001c24
 8009d68:	20001c1c 	.word	0x20001c1c
 8009d6c:	20001c10 	.word	0x20001c10
 8009d70:	20001c20 	.word	0x20001c20

08009d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d048      	beq.n	8009e18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d86:	2308      	movs	r3, #8
 8009d88:	425b      	negs	r3, r3
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	4b21      	ldr	r3, [pc, #132]	; (8009e20 <vPortFree+0xac>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10a      	bne.n	8009db8 <vPortFree+0x44>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	60fb      	str	r3, [r7, #12]
}
 8009db4:	bf00      	nop
 8009db6:	e7fe      	b.n	8009db6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00a      	beq.n	8009dd6 <vPortFree+0x62>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	60bb      	str	r3, [r7, #8]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	4b11      	ldr	r3, [pc, #68]	; (8009e20 <vPortFree+0xac>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4013      	ands	r3, r2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d019      	beq.n	8009e18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d115      	bne.n	8009e18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	685a      	ldr	r2, [r3, #4]
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <vPortFree+0xac>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	43db      	mvns	r3, r3
 8009df6:	401a      	ands	r2, r3
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009dfc:	f7fe fc1c 	bl	8008638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	4b07      	ldr	r3, [pc, #28]	; (8009e24 <vPortFree+0xb0>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4413      	add	r3, r2
 8009e0a:	4a06      	ldr	r2, [pc, #24]	; (8009e24 <vPortFree+0xb0>)
 8009e0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e0e:	6938      	ldr	r0, [r7, #16]
 8009e10:	f000 f86c 	bl	8009eec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e14:	f7fe fc1e 	bl	8008654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e18:	bf00      	nop
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20001c24 	.word	0x20001c24
 8009e24:	20001c1c 	.word	0x20001c1c

08009e28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009e32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e34:	4b27      	ldr	r3, [pc, #156]	; (8009ed4 <prvHeapInit+0xac>)
 8009e36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00c      	beq.n	8009e5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3307      	adds	r3, #7
 8009e46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f023 0307 	bic.w	r3, r3, #7
 8009e4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	4a1f      	ldr	r2, [pc, #124]	; (8009ed4 <prvHeapInit+0xac>)
 8009e58:	4413      	add	r3, r2
 8009e5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e60:	4a1d      	ldr	r2, [pc, #116]	; (8009ed8 <prvHeapInit+0xb0>)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e66:	4b1c      	ldr	r3, [pc, #112]	; (8009ed8 <prvHeapInit+0xb0>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	4413      	add	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e74:	2208      	movs	r2, #8
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	1a9b      	subs	r3, r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0307 	bic.w	r3, r3, #7
 8009e82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	4a15      	ldr	r2, [pc, #84]	; (8009edc <prvHeapInit+0xb4>)
 8009e88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e8a:	4b14      	ldr	r3, [pc, #80]	; (8009edc <prvHeapInit+0xb4>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e92:	4b12      	ldr	r3, [pc, #72]	; (8009edc <prvHeapInit+0xb4>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	1ad2      	subs	r2, r2, r3
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ea8:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <prvHeapInit+0xb4>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	4a0a      	ldr	r2, [pc, #40]	; (8009ee0 <prvHeapInit+0xb8>)
 8009eb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	4a09      	ldr	r2, [pc, #36]	; (8009ee4 <prvHeapInit+0xbc>)
 8009ebe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ec0:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <prvHeapInit+0xc0>)
 8009ec2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ec6:	601a      	str	r2, [r3, #0]
}
 8009ec8:	bf00      	nop
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bc80      	pop	{r7}
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20001010 	.word	0x20001010
 8009ed8:	20001c10 	.word	0x20001c10
 8009edc:	20001c18 	.word	0x20001c18
 8009ee0:	20001c20 	.word	0x20001c20
 8009ee4:	20001c1c 	.word	0x20001c1c
 8009ee8:	20001c24 	.word	0x20001c24

08009eec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ef4:	4b27      	ldr	r3, [pc, #156]	; (8009f94 <prvInsertBlockIntoFreeList+0xa8>)
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	e002      	b.n	8009f00 <prvInsertBlockIntoFreeList+0x14>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d8f7      	bhi.n	8009efa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	4413      	add	r3, r2
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d108      	bne.n	8009f2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	441a      	add	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	441a      	add	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d118      	bne.n	8009f74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	4b14      	ldr	r3, [pc, #80]	; (8009f98 <prvInsertBlockIntoFreeList+0xac>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d00d      	beq.n	8009f6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	441a      	add	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	e008      	b.n	8009f7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f6a:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <prvInsertBlockIntoFreeList+0xac>)
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	e003      	b.n	8009f7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d002      	beq.n	8009f8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bc80      	pop	{r7}
 8009f92:	4770      	bx	lr
 8009f94:	20001c10 	.word	0x20001c10
 8009f98:	20001c18 	.word	0x20001c18

08009f9c <memset>:
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	4402      	add	r2, r0
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d100      	bne.n	8009fa6 <memset+0xa>
 8009fa4:	4770      	bx	lr
 8009fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8009faa:	e7f9      	b.n	8009fa0 <memset+0x4>

08009fac <_reclaim_reent>:
 8009fac:	4b29      	ldr	r3, [pc, #164]	; (800a054 <_reclaim_reent+0xa8>)
 8009fae:	b570      	push	{r4, r5, r6, lr}
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	4283      	cmp	r3, r0
 8009fb6:	d04b      	beq.n	800a050 <_reclaim_reent+0xa4>
 8009fb8:	69c3      	ldr	r3, [r0, #28]
 8009fba:	b143      	cbz	r3, 8009fce <_reclaim_reent+0x22>
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d144      	bne.n	800a04c <_reclaim_reent+0xa0>
 8009fc2:	69e3      	ldr	r3, [r4, #28]
 8009fc4:	6819      	ldr	r1, [r3, #0]
 8009fc6:	b111      	cbz	r1, 8009fce <_reclaim_reent+0x22>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 f87f 	bl	800a0cc <_free_r>
 8009fce:	6961      	ldr	r1, [r4, #20]
 8009fd0:	b111      	cbz	r1, 8009fd8 <_reclaim_reent+0x2c>
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 f87a 	bl	800a0cc <_free_r>
 8009fd8:	69e1      	ldr	r1, [r4, #28]
 8009fda:	b111      	cbz	r1, 8009fe2 <_reclaim_reent+0x36>
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 f875 	bl	800a0cc <_free_r>
 8009fe2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009fe4:	b111      	cbz	r1, 8009fec <_reclaim_reent+0x40>
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 f870 	bl	800a0cc <_free_r>
 8009fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fee:	b111      	cbz	r1, 8009ff6 <_reclaim_reent+0x4a>
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 f86b 	bl	800a0cc <_free_r>
 8009ff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ff8:	b111      	cbz	r1, 800a000 <_reclaim_reent+0x54>
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 f866 	bl	800a0cc <_free_r>
 800a000:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a002:	b111      	cbz	r1, 800a00a <_reclaim_reent+0x5e>
 800a004:	4620      	mov	r0, r4
 800a006:	f000 f861 	bl	800a0cc <_free_r>
 800a00a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a00c:	b111      	cbz	r1, 800a014 <_reclaim_reent+0x68>
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 f85c 	bl	800a0cc <_free_r>
 800a014:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a016:	b111      	cbz	r1, 800a01e <_reclaim_reent+0x72>
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 f857 	bl	800a0cc <_free_r>
 800a01e:	6a23      	ldr	r3, [r4, #32]
 800a020:	b1b3      	cbz	r3, 800a050 <_reclaim_reent+0xa4>
 800a022:	4620      	mov	r0, r4
 800a024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a028:	4718      	bx	r3
 800a02a:	5949      	ldr	r1, [r1, r5]
 800a02c:	b941      	cbnz	r1, 800a040 <_reclaim_reent+0x94>
 800a02e:	3504      	adds	r5, #4
 800a030:	69e3      	ldr	r3, [r4, #28]
 800a032:	2d80      	cmp	r5, #128	; 0x80
 800a034:	68d9      	ldr	r1, [r3, #12]
 800a036:	d1f8      	bne.n	800a02a <_reclaim_reent+0x7e>
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 f847 	bl	800a0cc <_free_r>
 800a03e:	e7c0      	b.n	8009fc2 <_reclaim_reent+0x16>
 800a040:	680e      	ldr	r6, [r1, #0]
 800a042:	4620      	mov	r0, r4
 800a044:	f000 f842 	bl	800a0cc <_free_r>
 800a048:	4631      	mov	r1, r6
 800a04a:	e7ef      	b.n	800a02c <_reclaim_reent+0x80>
 800a04c:	2500      	movs	r5, #0
 800a04e:	e7ef      	b.n	800a030 <_reclaim_reent+0x84>
 800a050:	bd70      	pop	{r4, r5, r6, pc}
 800a052:	bf00      	nop
 800a054:	20000068 	.word	0x20000068

0800a058 <__errno>:
 800a058:	4b01      	ldr	r3, [pc, #4]	; (800a060 <__errno+0x8>)
 800a05a:	6818      	ldr	r0, [r3, #0]
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	20000068 	.word	0x20000068

0800a064 <__libc_init_array>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	2600      	movs	r6, #0
 800a068:	4d0c      	ldr	r5, [pc, #48]	; (800a09c <__libc_init_array+0x38>)
 800a06a:	4c0d      	ldr	r4, [pc, #52]	; (800a0a0 <__libc_init_array+0x3c>)
 800a06c:	1b64      	subs	r4, r4, r5
 800a06e:	10a4      	asrs	r4, r4, #2
 800a070:	42a6      	cmp	r6, r4
 800a072:	d109      	bne.n	800a088 <__libc_init_array+0x24>
 800a074:	f001 fd4c 	bl	800bb10 <_init>
 800a078:	2600      	movs	r6, #0
 800a07a:	4d0a      	ldr	r5, [pc, #40]	; (800a0a4 <__libc_init_array+0x40>)
 800a07c:	4c0a      	ldr	r4, [pc, #40]	; (800a0a8 <__libc_init_array+0x44>)
 800a07e:	1b64      	subs	r4, r4, r5
 800a080:	10a4      	asrs	r4, r4, #2
 800a082:	42a6      	cmp	r6, r4
 800a084:	d105      	bne.n	800a092 <__libc_init_array+0x2e>
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	f855 3b04 	ldr.w	r3, [r5], #4
 800a08c:	4798      	blx	r3
 800a08e:	3601      	adds	r6, #1
 800a090:	e7ee      	b.n	800a070 <__libc_init_array+0xc>
 800a092:	f855 3b04 	ldr.w	r3, [r5], #4
 800a096:	4798      	blx	r3
 800a098:	3601      	adds	r6, #1
 800a09a:	e7f2      	b.n	800a082 <__libc_init_array+0x1e>
 800a09c:	0800be70 	.word	0x0800be70
 800a0a0:	0800be70 	.word	0x0800be70
 800a0a4:	0800be70 	.word	0x0800be70
 800a0a8:	0800be74 	.word	0x0800be74

0800a0ac <__retarget_lock_acquire_recursive>:
 800a0ac:	4770      	bx	lr

0800a0ae <__retarget_lock_release_recursive>:
 800a0ae:	4770      	bx	lr

0800a0b0 <memcpy>:
 800a0b0:	440a      	add	r2, r1
 800a0b2:	4291      	cmp	r1, r2
 800a0b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0b8:	d100      	bne.n	800a0bc <memcpy+0xc>
 800a0ba:	4770      	bx	lr
 800a0bc:	b510      	push	{r4, lr}
 800a0be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0c2:	4291      	cmp	r1, r2
 800a0c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0c8:	d1f9      	bne.n	800a0be <memcpy+0xe>
 800a0ca:	bd10      	pop	{r4, pc}

0800a0cc <_free_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	d040      	beq.n	800a156 <_free_r+0x8a>
 800a0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0d8:	1f0c      	subs	r4, r1, #4
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	bfb8      	it	lt
 800a0de:	18e4      	addlt	r4, r4, r3
 800a0e0:	f000 f83c 	bl	800a15c <__malloc_lock>
 800a0e4:	4a1c      	ldr	r2, [pc, #112]	; (800a158 <_free_r+0x8c>)
 800a0e6:	6813      	ldr	r3, [r2, #0]
 800a0e8:	b933      	cbnz	r3, 800a0f8 <_free_r+0x2c>
 800a0ea:	6063      	str	r3, [r4, #4]
 800a0ec:	6014      	str	r4, [r2, #0]
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0f4:	f000 b838 	b.w	800a168 <__malloc_unlock>
 800a0f8:	42a3      	cmp	r3, r4
 800a0fa:	d908      	bls.n	800a10e <_free_r+0x42>
 800a0fc:	6820      	ldr	r0, [r4, #0]
 800a0fe:	1821      	adds	r1, r4, r0
 800a100:	428b      	cmp	r3, r1
 800a102:	bf01      	itttt	eq
 800a104:	6819      	ldreq	r1, [r3, #0]
 800a106:	685b      	ldreq	r3, [r3, #4]
 800a108:	1809      	addeq	r1, r1, r0
 800a10a:	6021      	streq	r1, [r4, #0]
 800a10c:	e7ed      	b.n	800a0ea <_free_r+0x1e>
 800a10e:	461a      	mov	r2, r3
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	b10b      	cbz	r3, 800a118 <_free_r+0x4c>
 800a114:	42a3      	cmp	r3, r4
 800a116:	d9fa      	bls.n	800a10e <_free_r+0x42>
 800a118:	6811      	ldr	r1, [r2, #0]
 800a11a:	1850      	adds	r0, r2, r1
 800a11c:	42a0      	cmp	r0, r4
 800a11e:	d10b      	bne.n	800a138 <_free_r+0x6c>
 800a120:	6820      	ldr	r0, [r4, #0]
 800a122:	4401      	add	r1, r0
 800a124:	1850      	adds	r0, r2, r1
 800a126:	4283      	cmp	r3, r0
 800a128:	6011      	str	r1, [r2, #0]
 800a12a:	d1e0      	bne.n	800a0ee <_free_r+0x22>
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	4408      	add	r0, r1
 800a132:	6010      	str	r0, [r2, #0]
 800a134:	6053      	str	r3, [r2, #4]
 800a136:	e7da      	b.n	800a0ee <_free_r+0x22>
 800a138:	d902      	bls.n	800a140 <_free_r+0x74>
 800a13a:	230c      	movs	r3, #12
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	e7d6      	b.n	800a0ee <_free_r+0x22>
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	1821      	adds	r1, r4, r0
 800a144:	428b      	cmp	r3, r1
 800a146:	bf01      	itttt	eq
 800a148:	6819      	ldreq	r1, [r3, #0]
 800a14a:	685b      	ldreq	r3, [r3, #4]
 800a14c:	1809      	addeq	r1, r1, r0
 800a14e:	6021      	streq	r1, [r4, #0]
 800a150:	6063      	str	r3, [r4, #4]
 800a152:	6054      	str	r4, [r2, #4]
 800a154:	e7cb      	b.n	800a0ee <_free_r+0x22>
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	20001d64 	.word	0x20001d64

0800a15c <__malloc_lock>:
 800a15c:	4801      	ldr	r0, [pc, #4]	; (800a164 <__malloc_lock+0x8>)
 800a15e:	f7ff bfa5 	b.w	800a0ac <__retarget_lock_acquire_recursive>
 800a162:	bf00      	nop
 800a164:	20001d60 	.word	0x20001d60

0800a168 <__malloc_unlock>:
 800a168:	4801      	ldr	r0, [pc, #4]	; (800a170 <__malloc_unlock+0x8>)
 800a16a:	f7ff bfa0 	b.w	800a0ae <__retarget_lock_release_recursive>
 800a16e:	bf00      	nop
 800a170:	20001d60 	.word	0x20001d60

0800a174 <atan2>:
 800a174:	f000 bb2c 	b.w	800a7d0 <__ieee754_atan2>

0800a178 <hypot>:
 800a178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a17c:	4680      	mov	r8, r0
 800a17e:	4689      	mov	r9, r1
 800a180:	4616      	mov	r6, r2
 800a182:	461f      	mov	r7, r3
 800a184:	f000 fbf2 	bl	800a96c <__ieee754_hypot>
 800a188:	4604      	mov	r4, r0
 800a18a:	460d      	mov	r5, r1
 800a18c:	f000 f8c8 	bl	800a320 <finite>
 800a190:	b978      	cbnz	r0, 800a1b2 <hypot+0x3a>
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f000 f8c3 	bl	800a320 <finite>
 800a19a:	b150      	cbz	r0, 800a1b2 <hypot+0x3a>
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f000 f8be 	bl	800a320 <finite>
 800a1a4:	b128      	cbz	r0, 800a1b2 <hypot+0x3a>
 800a1a6:	f7ff ff57 	bl	800a058 <__errno>
 800a1aa:	2322      	movs	r3, #34	; 0x22
 800a1ac:	2400      	movs	r4, #0
 800a1ae:	4d03      	ldr	r5, [pc, #12]	; (800a1bc <hypot+0x44>)
 800a1b0:	6003      	str	r3, [r0, #0]
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ba:	bf00      	nop
 800a1bc:	7ff00000 	.word	0x7ff00000

0800a1c0 <sqrt>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	460f      	mov	r7, r1
 800a1c6:	f000 f8b1 	bl	800a32c <__ieee754_sqrt>
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	463b      	mov	r3, r7
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	f7f6 fc11 	bl	80009fc <__aeabi_dcmpun>
 800a1da:	b990      	cbnz	r0, 800a202 <sqrt+0x42>
 800a1dc:	2200      	movs	r2, #0
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	f7f6 fbe2 	bl	80009ac <__aeabi_dcmplt>
 800a1e8:	b158      	cbz	r0, 800a202 <sqrt+0x42>
 800a1ea:	f7ff ff35 	bl	800a058 <__errno>
 800a1ee:	2321      	movs	r3, #33	; 0x21
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	6003      	str	r3, [r0, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f7f6 fa8f 	bl	800071c <__aeabi_ddiv>
 800a1fe:	4604      	mov	r4, r0
 800a200:	460d      	mov	r5, r1
 800a202:	4620      	mov	r0, r4
 800a204:	4629      	mov	r1, r5
 800a206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a208 <cos>:
 800a208:	b530      	push	{r4, r5, lr}
 800a20a:	4a20      	ldr	r2, [pc, #128]	; (800a28c <cos+0x84>)
 800a20c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a210:	4293      	cmp	r3, r2
 800a212:	b087      	sub	sp, #28
 800a214:	dc06      	bgt.n	800a224 <cos+0x1c>
 800a216:	2200      	movs	r2, #0
 800a218:	2300      	movs	r3, #0
 800a21a:	b007      	add	sp, #28
 800a21c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a220:	f000 b95e 	b.w	800a4e0 <__kernel_cos>
 800a224:	4a1a      	ldr	r2, [pc, #104]	; (800a290 <cos+0x88>)
 800a226:	4293      	cmp	r3, r2
 800a228:	dd05      	ble.n	800a236 <cos+0x2e>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	f7f5 ff93 	bl	8000158 <__aeabi_dsub>
 800a232:	b007      	add	sp, #28
 800a234:	bd30      	pop	{r4, r5, pc}
 800a236:	aa02      	add	r2, sp, #8
 800a238:	f000 fcaa 	bl	800ab90 <__ieee754_rem_pio2>
 800a23c:	f000 0003 	and.w	r0, r0, #3
 800a240:	2801      	cmp	r0, #1
 800a242:	d009      	beq.n	800a258 <cos+0x50>
 800a244:	2802      	cmp	r0, #2
 800a246:	d011      	beq.n	800a26c <cos+0x64>
 800a248:	b9b8      	cbnz	r0, 800a27a <cos+0x72>
 800a24a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a252:	f000 f945 	bl	800a4e0 <__kernel_cos>
 800a256:	e7ec      	b.n	800a232 <cos+0x2a>
 800a258:	9000      	str	r0, [sp, #0]
 800a25a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a262:	f000 f9fd 	bl	800a660 <__kernel_sin>
 800a266:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a26a:	e7e2      	b.n	800a232 <cos+0x2a>
 800a26c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a274:	f000 f934 	bl	800a4e0 <__kernel_cos>
 800a278:	e7f5      	b.n	800a266 <cos+0x5e>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a286:	f000 f9eb 	bl	800a660 <__kernel_sin>
 800a28a:	e7d2      	b.n	800a232 <cos+0x2a>
 800a28c:	3fe921fb 	.word	0x3fe921fb
 800a290:	7fefffff 	.word	0x7fefffff

0800a294 <sin>:
 800a294:	b530      	push	{r4, r5, lr}
 800a296:	4a20      	ldr	r2, [pc, #128]	; (800a318 <sin+0x84>)
 800a298:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a29c:	4293      	cmp	r3, r2
 800a29e:	b087      	sub	sp, #28
 800a2a0:	dc06      	bgt.n	800a2b0 <sin+0x1c>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f000 f9d9 	bl	800a660 <__kernel_sin>
 800a2ae:	e006      	b.n	800a2be <sin+0x2a>
 800a2b0:	4a1a      	ldr	r2, [pc, #104]	; (800a31c <sin+0x88>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	dd05      	ble.n	800a2c2 <sin+0x2e>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	f7f5 ff4d 	bl	8000158 <__aeabi_dsub>
 800a2be:	b007      	add	sp, #28
 800a2c0:	bd30      	pop	{r4, r5, pc}
 800a2c2:	aa02      	add	r2, sp, #8
 800a2c4:	f000 fc64 	bl	800ab90 <__ieee754_rem_pio2>
 800a2c8:	f000 0003 	and.w	r0, r0, #3
 800a2cc:	2801      	cmp	r0, #1
 800a2ce:	d009      	beq.n	800a2e4 <sin+0x50>
 800a2d0:	2802      	cmp	r0, #2
 800a2d2:	d00e      	beq.n	800a2f2 <sin+0x5e>
 800a2d4:	b9c0      	cbnz	r0, 800a308 <sin+0x74>
 800a2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2da:	2301      	movs	r3, #1
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2e2:	e7e2      	b.n	800a2aa <sin+0x16>
 800a2e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ec:	f000 f8f8 	bl	800a4e0 <__kernel_cos>
 800a2f0:	e7e5      	b.n	800a2be <sin+0x2a>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2fe:	f000 f9af 	bl	800a660 <__kernel_sin>
 800a302:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a306:	e7da      	b.n	800a2be <sin+0x2a>
 800a308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a310:	f000 f8e6 	bl	800a4e0 <__kernel_cos>
 800a314:	e7f5      	b.n	800a302 <sin+0x6e>
 800a316:	bf00      	nop
 800a318:	3fe921fb 	.word	0x3fe921fb
 800a31c:	7fefffff 	.word	0x7fefffff

0800a320 <finite>:
 800a320:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a324:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a328:	0fc0      	lsrs	r0, r0, #31
 800a32a:	4770      	bx	lr

0800a32c <__ieee754_sqrt>:
 800a32c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800a4d0 <__ieee754_sqrt+0x1a4>
 800a330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a334:	ea3c 0c01 	bics.w	ip, ip, r1
 800a338:	460b      	mov	r3, r1
 800a33a:	4606      	mov	r6, r0
 800a33c:	460d      	mov	r5, r1
 800a33e:	460a      	mov	r2, r1
 800a340:	4604      	mov	r4, r0
 800a342:	d10e      	bne.n	800a362 <__ieee754_sqrt+0x36>
 800a344:	4602      	mov	r2, r0
 800a346:	f7f6 f8bf 	bl	80004c8 <__aeabi_dmul>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4630      	mov	r0, r6
 800a350:	4629      	mov	r1, r5
 800a352:	f7f5 ff03 	bl	800015c <__adddf3>
 800a356:	4606      	mov	r6, r0
 800a358:	460d      	mov	r5, r1
 800a35a:	4630      	mov	r0, r6
 800a35c:	4629      	mov	r1, r5
 800a35e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a362:	2900      	cmp	r1, #0
 800a364:	dc0d      	bgt.n	800a382 <__ieee754_sqrt+0x56>
 800a366:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a36a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a36e:	d0f4      	beq.n	800a35a <__ieee754_sqrt+0x2e>
 800a370:	b139      	cbz	r1, 800a382 <__ieee754_sqrt+0x56>
 800a372:	4602      	mov	r2, r0
 800a374:	f7f5 fef0 	bl	8000158 <__aeabi_dsub>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	f7f6 f9ce 	bl	800071c <__aeabi_ddiv>
 800a380:	e7e9      	b.n	800a356 <__ieee754_sqrt+0x2a>
 800a382:	1512      	asrs	r2, r2, #20
 800a384:	f000 8089 	beq.w	800a49a <__ieee754_sqrt+0x16e>
 800a388:	2500      	movs	r5, #0
 800a38a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a38e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a396:	07d2      	lsls	r2, r2, #31
 800a398:	bf5c      	itt	pl
 800a39a:	005b      	lslpl	r3, r3, #1
 800a39c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a3a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a3a4:	bf58      	it	pl
 800a3a6:	0064      	lslpl	r4, r4, #1
 800a3a8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a3ac:	0062      	lsls	r2, r4, #1
 800a3ae:	2016      	movs	r0, #22
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800a3b6:	1076      	asrs	r6, r6, #1
 800a3b8:	190f      	adds	r7, r1, r4
 800a3ba:	429f      	cmp	r7, r3
 800a3bc:	bfde      	ittt	le
 800a3be:	1bdb      	suble	r3, r3, r7
 800a3c0:	1939      	addle	r1, r7, r4
 800a3c2:	192d      	addle	r5, r5, r4
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	3801      	subs	r0, #1
 800a3c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a3cc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a3d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a3d4:	d1f0      	bne.n	800a3b8 <__ieee754_sqrt+0x8c>
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	2720      	movs	r7, #32
 800a3da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800a3de:	428b      	cmp	r3, r1
 800a3e0:	eb0c 0e00 	add.w	lr, ip, r0
 800a3e4:	dc02      	bgt.n	800a3ec <__ieee754_sqrt+0xc0>
 800a3e6:	d113      	bne.n	800a410 <__ieee754_sqrt+0xe4>
 800a3e8:	4596      	cmp	lr, r2
 800a3ea:	d811      	bhi.n	800a410 <__ieee754_sqrt+0xe4>
 800a3ec:	f1be 0f00 	cmp.w	lr, #0
 800a3f0:	eb0e 000c 	add.w	r0, lr, ip
 800a3f4:	da56      	bge.n	800a4a4 <__ieee754_sqrt+0x178>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	db54      	blt.n	800a4a4 <__ieee754_sqrt+0x178>
 800a3fa:	f101 0801 	add.w	r8, r1, #1
 800a3fe:	1a5b      	subs	r3, r3, r1
 800a400:	4641      	mov	r1, r8
 800a402:	4596      	cmp	lr, r2
 800a404:	bf88      	it	hi
 800a406:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a40a:	eba2 020e 	sub.w	r2, r2, lr
 800a40e:	4464      	add	r4, ip
 800a410:	005b      	lsls	r3, r3, #1
 800a412:	3f01      	subs	r7, #1
 800a414:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a418:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a41c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a420:	d1dd      	bne.n	800a3de <__ieee754_sqrt+0xb2>
 800a422:	4313      	orrs	r3, r2
 800a424:	d01b      	beq.n	800a45e <__ieee754_sqrt+0x132>
 800a426:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a4d4 <__ieee754_sqrt+0x1a8>
 800a42a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a4d8 <__ieee754_sqrt+0x1ac>
 800a42e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a432:	e9db 2300 	ldrd	r2, r3, [fp]
 800a436:	f7f5 fe8f 	bl	8000158 <__aeabi_dsub>
 800a43a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4640      	mov	r0, r8
 800a444:	4649      	mov	r1, r9
 800a446:	f7f6 fabb 	bl	80009c0 <__aeabi_dcmple>
 800a44a:	b140      	cbz	r0, 800a45e <__ieee754_sqrt+0x132>
 800a44c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a450:	e9db 2300 	ldrd	r2, r3, [fp]
 800a454:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a458:	d126      	bne.n	800a4a8 <__ieee754_sqrt+0x17c>
 800a45a:	463c      	mov	r4, r7
 800a45c:	3501      	adds	r5, #1
 800a45e:	106b      	asrs	r3, r5, #1
 800a460:	0864      	lsrs	r4, r4, #1
 800a462:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a466:	07ea      	lsls	r2, r5, #31
 800a468:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a46c:	bf48      	it	mi
 800a46e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800a472:	4620      	mov	r0, r4
 800a474:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a478:	e76d      	b.n	800a356 <__ieee754_sqrt+0x2a>
 800a47a:	0ae3      	lsrs	r3, r4, #11
 800a47c:	3915      	subs	r1, #21
 800a47e:	0564      	lsls	r4, r4, #21
 800a480:	2b00      	cmp	r3, #0
 800a482:	d0fa      	beq.n	800a47a <__ieee754_sqrt+0x14e>
 800a484:	02d8      	lsls	r0, r3, #11
 800a486:	d50a      	bpl.n	800a49e <__ieee754_sqrt+0x172>
 800a488:	f1c2 0020 	rsb	r0, r2, #32
 800a48c:	fa24 f000 	lsr.w	r0, r4, r0
 800a490:	1e55      	subs	r5, r2, #1
 800a492:	4094      	lsls	r4, r2
 800a494:	4303      	orrs	r3, r0
 800a496:	1b4a      	subs	r2, r1, r5
 800a498:	e776      	b.n	800a388 <__ieee754_sqrt+0x5c>
 800a49a:	4611      	mov	r1, r2
 800a49c:	e7f0      	b.n	800a480 <__ieee754_sqrt+0x154>
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	3201      	adds	r2, #1
 800a4a2:	e7ef      	b.n	800a484 <__ieee754_sqrt+0x158>
 800a4a4:	4688      	mov	r8, r1
 800a4a6:	e7aa      	b.n	800a3fe <__ieee754_sqrt+0xd2>
 800a4a8:	f7f5 fe58 	bl	800015c <__adddf3>
 800a4ac:	e9da 8900 	ldrd	r8, r9, [sl]
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	f7f6 fa78 	bl	80009ac <__aeabi_dcmplt>
 800a4bc:	b120      	cbz	r0, 800a4c8 <__ieee754_sqrt+0x19c>
 800a4be:	1ca1      	adds	r1, r4, #2
 800a4c0:	bf08      	it	eq
 800a4c2:	3501      	addeq	r5, #1
 800a4c4:	3402      	adds	r4, #2
 800a4c6:	e7ca      	b.n	800a45e <__ieee754_sqrt+0x132>
 800a4c8:	3401      	adds	r4, #1
 800a4ca:	f024 0401 	bic.w	r4, r4, #1
 800a4ce:	e7c6      	b.n	800a45e <__ieee754_sqrt+0x132>
 800a4d0:	7ff00000 	.word	0x7ff00000
 800a4d4:	20000070 	.word	0x20000070
 800a4d8:	20000078 	.word	0x20000078
 800a4dc:	00000000 	.word	0x00000000

0800a4e0 <__kernel_cos>:
 800a4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a4e8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	460f      	mov	r7, r1
 800a4f0:	e9cd 2300 	strd	r2, r3, [sp]
 800a4f4:	da04      	bge.n	800a500 <__kernel_cos+0x20>
 800a4f6:	f7f6 fa97 	bl	8000a28 <__aeabi_d2iz>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f000 8086 	beq.w	800a60c <__kernel_cos+0x12c>
 800a500:	4642      	mov	r2, r8
 800a502:	463b      	mov	r3, r7
 800a504:	4640      	mov	r0, r8
 800a506:	4639      	mov	r1, r7
 800a508:	f7f5 ffde 	bl	80004c8 <__aeabi_dmul>
 800a50c:	2200      	movs	r2, #0
 800a50e:	4b4e      	ldr	r3, [pc, #312]	; (800a648 <__kernel_cos+0x168>)
 800a510:	4604      	mov	r4, r0
 800a512:	460d      	mov	r5, r1
 800a514:	f7f5 ffd8 	bl	80004c8 <__aeabi_dmul>
 800a518:	a33f      	add	r3, pc, #252	; (adr r3, 800a618 <__kernel_cos+0x138>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	4682      	mov	sl, r0
 800a520:	468b      	mov	fp, r1
 800a522:	4620      	mov	r0, r4
 800a524:	4629      	mov	r1, r5
 800a526:	f7f5 ffcf 	bl	80004c8 <__aeabi_dmul>
 800a52a:	a33d      	add	r3, pc, #244	; (adr r3, 800a620 <__kernel_cos+0x140>)
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	f7f5 fe14 	bl	800015c <__adddf3>
 800a534:	4622      	mov	r2, r4
 800a536:	462b      	mov	r3, r5
 800a538:	f7f5 ffc6 	bl	80004c8 <__aeabi_dmul>
 800a53c:	a33a      	add	r3, pc, #232	; (adr r3, 800a628 <__kernel_cos+0x148>)
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	f7f5 fe09 	bl	8000158 <__aeabi_dsub>
 800a546:	4622      	mov	r2, r4
 800a548:	462b      	mov	r3, r5
 800a54a:	f7f5 ffbd 	bl	80004c8 <__aeabi_dmul>
 800a54e:	a338      	add	r3, pc, #224	; (adr r3, 800a630 <__kernel_cos+0x150>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	f7f5 fe02 	bl	800015c <__adddf3>
 800a558:	4622      	mov	r2, r4
 800a55a:	462b      	mov	r3, r5
 800a55c:	f7f5 ffb4 	bl	80004c8 <__aeabi_dmul>
 800a560:	a335      	add	r3, pc, #212	; (adr r3, 800a638 <__kernel_cos+0x158>)
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	f7f5 fdf7 	bl	8000158 <__aeabi_dsub>
 800a56a:	4622      	mov	r2, r4
 800a56c:	462b      	mov	r3, r5
 800a56e:	f7f5 ffab 	bl	80004c8 <__aeabi_dmul>
 800a572:	a333      	add	r3, pc, #204	; (adr r3, 800a640 <__kernel_cos+0x160>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f7f5 fdf0 	bl	800015c <__adddf3>
 800a57c:	4622      	mov	r2, r4
 800a57e:	462b      	mov	r3, r5
 800a580:	f7f5 ffa2 	bl	80004c8 <__aeabi_dmul>
 800a584:	4622      	mov	r2, r4
 800a586:	462b      	mov	r3, r5
 800a588:	f7f5 ff9e 	bl	80004c8 <__aeabi_dmul>
 800a58c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a590:	4604      	mov	r4, r0
 800a592:	460d      	mov	r5, r1
 800a594:	4640      	mov	r0, r8
 800a596:	4639      	mov	r1, r7
 800a598:	f7f5 ff96 	bl	80004c8 <__aeabi_dmul>
 800a59c:	460b      	mov	r3, r1
 800a59e:	4602      	mov	r2, r0
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f7f5 fdd8 	bl	8000158 <__aeabi_dsub>
 800a5a8:	4b28      	ldr	r3, [pc, #160]	; (800a64c <__kernel_cos+0x16c>)
 800a5aa:	4680      	mov	r8, r0
 800a5ac:	429e      	cmp	r6, r3
 800a5ae:	4689      	mov	r9, r1
 800a5b0:	dc0e      	bgt.n	800a5d0 <__kernel_cos+0xf0>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4650      	mov	r0, sl
 800a5b8:	4659      	mov	r1, fp
 800a5ba:	f7f5 fdcd 	bl	8000158 <__aeabi_dsub>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	4922      	ldr	r1, [pc, #136]	; (800a650 <__kernel_cos+0x170>)
 800a5c6:	f7f5 fdc7 	bl	8000158 <__aeabi_dsub>
 800a5ca:	b003      	add	sp, #12
 800a5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d0:	2400      	movs	r4, #0
 800a5d2:	4b20      	ldr	r3, [pc, #128]	; (800a654 <__kernel_cos+0x174>)
 800a5d4:	4622      	mov	r2, r4
 800a5d6:	429e      	cmp	r6, r3
 800a5d8:	bfcc      	ite	gt
 800a5da:	4d1f      	ldrgt	r5, [pc, #124]	; (800a658 <__kernel_cos+0x178>)
 800a5dc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	491a      	ldr	r1, [pc, #104]	; (800a650 <__kernel_cos+0x170>)
 800a5e6:	f7f5 fdb7 	bl	8000158 <__aeabi_dsub>
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	460f      	mov	r7, r1
 800a5f0:	462b      	mov	r3, r5
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	f7f5 fdaf 	bl	8000158 <__aeabi_dsub>
 800a5fa:	4642      	mov	r2, r8
 800a5fc:	464b      	mov	r3, r9
 800a5fe:	f7f5 fdab 	bl	8000158 <__aeabi_dsub>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4630      	mov	r0, r6
 800a608:	4639      	mov	r1, r7
 800a60a:	e7dc      	b.n	800a5c6 <__kernel_cos+0xe6>
 800a60c:	2000      	movs	r0, #0
 800a60e:	4910      	ldr	r1, [pc, #64]	; (800a650 <__kernel_cos+0x170>)
 800a610:	e7db      	b.n	800a5ca <__kernel_cos+0xea>
 800a612:	bf00      	nop
 800a614:	f3af 8000 	nop.w
 800a618:	be8838d4 	.word	0xbe8838d4
 800a61c:	bda8fae9 	.word	0xbda8fae9
 800a620:	bdb4b1c4 	.word	0xbdb4b1c4
 800a624:	3e21ee9e 	.word	0x3e21ee9e
 800a628:	809c52ad 	.word	0x809c52ad
 800a62c:	3e927e4f 	.word	0x3e927e4f
 800a630:	19cb1590 	.word	0x19cb1590
 800a634:	3efa01a0 	.word	0x3efa01a0
 800a638:	16c15177 	.word	0x16c15177
 800a63c:	3f56c16c 	.word	0x3f56c16c
 800a640:	5555554c 	.word	0x5555554c
 800a644:	3fa55555 	.word	0x3fa55555
 800a648:	3fe00000 	.word	0x3fe00000
 800a64c:	3fd33332 	.word	0x3fd33332
 800a650:	3ff00000 	.word	0x3ff00000
 800a654:	3fe90000 	.word	0x3fe90000
 800a658:	3fd20000 	.word	0x3fd20000
 800a65c:	00000000 	.word	0x00000000

0800a660 <__kernel_sin>:
 800a660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a664:	b086      	sub	sp, #24
 800a666:	e9cd 2300 	strd	r2, r3, [sp]
 800a66a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a66e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a672:	4682      	mov	sl, r0
 800a674:	460c      	mov	r4, r1
 800a676:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a678:	da03      	bge.n	800a682 <__kernel_sin+0x22>
 800a67a:	f7f6 f9d5 	bl	8000a28 <__aeabi_d2iz>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d050      	beq.n	800a724 <__kernel_sin+0xc4>
 800a682:	4652      	mov	r2, sl
 800a684:	4623      	mov	r3, r4
 800a686:	4650      	mov	r0, sl
 800a688:	4621      	mov	r1, r4
 800a68a:	f7f5 ff1d 	bl	80004c8 <__aeabi_dmul>
 800a68e:	4606      	mov	r6, r0
 800a690:	460f      	mov	r7, r1
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	4650      	mov	r0, sl
 800a698:	4621      	mov	r1, r4
 800a69a:	f7f5 ff15 	bl	80004c8 <__aeabi_dmul>
 800a69e:	a33e      	add	r3, pc, #248	; (adr r3, 800a798 <__kernel_sin+0x138>)
 800a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	4689      	mov	r9, r1
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	f7f5 ff0c 	bl	80004c8 <__aeabi_dmul>
 800a6b0:	a33b      	add	r3, pc, #236	; (adr r3, 800a7a0 <__kernel_sin+0x140>)
 800a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b6:	f7f5 fd4f 	bl	8000158 <__aeabi_dsub>
 800a6ba:	4632      	mov	r2, r6
 800a6bc:	463b      	mov	r3, r7
 800a6be:	f7f5 ff03 	bl	80004c8 <__aeabi_dmul>
 800a6c2:	a339      	add	r3, pc, #228	; (adr r3, 800a7a8 <__kernel_sin+0x148>)
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	f7f5 fd48 	bl	800015c <__adddf3>
 800a6cc:	4632      	mov	r2, r6
 800a6ce:	463b      	mov	r3, r7
 800a6d0:	f7f5 fefa 	bl	80004c8 <__aeabi_dmul>
 800a6d4:	a336      	add	r3, pc, #216	; (adr r3, 800a7b0 <__kernel_sin+0x150>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f5 fd3d 	bl	8000158 <__aeabi_dsub>
 800a6de:	4632      	mov	r2, r6
 800a6e0:	463b      	mov	r3, r7
 800a6e2:	f7f5 fef1 	bl	80004c8 <__aeabi_dmul>
 800a6e6:	a334      	add	r3, pc, #208	; (adr r3, 800a7b8 <__kernel_sin+0x158>)
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f7f5 fd36 	bl	800015c <__adddf3>
 800a6f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6f4:	b9dd      	cbnz	r5, 800a72e <__kernel_sin+0xce>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	4639      	mov	r1, r7
 800a6fe:	f7f5 fee3 	bl	80004c8 <__aeabi_dmul>
 800a702:	a32f      	add	r3, pc, #188	; (adr r3, 800a7c0 <__kernel_sin+0x160>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f7f5 fd26 	bl	8000158 <__aeabi_dsub>
 800a70c:	4642      	mov	r2, r8
 800a70e:	464b      	mov	r3, r9
 800a710:	f7f5 feda 	bl	80004c8 <__aeabi_dmul>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	4650      	mov	r0, sl
 800a71a:	4621      	mov	r1, r4
 800a71c:	f7f5 fd1e 	bl	800015c <__adddf3>
 800a720:	4682      	mov	sl, r0
 800a722:	460c      	mov	r4, r1
 800a724:	4650      	mov	r0, sl
 800a726:	4621      	mov	r1, r4
 800a728:	b006      	add	sp, #24
 800a72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a72e:	2200      	movs	r2, #0
 800a730:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a734:	4b24      	ldr	r3, [pc, #144]	; (800a7c8 <__kernel_sin+0x168>)
 800a736:	f7f5 fec7 	bl	80004c8 <__aeabi_dmul>
 800a73a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a73e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a742:	4640      	mov	r0, r8
 800a744:	4649      	mov	r1, r9
 800a746:	f7f5 febf 	bl	80004c8 <__aeabi_dmul>
 800a74a:	4602      	mov	r2, r0
 800a74c:	460b      	mov	r3, r1
 800a74e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a752:	f7f5 fd01 	bl	8000158 <__aeabi_dsub>
 800a756:	4632      	mov	r2, r6
 800a758:	463b      	mov	r3, r7
 800a75a:	f7f5 feb5 	bl	80004c8 <__aeabi_dmul>
 800a75e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a762:	f7f5 fcf9 	bl	8000158 <__aeabi_dsub>
 800a766:	a316      	add	r3, pc, #88	; (adr r3, 800a7c0 <__kernel_sin+0x160>)
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	4606      	mov	r6, r0
 800a76e:	460f      	mov	r7, r1
 800a770:	4640      	mov	r0, r8
 800a772:	4649      	mov	r1, r9
 800a774:	f7f5 fea8 	bl	80004c8 <__aeabi_dmul>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4630      	mov	r0, r6
 800a77e:	4639      	mov	r1, r7
 800a780:	f7f5 fcec 	bl	800015c <__adddf3>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4650      	mov	r0, sl
 800a78a:	4621      	mov	r1, r4
 800a78c:	f7f5 fce4 	bl	8000158 <__aeabi_dsub>
 800a790:	e7c6      	b.n	800a720 <__kernel_sin+0xc0>
 800a792:	bf00      	nop
 800a794:	f3af 8000 	nop.w
 800a798:	5acfd57c 	.word	0x5acfd57c
 800a79c:	3de5d93a 	.word	0x3de5d93a
 800a7a0:	8a2b9ceb 	.word	0x8a2b9ceb
 800a7a4:	3e5ae5e6 	.word	0x3e5ae5e6
 800a7a8:	57b1fe7d 	.word	0x57b1fe7d
 800a7ac:	3ec71de3 	.word	0x3ec71de3
 800a7b0:	19c161d5 	.word	0x19c161d5
 800a7b4:	3f2a01a0 	.word	0x3f2a01a0
 800a7b8:	1110f8a6 	.word	0x1110f8a6
 800a7bc:	3f811111 	.word	0x3f811111
 800a7c0:	55555549 	.word	0x55555549
 800a7c4:	3fc55555 	.word	0x3fc55555
 800a7c8:	3fe00000 	.word	0x3fe00000
 800a7cc:	00000000 	.word	0x00000000

0800a7d0 <__ieee754_atan2>:
 800a7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	4617      	mov	r7, r2
 800a7d6:	4692      	mov	sl, r2
 800a7d8:	4699      	mov	r9, r3
 800a7da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a7de:	427b      	negs	r3, r7
 800a7e0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800a960 <__ieee754_atan2+0x190>
 800a7e4:	433b      	orrs	r3, r7
 800a7e6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a7ea:	4543      	cmp	r3, r8
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	460d      	mov	r5, r1
 800a7f0:	d809      	bhi.n	800a806 <__ieee754_atan2+0x36>
 800a7f2:	4246      	negs	r6, r0
 800a7f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7f8:	4306      	orrs	r6, r0
 800a7fa:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800a7fe:	4546      	cmp	r6, r8
 800a800:	468e      	mov	lr, r1
 800a802:	4683      	mov	fp, r0
 800a804:	d908      	bls.n	800a818 <__ieee754_atan2+0x48>
 800a806:	4652      	mov	r2, sl
 800a808:	464b      	mov	r3, r9
 800a80a:	4620      	mov	r0, r4
 800a80c:	4629      	mov	r1, r5
 800a80e:	f7f5 fca5 	bl	800015c <__adddf3>
 800a812:	4604      	mov	r4, r0
 800a814:	460d      	mov	r5, r1
 800a816:	e019      	b.n	800a84c <__ieee754_atan2+0x7c>
 800a818:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800a81c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800a820:	433e      	orrs	r6, r7
 800a822:	d103      	bne.n	800a82c <__ieee754_atan2+0x5c>
 800a824:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	f000 bba6 	b.w	800af78 <atan>
 800a82c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800a830:	f006 0602 	and.w	r6, r6, #2
 800a834:	ea53 0b0b 	orrs.w	fp, r3, fp
 800a838:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800a83c:	d10a      	bne.n	800a854 <__ieee754_atan2+0x84>
 800a83e:	2e02      	cmp	r6, #2
 800a840:	d067      	beq.n	800a912 <__ieee754_atan2+0x142>
 800a842:	2e03      	cmp	r6, #3
 800a844:	d102      	bne.n	800a84c <__ieee754_atan2+0x7c>
 800a846:	a53a      	add	r5, pc, #232	; (adr r5, 800a930 <__ieee754_atan2+0x160>)
 800a848:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a84c:	4620      	mov	r0, r4
 800a84e:	4629      	mov	r1, r5
 800a850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a854:	4317      	orrs	r7, r2
 800a856:	d106      	bne.n	800a866 <__ieee754_atan2+0x96>
 800a858:	f1be 0f00 	cmp.w	lr, #0
 800a85c:	da64      	bge.n	800a928 <__ieee754_atan2+0x158>
 800a85e:	a536      	add	r5, pc, #216	; (adr r5, 800a938 <__ieee754_atan2+0x168>)
 800a860:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a864:	e7f2      	b.n	800a84c <__ieee754_atan2+0x7c>
 800a866:	4542      	cmp	r2, r8
 800a868:	d10f      	bne.n	800a88a <__ieee754_atan2+0xba>
 800a86a:	4293      	cmp	r3, r2
 800a86c:	f106 36ff 	add.w	r6, r6, #4294967295
 800a870:	d107      	bne.n	800a882 <__ieee754_atan2+0xb2>
 800a872:	2e02      	cmp	r6, #2
 800a874:	d851      	bhi.n	800a91a <__ieee754_atan2+0x14a>
 800a876:	4b3b      	ldr	r3, [pc, #236]	; (800a964 <__ieee754_atan2+0x194>)
 800a878:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a87c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a880:	e7e4      	b.n	800a84c <__ieee754_atan2+0x7c>
 800a882:	2e02      	cmp	r6, #2
 800a884:	d84d      	bhi.n	800a922 <__ieee754_atan2+0x152>
 800a886:	4b38      	ldr	r3, [pc, #224]	; (800a968 <__ieee754_atan2+0x198>)
 800a888:	e7f6      	b.n	800a878 <__ieee754_atan2+0xa8>
 800a88a:	4543      	cmp	r3, r8
 800a88c:	d0e4      	beq.n	800a858 <__ieee754_atan2+0x88>
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a894:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a898:	da21      	bge.n	800a8de <__ieee754_atan2+0x10e>
 800a89a:	f1b9 0f00 	cmp.w	r9, #0
 800a89e:	da01      	bge.n	800a8a4 <__ieee754_atan2+0xd4>
 800a8a0:	323c      	adds	r2, #60	; 0x3c
 800a8a2:	db20      	blt.n	800a8e6 <__ieee754_atan2+0x116>
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	464b      	mov	r3, r9
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	f7f5 ff36 	bl	800071c <__aeabi_ddiv>
 800a8b0:	f000 fcec 	bl	800b28c <fabs>
 800a8b4:	f000 fb60 	bl	800af78 <atan>
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	2e01      	cmp	r6, #1
 800a8be:	d015      	beq.n	800a8ec <__ieee754_atan2+0x11c>
 800a8c0:	2e02      	cmp	r6, #2
 800a8c2:	d017      	beq.n	800a8f4 <__ieee754_atan2+0x124>
 800a8c4:	2e00      	cmp	r6, #0
 800a8c6:	d0c1      	beq.n	800a84c <__ieee754_atan2+0x7c>
 800a8c8:	a31d      	add	r3, pc, #116	; (adr r3, 800a940 <__ieee754_atan2+0x170>)
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	f7f5 fc41 	bl	8000158 <__aeabi_dsub>
 800a8d6:	a31c      	add	r3, pc, #112	; (adr r3, 800a948 <__ieee754_atan2+0x178>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	e016      	b.n	800a90c <__ieee754_atan2+0x13c>
 800a8de:	a51c      	add	r5, pc, #112	; (adr r5, 800a950 <__ieee754_atan2+0x180>)
 800a8e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a8e4:	e7ea      	b.n	800a8bc <__ieee754_atan2+0xec>
 800a8e6:	2400      	movs	r4, #0
 800a8e8:	2500      	movs	r5, #0
 800a8ea:	e7e7      	b.n	800a8bc <__ieee754_atan2+0xec>
 800a8ec:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a8f0:	461d      	mov	r5, r3
 800a8f2:	e7ab      	b.n	800a84c <__ieee754_atan2+0x7c>
 800a8f4:	a312      	add	r3, pc, #72	; (adr r3, 800a940 <__ieee754_atan2+0x170>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	f7f5 fc2b 	bl	8000158 <__aeabi_dsub>
 800a902:	4602      	mov	r2, r0
 800a904:	460b      	mov	r3, r1
 800a906:	a110      	add	r1, pc, #64	; (adr r1, 800a948 <__ieee754_atan2+0x178>)
 800a908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a90c:	f7f5 fc24 	bl	8000158 <__aeabi_dsub>
 800a910:	e77f      	b.n	800a812 <__ieee754_atan2+0x42>
 800a912:	a50d      	add	r5, pc, #52	; (adr r5, 800a948 <__ieee754_atan2+0x178>)
 800a914:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a918:	e798      	b.n	800a84c <__ieee754_atan2+0x7c>
 800a91a:	a50f      	add	r5, pc, #60	; (adr r5, 800a958 <__ieee754_atan2+0x188>)
 800a91c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a920:	e794      	b.n	800a84c <__ieee754_atan2+0x7c>
 800a922:	2400      	movs	r4, #0
 800a924:	2500      	movs	r5, #0
 800a926:	e791      	b.n	800a84c <__ieee754_atan2+0x7c>
 800a928:	a509      	add	r5, pc, #36	; (adr r5, 800a950 <__ieee754_atan2+0x180>)
 800a92a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a92e:	e78d      	b.n	800a84c <__ieee754_atan2+0x7c>
 800a930:	54442d18 	.word	0x54442d18
 800a934:	c00921fb 	.word	0xc00921fb
 800a938:	54442d18 	.word	0x54442d18
 800a93c:	bff921fb 	.word	0xbff921fb
 800a940:	33145c07 	.word	0x33145c07
 800a944:	3ca1a626 	.word	0x3ca1a626
 800a948:	54442d18 	.word	0x54442d18
 800a94c:	400921fb 	.word	0x400921fb
 800a950:	54442d18 	.word	0x54442d18
 800a954:	3ff921fb 	.word	0x3ff921fb
 800a958:	54442d18 	.word	0x54442d18
 800a95c:	3fe921fb 	.word	0x3fe921fb
 800a960:	7ff00000 	.word	0x7ff00000
 800a964:	0800bc28 	.word	0x0800bc28
 800a968:	0800bc40 	.word	0x0800bc40

0800a96c <__ieee754_hypot>:
 800a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 800a974:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a978:	42a5      	cmp	r5, r4
 800a97a:	b087      	sub	sp, #28
 800a97c:	da05      	bge.n	800a98a <__ieee754_hypot+0x1e>
 800a97e:	462e      	mov	r6, r5
 800a980:	4625      	mov	r5, r4
 800a982:	4634      	mov	r4, r6
 800a984:	4606      	mov	r6, r0
 800a986:	4610      	mov	r0, r2
 800a988:	4632      	mov	r2, r6
 800a98a:	1b2b      	subs	r3, r5, r4
 800a98c:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 800a990:	4629      	mov	r1, r5
 800a992:	4682      	mov	sl, r0
 800a994:	46ab      	mov	fp, r5
 800a996:	4690      	mov	r8, r2
 800a998:	46a1      	mov	r9, r4
 800a99a:	dd05      	ble.n	800a9a8 <__ieee754_hypot+0x3c>
 800a99c:	4623      	mov	r3, r4
 800a99e:	f7f5 fbdd 	bl	800015c <__adddf3>
 800a9a2:	4682      	mov	sl, r0
 800a9a4:	468b      	mov	fp, r1
 800a9a6:	e018      	b.n	800a9da <__ieee754_hypot+0x6e>
 800a9a8:	4b74      	ldr	r3, [pc, #464]	; (800ab7c <__ieee754_hypot+0x210>)
 800a9aa:	429d      	cmp	r5, r3
 800a9ac:	f340 8096 	ble.w	800aadc <__ieee754_hypot+0x170>
 800a9b0:	4b73      	ldr	r3, [pc, #460]	; (800ab80 <__ieee754_hypot+0x214>)
 800a9b2:	429d      	cmp	r5, r3
 800a9b4:	dd16      	ble.n	800a9e4 <__ieee754_hypot+0x78>
 800a9b6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a9ba:	4305      	orrs	r5, r0
 800a9bc:	d004      	beq.n	800a9c8 <__ieee754_hypot+0x5c>
 800a9be:	4623      	mov	r3, r4
 800a9c0:	f7f5 fbcc 	bl	800015c <__adddf3>
 800a9c4:	4682      	mov	sl, r0
 800a9c6:	468b      	mov	fp, r1
 800a9c8:	4643      	mov	r3, r8
 800a9ca:	f084 44ff 	eor.w	r4, r4, #2139095040	; 0x7f800000
 800a9ce:	f484 04e0 	eor.w	r4, r4, #7340032	; 0x700000
 800a9d2:	431c      	orrs	r4, r3
 800a9d4:	d101      	bne.n	800a9da <__ieee754_hypot+0x6e>
 800a9d6:	46c2      	mov	sl, r8
 800a9d8:	46cb      	mov	fp, r9
 800a9da:	4650      	mov	r0, sl
 800a9dc:	4659      	mov	r1, fp
 800a9de:	b007      	add	sp, #28
 800a9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e4:	f1a5 5516 	sub.w	r5, r5, #629145600	; 0x25800000
 800a9e8:	f1a4 5416 	sub.w	r4, r4, #629145600	; 0x25800000
 800a9ec:	46ab      	mov	fp, r5
 800a9ee:	46a1      	mov	r9, r4
 800a9f0:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a9f4:	9301      	str	r3, [sp, #4]
 800a9f6:	4b63      	ldr	r3, [pc, #396]	; (800ab84 <__ieee754_hypot+0x218>)
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	dc19      	bgt.n	800aa30 <__ieee754_hypot+0xc4>
 800a9fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aa00:	da6e      	bge.n	800aae0 <__ieee754_hypot+0x174>
 800aa02:	4643      	mov	r3, r8
 800aa04:	4323      	orrs	r3, r4
 800aa06:	d0e8      	beq.n	800a9da <__ieee754_hypot+0x6e>
 800aa08:	2200      	movs	r2, #0
 800aa0a:	4640      	mov	r0, r8
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	4b5e      	ldr	r3, [pc, #376]	; (800ab88 <__ieee754_hypot+0x21c>)
 800aa10:	f7f5 fd5a 	bl	80004c8 <__aeabi_dmul>
 800aa14:	4b5c      	ldr	r3, [pc, #368]	; (800ab88 <__ieee754_hypot+0x21c>)
 800aa16:	4680      	mov	r8, r0
 800aa18:	4689      	mov	r9, r1
 800aa1a:	4650      	mov	r0, sl
 800aa1c:	4659      	mov	r1, fp
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f7f5 fd52 	bl	80004c8 <__aeabi_dmul>
 800aa24:	4682      	mov	sl, r0
 800aa26:	468b      	mov	fp, r1
 800aa28:	9b01      	ldr	r3, [sp, #4]
 800aa2a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	4642      	mov	r2, r8
 800aa32:	464b      	mov	r3, r9
 800aa34:	4650      	mov	r0, sl
 800aa36:	4659      	mov	r1, fp
 800aa38:	f7f5 fb8e 	bl	8000158 <__aeabi_dsub>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4607      	mov	r7, r0
 800aa42:	460e      	mov	r6, r1
 800aa44:	4640      	mov	r0, r8
 800aa46:	4649      	mov	r1, r9
 800aa48:	f7f5 ffb0 	bl	80009ac <__aeabi_dcmplt>
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d051      	beq.n	800aaf6 <__ieee754_hypot+0x18a>
 800aa52:	462b      	mov	r3, r5
 800aa54:	4610      	mov	r0, r2
 800aa56:	4629      	mov	r1, r5
 800aa58:	4614      	mov	r4, r2
 800aa5a:	f7f5 fd35 	bl	80004c8 <__aeabi_dmul>
 800aa5e:	4642      	mov	r2, r8
 800aa60:	464b      	mov	r3, r9
 800aa62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa66:	4640      	mov	r0, r8
 800aa68:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800aa6c:	f7f5 fd2c 	bl	80004c8 <__aeabi_dmul>
 800aa70:	4622      	mov	r2, r4
 800aa72:	4606      	mov	r6, r0
 800aa74:	460f      	mov	r7, r1
 800aa76:	462b      	mov	r3, r5
 800aa78:	4650      	mov	r0, sl
 800aa7a:	4659      	mov	r1, fp
 800aa7c:	f7f5 fb6e 	bl	800015c <__adddf3>
 800aa80:	4622      	mov	r2, r4
 800aa82:	4680      	mov	r8, r0
 800aa84:	4689      	mov	r9, r1
 800aa86:	462b      	mov	r3, r5
 800aa88:	4650      	mov	r0, sl
 800aa8a:	4659      	mov	r1, fp
 800aa8c:	f7f5 fb64 	bl	8000158 <__aeabi_dsub>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4640      	mov	r0, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7f5 fd16 	bl	80004c8 <__aeabi_dmul>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	f7f5 fb58 	bl	8000158 <__aeabi_dsub>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aab0:	f7f5 fb52 	bl	8000158 <__aeabi_dsub>
 800aab4:	f7ff fc3a 	bl	800a32c <__ieee754_sqrt>
 800aab8:	9b01      	ldr	r3, [sp, #4]
 800aaba:	4682      	mov	sl, r0
 800aabc:	468b      	mov	fp, r1
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d08b      	beq.n	800a9da <__ieee754_hypot+0x6e>
 800aac2:	2000      	movs	r0, #0
 800aac4:	051b      	lsls	r3, r3, #20
 800aac6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800aaca:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4650      	mov	r0, sl
 800aad4:	4659      	mov	r1, fp
 800aad6:	f7f5 fcf7 	bl	80004c8 <__aeabi_dmul>
 800aada:	e762      	b.n	800a9a2 <__ieee754_hypot+0x36>
 800aadc:	2300      	movs	r3, #0
 800aade:	e789      	b.n	800a9f4 <__ieee754_hypot+0x88>
 800aae0:	9b01      	ldr	r3, [sp, #4]
 800aae2:	f105 5516 	add.w	r5, r5, #629145600	; 0x25800000
 800aae6:	f104 5416 	add.w	r4, r4, #629145600	; 0x25800000
 800aaea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800aaee:	46ab      	mov	fp, r5
 800aaf0:	46a1      	mov	r9, r4
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	e79c      	b.n	800aa30 <__ieee754_hypot+0xc4>
 800aaf6:	4623      	mov	r3, r4
 800aaf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aafc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f505 1380 	add.w	r3, r5, #1048576	; 0x100000
 800ab06:	4614      	mov	r4, r2
 800ab08:	461d      	mov	r5, r3
 800ab0a:	f7f5 fcdd 	bl	80004c8 <__aeabi_dmul>
 800ab0e:	463a      	mov	r2, r7
 800ab10:	4633      	mov	r3, r6
 800ab12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab16:	4638      	mov	r0, r7
 800ab18:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
 800ab1c:	f7f5 fcd4 	bl	80004c8 <__aeabi_dmul>
 800ab20:	4652      	mov	r2, sl
 800ab22:	465b      	mov	r3, fp
 800ab24:	4606      	mov	r6, r0
 800ab26:	460f      	mov	r7, r1
 800ab28:	4650      	mov	r0, sl
 800ab2a:	4659      	mov	r1, fp
 800ab2c:	f7f5 fb16 	bl	800015c <__adddf3>
 800ab30:	4622      	mov	r2, r4
 800ab32:	462b      	mov	r3, r5
 800ab34:	f7f5 fb10 	bl	8000158 <__aeabi_dsub>
 800ab38:	4642      	mov	r2, r8
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	f7f5 fcc4 	bl	80004c8 <__aeabi_dmul>
 800ab40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab44:	4682      	mov	sl, r0
 800ab46:	468b      	mov	fp, r1
 800ab48:	4640      	mov	r0, r8
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7f5 fb04 	bl	8000158 <__aeabi_dsub>
 800ab50:	4622      	mov	r2, r4
 800ab52:	462b      	mov	r3, r5
 800ab54:	f7f5 fcb8 	bl	80004c8 <__aeabi_dmul>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	4659      	mov	r1, fp
 800ab60:	f7f5 fafc 	bl	800015c <__adddf3>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	f7f5 faf4 	bl	8000158 <__aeabi_dsub>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab78:	e79a      	b.n	800aab0 <__ieee754_hypot+0x144>
 800ab7a:	bf00      	nop
 800ab7c:	5f300000 	.word	0x5f300000
 800ab80:	7fefffff 	.word	0x7fefffff
 800ab84:	20afffff 	.word	0x20afffff
 800ab88:	7fd00000 	.word	0x7fd00000
 800ab8c:	00000000 	.word	0x00000000

0800ab90 <__ieee754_rem_pio2>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	4614      	mov	r4, r2
 800ab96:	4ac2      	ldr	r2, [pc, #776]	; (800aea0 <__ieee754_rem_pio2+0x310>)
 800ab98:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800ab9c:	b08d      	sub	sp, #52	; 0x34
 800ab9e:	4592      	cmp	sl, r2
 800aba0:	9104      	str	r1, [sp, #16]
 800aba2:	dc07      	bgt.n	800abb4 <__ieee754_rem_pio2+0x24>
 800aba4:	2200      	movs	r2, #0
 800aba6:	2300      	movs	r3, #0
 800aba8:	e9c4 0100 	strd	r0, r1, [r4]
 800abac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800abb0:	2500      	movs	r5, #0
 800abb2:	e024      	b.n	800abfe <__ieee754_rem_pio2+0x6e>
 800abb4:	4abb      	ldr	r2, [pc, #748]	; (800aea4 <__ieee754_rem_pio2+0x314>)
 800abb6:	4592      	cmp	sl, r2
 800abb8:	dc72      	bgt.n	800aca0 <__ieee754_rem_pio2+0x110>
 800abba:	9b04      	ldr	r3, [sp, #16]
 800abbc:	4dba      	ldr	r5, [pc, #744]	; (800aea8 <__ieee754_rem_pio2+0x318>)
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	a3a9      	add	r3, pc, #676	; (adr r3, 800ae68 <__ieee754_rem_pio2+0x2d8>)
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	dd36      	ble.n	800ac36 <__ieee754_rem_pio2+0xa6>
 800abc8:	f7f5 fac6 	bl	8000158 <__aeabi_dsub>
 800abcc:	45aa      	cmp	sl, r5
 800abce:	4606      	mov	r6, r0
 800abd0:	460f      	mov	r7, r1
 800abd2:	d018      	beq.n	800ac06 <__ieee754_rem_pio2+0x76>
 800abd4:	a3a6      	add	r3, pc, #664	; (adr r3, 800ae70 <__ieee754_rem_pio2+0x2e0>)
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	f7f5 fabd 	bl	8000158 <__aeabi_dsub>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4630      	mov	r0, r6
 800abe4:	e9c4 2300 	strd	r2, r3, [r4]
 800abe8:	4639      	mov	r1, r7
 800abea:	f7f5 fab5 	bl	8000158 <__aeabi_dsub>
 800abee:	a3a0      	add	r3, pc, #640	; (adr r3, 800ae70 <__ieee754_rem_pio2+0x2e0>)
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f7f5 fab0 	bl	8000158 <__aeabi_dsub>
 800abf8:	2501      	movs	r5, #1
 800abfa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800abfe:	4628      	mov	r0, r5
 800ac00:	b00d      	add	sp, #52	; 0x34
 800ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac06:	a39c      	add	r3, pc, #624	; (adr r3, 800ae78 <__ieee754_rem_pio2+0x2e8>)
 800ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0c:	f7f5 faa4 	bl	8000158 <__aeabi_dsub>
 800ac10:	a39b      	add	r3, pc, #620	; (adr r3, 800ae80 <__ieee754_rem_pio2+0x2f0>)
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	4606      	mov	r6, r0
 800ac18:	460f      	mov	r7, r1
 800ac1a:	f7f5 fa9d 	bl	8000158 <__aeabi_dsub>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	460b      	mov	r3, r1
 800ac22:	4630      	mov	r0, r6
 800ac24:	e9c4 2300 	strd	r2, r3, [r4]
 800ac28:	4639      	mov	r1, r7
 800ac2a:	f7f5 fa95 	bl	8000158 <__aeabi_dsub>
 800ac2e:	a394      	add	r3, pc, #592	; (adr r3, 800ae80 <__ieee754_rem_pio2+0x2f0>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	e7de      	b.n	800abf4 <__ieee754_rem_pio2+0x64>
 800ac36:	f7f5 fa91 	bl	800015c <__adddf3>
 800ac3a:	45aa      	cmp	sl, r5
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	460f      	mov	r7, r1
 800ac40:	d016      	beq.n	800ac70 <__ieee754_rem_pio2+0xe0>
 800ac42:	a38b      	add	r3, pc, #556	; (adr r3, 800ae70 <__ieee754_rem_pio2+0x2e0>)
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f7f5 fa88 	bl	800015c <__adddf3>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4630      	mov	r0, r6
 800ac52:	e9c4 2300 	strd	r2, r3, [r4]
 800ac56:	4639      	mov	r1, r7
 800ac58:	f7f5 fa7e 	bl	8000158 <__aeabi_dsub>
 800ac5c:	a384      	add	r3, pc, #528	; (adr r3, 800ae70 <__ieee754_rem_pio2+0x2e0>)
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	f7f5 fa7b 	bl	800015c <__adddf3>
 800ac66:	f04f 35ff 	mov.w	r5, #4294967295
 800ac6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac6e:	e7c6      	b.n	800abfe <__ieee754_rem_pio2+0x6e>
 800ac70:	a381      	add	r3, pc, #516	; (adr r3, 800ae78 <__ieee754_rem_pio2+0x2e8>)
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	f7f5 fa71 	bl	800015c <__adddf3>
 800ac7a:	a381      	add	r3, pc, #516	; (adr r3, 800ae80 <__ieee754_rem_pio2+0x2f0>)
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	4606      	mov	r6, r0
 800ac82:	460f      	mov	r7, r1
 800ac84:	f7f5 fa6a 	bl	800015c <__adddf3>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	e9c4 2300 	strd	r2, r3, [r4]
 800ac92:	4639      	mov	r1, r7
 800ac94:	f7f5 fa60 	bl	8000158 <__aeabi_dsub>
 800ac98:	a379      	add	r3, pc, #484	; (adr r3, 800ae80 <__ieee754_rem_pio2+0x2f0>)
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	e7e0      	b.n	800ac62 <__ieee754_rem_pio2+0xd2>
 800aca0:	4a82      	ldr	r2, [pc, #520]	; (800aeac <__ieee754_rem_pio2+0x31c>)
 800aca2:	4592      	cmp	sl, r2
 800aca4:	f300 80d4 	bgt.w	800ae50 <__ieee754_rem_pio2+0x2c0>
 800aca8:	f000 faf0 	bl	800b28c <fabs>
 800acac:	a376      	add	r3, pc, #472	; (adr r3, 800ae88 <__ieee754_rem_pio2+0x2f8>)
 800acae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb2:	4606      	mov	r6, r0
 800acb4:	460f      	mov	r7, r1
 800acb6:	f7f5 fc07 	bl	80004c8 <__aeabi_dmul>
 800acba:	2200      	movs	r2, #0
 800acbc:	4b7c      	ldr	r3, [pc, #496]	; (800aeb0 <__ieee754_rem_pio2+0x320>)
 800acbe:	f7f5 fa4d 	bl	800015c <__adddf3>
 800acc2:	f7f5 feb1 	bl	8000a28 <__aeabi_d2iz>
 800acc6:	4605      	mov	r5, r0
 800acc8:	f7f5 fb94 	bl	80003f4 <__aeabi_i2d>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acd4:	a364      	add	r3, pc, #400	; (adr r3, 800ae68 <__ieee754_rem_pio2+0x2d8>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fbf5 	bl	80004c8 <__aeabi_dmul>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4630      	mov	r0, r6
 800ace4:	4639      	mov	r1, r7
 800ace6:	f7f5 fa37 	bl	8000158 <__aeabi_dsub>
 800acea:	a361      	add	r3, pc, #388	; (adr r3, 800ae70 <__ieee754_rem_pio2+0x2e0>)
 800acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf0:	4680      	mov	r8, r0
 800acf2:	4689      	mov	r9, r1
 800acf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acf8:	f7f5 fbe6 	bl	80004c8 <__aeabi_dmul>
 800acfc:	2d1f      	cmp	r5, #31
 800acfe:	4606      	mov	r6, r0
 800ad00:	460f      	mov	r7, r1
 800ad02:	dc0e      	bgt.n	800ad22 <__ieee754_rem_pio2+0x192>
 800ad04:	4b6b      	ldr	r3, [pc, #428]	; (800aeb4 <__ieee754_rem_pio2+0x324>)
 800ad06:	1e6a      	subs	r2, r5, #1
 800ad08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad0c:	4553      	cmp	r3, sl
 800ad0e:	d008      	beq.n	800ad22 <__ieee754_rem_pio2+0x192>
 800ad10:	4632      	mov	r2, r6
 800ad12:	463b      	mov	r3, r7
 800ad14:	4640      	mov	r0, r8
 800ad16:	4649      	mov	r1, r9
 800ad18:	f7f5 fa1e 	bl	8000158 <__aeabi_dsub>
 800ad1c:	e9c4 0100 	strd	r0, r1, [r4]
 800ad20:	e012      	b.n	800ad48 <__ieee754_rem_pio2+0x1b8>
 800ad22:	463b      	mov	r3, r7
 800ad24:	4632      	mov	r2, r6
 800ad26:	4640      	mov	r0, r8
 800ad28:	4649      	mov	r1, r9
 800ad2a:	f7f5 fa15 	bl	8000158 <__aeabi_dsub>
 800ad2e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800ad32:	9305      	str	r3, [sp, #20]
 800ad34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad38:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800ad3c:	2b10      	cmp	r3, #16
 800ad3e:	dc1f      	bgt.n	800ad80 <__ieee754_rem_pio2+0x1f0>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	e9c4 2300 	strd	r2, r3, [r4]
 800ad48:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	4653      	mov	r3, sl
 800ad50:	4649      	mov	r1, r9
 800ad52:	f7f5 fa01 	bl	8000158 <__aeabi_dsub>
 800ad56:	4632      	mov	r2, r6
 800ad58:	463b      	mov	r3, r7
 800ad5a:	f7f5 f9fd 	bl	8000158 <__aeabi_dsub>
 800ad5e:	460b      	mov	r3, r1
 800ad60:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad64:	9904      	ldr	r1, [sp, #16]
 800ad66:	4602      	mov	r2, r0
 800ad68:	2900      	cmp	r1, #0
 800ad6a:	f6bf af48 	bge.w	800abfe <__ieee754_rem_pio2+0x6e>
 800ad6e:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800ad72:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ad76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad7a:	60e3      	str	r3, [r4, #12]
 800ad7c:	426d      	negs	r5, r5
 800ad7e:	e73e      	b.n	800abfe <__ieee754_rem_pio2+0x6e>
 800ad80:	a33d      	add	r3, pc, #244	; (adr r3, 800ae78 <__ieee754_rem_pio2+0x2e8>)
 800ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad8a:	f7f5 fb9d 	bl	80004c8 <__aeabi_dmul>
 800ad8e:	4606      	mov	r6, r0
 800ad90:	460f      	mov	r7, r1
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4640      	mov	r0, r8
 800ad98:	4649      	mov	r1, r9
 800ad9a:	f7f5 f9dd 	bl	8000158 <__aeabi_dsub>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4682      	mov	sl, r0
 800ada4:	468b      	mov	fp, r1
 800ada6:	4640      	mov	r0, r8
 800ada8:	4649      	mov	r1, r9
 800adaa:	f7f5 f9d5 	bl	8000158 <__aeabi_dsub>
 800adae:	4632      	mov	r2, r6
 800adb0:	463b      	mov	r3, r7
 800adb2:	f7f5 f9d1 	bl	8000158 <__aeabi_dsub>
 800adb6:	a332      	add	r3, pc, #200	; (adr r3, 800ae80 <__ieee754_rem_pio2+0x2f0>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	4606      	mov	r6, r0
 800adbe:	460f      	mov	r7, r1
 800adc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc4:	f7f5 fb80 	bl	80004c8 <__aeabi_dmul>
 800adc8:	4632      	mov	r2, r6
 800adca:	463b      	mov	r3, r7
 800adcc:	f7f5 f9c4 	bl	8000158 <__aeabi_dsub>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4606      	mov	r6, r0
 800add6:	460f      	mov	r7, r1
 800add8:	4650      	mov	r0, sl
 800adda:	4659      	mov	r1, fp
 800addc:	f7f5 f9bc 	bl	8000158 <__aeabi_dsub>
 800ade0:	9a05      	ldr	r2, [sp, #20]
 800ade2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	2b31      	cmp	r3, #49	; 0x31
 800adea:	dc06      	bgt.n	800adfa <__ieee754_rem_pio2+0x26a>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	46d0      	mov	r8, sl
 800adf2:	46d9      	mov	r9, fp
 800adf4:	e9c4 2300 	strd	r2, r3, [r4]
 800adf8:	e7a6      	b.n	800ad48 <__ieee754_rem_pio2+0x1b8>
 800adfa:	a325      	add	r3, pc, #148	; (adr r3, 800ae90 <__ieee754_rem_pio2+0x300>)
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae04:	f7f5 fb60 	bl	80004c8 <__aeabi_dmul>
 800ae08:	4606      	mov	r6, r0
 800ae0a:	460f      	mov	r7, r1
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4650      	mov	r0, sl
 800ae12:	4659      	mov	r1, fp
 800ae14:	f7f5 f9a0 	bl	8000158 <__aeabi_dsub>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4680      	mov	r8, r0
 800ae1e:	4689      	mov	r9, r1
 800ae20:	4650      	mov	r0, sl
 800ae22:	4659      	mov	r1, fp
 800ae24:	f7f5 f998 	bl	8000158 <__aeabi_dsub>
 800ae28:	4632      	mov	r2, r6
 800ae2a:	463b      	mov	r3, r7
 800ae2c:	f7f5 f994 	bl	8000158 <__aeabi_dsub>
 800ae30:	a319      	add	r3, pc, #100	; (adr r3, 800ae98 <__ieee754_rem_pio2+0x308>)
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	4606      	mov	r6, r0
 800ae38:	460f      	mov	r7, r1
 800ae3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae3e:	f7f5 fb43 	bl	80004c8 <__aeabi_dmul>
 800ae42:	4632      	mov	r2, r6
 800ae44:	463b      	mov	r3, r7
 800ae46:	f7f5 f987 	bl	8000158 <__aeabi_dsub>
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460f      	mov	r7, r1
 800ae4e:	e75f      	b.n	800ad10 <__ieee754_rem_pio2+0x180>
 800ae50:	4a19      	ldr	r2, [pc, #100]	; (800aeb8 <__ieee754_rem_pio2+0x328>)
 800ae52:	4592      	cmp	sl, r2
 800ae54:	dd32      	ble.n	800aebc <__ieee754_rem_pio2+0x32c>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	f7f5 f97d 	bl	8000158 <__aeabi_dsub>
 800ae5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae62:	e9c4 0100 	strd	r0, r1, [r4]
 800ae66:	e6a3      	b.n	800abb0 <__ieee754_rem_pio2+0x20>
 800ae68:	54400000 	.word	0x54400000
 800ae6c:	3ff921fb 	.word	0x3ff921fb
 800ae70:	1a626331 	.word	0x1a626331
 800ae74:	3dd0b461 	.word	0x3dd0b461
 800ae78:	1a600000 	.word	0x1a600000
 800ae7c:	3dd0b461 	.word	0x3dd0b461
 800ae80:	2e037073 	.word	0x2e037073
 800ae84:	3ba3198a 	.word	0x3ba3198a
 800ae88:	6dc9c883 	.word	0x6dc9c883
 800ae8c:	3fe45f30 	.word	0x3fe45f30
 800ae90:	2e000000 	.word	0x2e000000
 800ae94:	3ba3198a 	.word	0x3ba3198a
 800ae98:	252049c1 	.word	0x252049c1
 800ae9c:	397b839a 	.word	0x397b839a
 800aea0:	3fe921fb 	.word	0x3fe921fb
 800aea4:	4002d97b 	.word	0x4002d97b
 800aea8:	3ff921fb 	.word	0x3ff921fb
 800aeac:	413921fb 	.word	0x413921fb
 800aeb0:	3fe00000 	.word	0x3fe00000
 800aeb4:	0800bc58 	.word	0x0800bc58
 800aeb8:	7fefffff 	.word	0x7fefffff
 800aebc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800aec0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800aec4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800aec8:	460f      	mov	r7, r1
 800aeca:	4606      	mov	r6, r0
 800aecc:	f7f5 fdac 	bl	8000a28 <__aeabi_d2iz>
 800aed0:	f7f5 fa90 	bl	80003f4 <__aeabi_i2d>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	4630      	mov	r0, r6
 800aeda:	4639      	mov	r1, r7
 800aedc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aee0:	f7f5 f93a 	bl	8000158 <__aeabi_dsub>
 800aee4:	2200      	movs	r2, #0
 800aee6:	4b22      	ldr	r3, [pc, #136]	; (800af70 <__ieee754_rem_pio2+0x3e0>)
 800aee8:	f7f5 faee 	bl	80004c8 <__aeabi_dmul>
 800aeec:	460f      	mov	r7, r1
 800aeee:	4606      	mov	r6, r0
 800aef0:	f7f5 fd9a 	bl	8000a28 <__aeabi_d2iz>
 800aef4:	f7f5 fa7e 	bl	80003f4 <__aeabi_i2d>
 800aef8:	4602      	mov	r2, r0
 800aefa:	460b      	mov	r3, r1
 800aefc:	4630      	mov	r0, r6
 800aefe:	4639      	mov	r1, r7
 800af00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af04:	f7f5 f928 	bl	8000158 <__aeabi_dsub>
 800af08:	2200      	movs	r2, #0
 800af0a:	4b19      	ldr	r3, [pc, #100]	; (800af70 <__ieee754_rem_pio2+0x3e0>)
 800af0c:	f7f5 fadc 	bl	80004c8 <__aeabi_dmul>
 800af10:	f04f 0803 	mov.w	r8, #3
 800af14:	2600      	movs	r6, #0
 800af16:	2700      	movs	r7, #0
 800af18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af1c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800af20:	4632      	mov	r2, r6
 800af22:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800af26:	463b      	mov	r3, r7
 800af28:	46c2      	mov	sl, r8
 800af2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800af2e:	f7f5 fd33 	bl	8000998 <__aeabi_dcmpeq>
 800af32:	2800      	cmp	r0, #0
 800af34:	d1f4      	bne.n	800af20 <__ieee754_rem_pio2+0x390>
 800af36:	4b0f      	ldr	r3, [pc, #60]	; (800af74 <__ieee754_rem_pio2+0x3e4>)
 800af38:	462a      	mov	r2, r5
 800af3a:	9301      	str	r3, [sp, #4]
 800af3c:	2302      	movs	r3, #2
 800af3e:	4621      	mov	r1, r4
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	a806      	add	r0, sp, #24
 800af44:	4653      	mov	r3, sl
 800af46:	f000 f9a5 	bl	800b294 <__kernel_rem_pio2>
 800af4a:	9b04      	ldr	r3, [sp, #16]
 800af4c:	4605      	mov	r5, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f6bf ae55 	bge.w	800abfe <__ieee754_rem_pio2+0x6e>
 800af54:	e9d4 2100 	ldrd	r2, r1, [r4]
 800af58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af5c:	e9c4 2300 	strd	r2, r3, [r4]
 800af60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800af64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800af6c:	e706      	b.n	800ad7c <__ieee754_rem_pio2+0x1ec>
 800af6e:	bf00      	nop
 800af70:	41700000 	.word	0x41700000
 800af74:	0800bcd8 	.word	0x0800bcd8

0800af78 <atan>:
 800af78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7c:	4bb6      	ldr	r3, [pc, #728]	; (800b258 <atan+0x2e0>)
 800af7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af82:	429e      	cmp	r6, r3
 800af84:	4604      	mov	r4, r0
 800af86:	460d      	mov	r5, r1
 800af88:	468b      	mov	fp, r1
 800af8a:	dd17      	ble.n	800afbc <atan+0x44>
 800af8c:	4bb3      	ldr	r3, [pc, #716]	; (800b25c <atan+0x2e4>)
 800af8e:	429e      	cmp	r6, r3
 800af90:	dc01      	bgt.n	800af96 <atan+0x1e>
 800af92:	d109      	bne.n	800afa8 <atan+0x30>
 800af94:	b140      	cbz	r0, 800afa8 <atan+0x30>
 800af96:	4622      	mov	r2, r4
 800af98:	462b      	mov	r3, r5
 800af9a:	4620      	mov	r0, r4
 800af9c:	4629      	mov	r1, r5
 800af9e:	f7f5 f8dd 	bl	800015c <__adddf3>
 800afa2:	4604      	mov	r4, r0
 800afa4:	460d      	mov	r5, r1
 800afa6:	e005      	b.n	800afb4 <atan+0x3c>
 800afa8:	f1bb 0f00 	cmp.w	fp, #0
 800afac:	4cac      	ldr	r4, [pc, #688]	; (800b260 <atan+0x2e8>)
 800afae:	f300 8121 	bgt.w	800b1f4 <atan+0x27c>
 800afb2:	4dac      	ldr	r5, [pc, #688]	; (800b264 <atan+0x2ec>)
 800afb4:	4620      	mov	r0, r4
 800afb6:	4629      	mov	r1, r5
 800afb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbc:	4baa      	ldr	r3, [pc, #680]	; (800b268 <atan+0x2f0>)
 800afbe:	429e      	cmp	r6, r3
 800afc0:	dc11      	bgt.n	800afe6 <atan+0x6e>
 800afc2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800afc6:	429e      	cmp	r6, r3
 800afc8:	dc0a      	bgt.n	800afe0 <atan+0x68>
 800afca:	a38b      	add	r3, pc, #556	; (adr r3, 800b1f8 <atan+0x280>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f7f5 f8c4 	bl	800015c <__adddf3>
 800afd4:	2200      	movs	r2, #0
 800afd6:	4ba5      	ldr	r3, [pc, #660]	; (800b26c <atan+0x2f4>)
 800afd8:	f7f5 fd06 	bl	80009e8 <__aeabi_dcmpgt>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d1e9      	bne.n	800afb4 <atan+0x3c>
 800afe0:	f04f 3aff 	mov.w	sl, #4294967295
 800afe4:	e027      	b.n	800b036 <atan+0xbe>
 800afe6:	f000 f951 	bl	800b28c <fabs>
 800afea:	4ba1      	ldr	r3, [pc, #644]	; (800b270 <atan+0x2f8>)
 800afec:	4604      	mov	r4, r0
 800afee:	429e      	cmp	r6, r3
 800aff0:	460d      	mov	r5, r1
 800aff2:	f300 80b8 	bgt.w	800b166 <atan+0x1ee>
 800aff6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800affa:	429e      	cmp	r6, r3
 800affc:	f300 809c 	bgt.w	800b138 <atan+0x1c0>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	f7f5 f8aa 	bl	800015c <__adddf3>
 800b008:	2200      	movs	r2, #0
 800b00a:	4b98      	ldr	r3, [pc, #608]	; (800b26c <atan+0x2f4>)
 800b00c:	f7f5 f8a4 	bl	8000158 <__aeabi_dsub>
 800b010:	2200      	movs	r2, #0
 800b012:	4606      	mov	r6, r0
 800b014:	460f      	mov	r7, r1
 800b016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b01a:	4620      	mov	r0, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	f7f5 f89d 	bl	800015c <__adddf3>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4630      	mov	r0, r6
 800b028:	4639      	mov	r1, r7
 800b02a:	f7f5 fb77 	bl	800071c <__aeabi_ddiv>
 800b02e:	f04f 0a00 	mov.w	sl, #0
 800b032:	4604      	mov	r4, r0
 800b034:	460d      	mov	r5, r1
 800b036:	4622      	mov	r2, r4
 800b038:	462b      	mov	r3, r5
 800b03a:	4620      	mov	r0, r4
 800b03c:	4629      	mov	r1, r5
 800b03e:	f7f5 fa43 	bl	80004c8 <__aeabi_dmul>
 800b042:	4602      	mov	r2, r0
 800b044:	460b      	mov	r3, r1
 800b046:	4680      	mov	r8, r0
 800b048:	4689      	mov	r9, r1
 800b04a:	f7f5 fa3d 	bl	80004c8 <__aeabi_dmul>
 800b04e:	a36c      	add	r3, pc, #432	; (adr r3, 800b200 <atan+0x288>)
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	4606      	mov	r6, r0
 800b056:	460f      	mov	r7, r1
 800b058:	f7f5 fa36 	bl	80004c8 <__aeabi_dmul>
 800b05c:	a36a      	add	r3, pc, #424	; (adr r3, 800b208 <atan+0x290>)
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	f7f5 f87b 	bl	800015c <__adddf3>
 800b066:	4632      	mov	r2, r6
 800b068:	463b      	mov	r3, r7
 800b06a:	f7f5 fa2d 	bl	80004c8 <__aeabi_dmul>
 800b06e:	a368      	add	r3, pc, #416	; (adr r3, 800b210 <atan+0x298>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 f872 	bl	800015c <__adddf3>
 800b078:	4632      	mov	r2, r6
 800b07a:	463b      	mov	r3, r7
 800b07c:	f7f5 fa24 	bl	80004c8 <__aeabi_dmul>
 800b080:	a365      	add	r3, pc, #404	; (adr r3, 800b218 <atan+0x2a0>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f7f5 f869 	bl	800015c <__adddf3>
 800b08a:	4632      	mov	r2, r6
 800b08c:	463b      	mov	r3, r7
 800b08e:	f7f5 fa1b 	bl	80004c8 <__aeabi_dmul>
 800b092:	a363      	add	r3, pc, #396	; (adr r3, 800b220 <atan+0x2a8>)
 800b094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b098:	f7f5 f860 	bl	800015c <__adddf3>
 800b09c:	4632      	mov	r2, r6
 800b09e:	463b      	mov	r3, r7
 800b0a0:	f7f5 fa12 	bl	80004c8 <__aeabi_dmul>
 800b0a4:	a360      	add	r3, pc, #384	; (adr r3, 800b228 <atan+0x2b0>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 f857 	bl	800015c <__adddf3>
 800b0ae:	4642      	mov	r2, r8
 800b0b0:	464b      	mov	r3, r9
 800b0b2:	f7f5 fa09 	bl	80004c8 <__aeabi_dmul>
 800b0b6:	a35e      	add	r3, pc, #376	; (adr r3, 800b230 <atan+0x2b8>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	4680      	mov	r8, r0
 800b0be:	4689      	mov	r9, r1
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	f7f5 fa00 	bl	80004c8 <__aeabi_dmul>
 800b0c8:	a35b      	add	r3, pc, #364	; (adr r3, 800b238 <atan+0x2c0>)
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	f7f5 f843 	bl	8000158 <__aeabi_dsub>
 800b0d2:	4632      	mov	r2, r6
 800b0d4:	463b      	mov	r3, r7
 800b0d6:	f7f5 f9f7 	bl	80004c8 <__aeabi_dmul>
 800b0da:	a359      	add	r3, pc, #356	; (adr r3, 800b240 <atan+0x2c8>)
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f7f5 f83a 	bl	8000158 <__aeabi_dsub>
 800b0e4:	4632      	mov	r2, r6
 800b0e6:	463b      	mov	r3, r7
 800b0e8:	f7f5 f9ee 	bl	80004c8 <__aeabi_dmul>
 800b0ec:	a356      	add	r3, pc, #344	; (adr r3, 800b248 <atan+0x2d0>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	f7f5 f831 	bl	8000158 <__aeabi_dsub>
 800b0f6:	4632      	mov	r2, r6
 800b0f8:	463b      	mov	r3, r7
 800b0fa:	f7f5 f9e5 	bl	80004c8 <__aeabi_dmul>
 800b0fe:	a354      	add	r3, pc, #336	; (adr r3, 800b250 <atan+0x2d8>)
 800b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b104:	f7f5 f828 	bl	8000158 <__aeabi_dsub>
 800b108:	4632      	mov	r2, r6
 800b10a:	463b      	mov	r3, r7
 800b10c:	f7f5 f9dc 	bl	80004c8 <__aeabi_dmul>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4640      	mov	r0, r8
 800b116:	4649      	mov	r1, r9
 800b118:	f7f5 f820 	bl	800015c <__adddf3>
 800b11c:	4622      	mov	r2, r4
 800b11e:	462b      	mov	r3, r5
 800b120:	f7f5 f9d2 	bl	80004c8 <__aeabi_dmul>
 800b124:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	d144      	bne.n	800b1b8 <atan+0x240>
 800b12e:	4620      	mov	r0, r4
 800b130:	4629      	mov	r1, r5
 800b132:	f7f5 f811 	bl	8000158 <__aeabi_dsub>
 800b136:	e734      	b.n	800afa2 <atan+0x2a>
 800b138:	2200      	movs	r2, #0
 800b13a:	4b4c      	ldr	r3, [pc, #304]	; (800b26c <atan+0x2f4>)
 800b13c:	f7f5 f80c 	bl	8000158 <__aeabi_dsub>
 800b140:	2200      	movs	r2, #0
 800b142:	4606      	mov	r6, r0
 800b144:	460f      	mov	r7, r1
 800b146:	4620      	mov	r0, r4
 800b148:	4629      	mov	r1, r5
 800b14a:	4b48      	ldr	r3, [pc, #288]	; (800b26c <atan+0x2f4>)
 800b14c:	f7f5 f806 	bl	800015c <__adddf3>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4630      	mov	r0, r6
 800b156:	4639      	mov	r1, r7
 800b158:	f7f5 fae0 	bl	800071c <__aeabi_ddiv>
 800b15c:	f04f 0a01 	mov.w	sl, #1
 800b160:	4604      	mov	r4, r0
 800b162:	460d      	mov	r5, r1
 800b164:	e767      	b.n	800b036 <atan+0xbe>
 800b166:	4b43      	ldr	r3, [pc, #268]	; (800b274 <atan+0x2fc>)
 800b168:	429e      	cmp	r6, r3
 800b16a:	da1a      	bge.n	800b1a2 <atan+0x22a>
 800b16c:	2200      	movs	r2, #0
 800b16e:	4b42      	ldr	r3, [pc, #264]	; (800b278 <atan+0x300>)
 800b170:	f7f4 fff2 	bl	8000158 <__aeabi_dsub>
 800b174:	2200      	movs	r2, #0
 800b176:	4606      	mov	r6, r0
 800b178:	460f      	mov	r7, r1
 800b17a:	4620      	mov	r0, r4
 800b17c:	4629      	mov	r1, r5
 800b17e:	4b3e      	ldr	r3, [pc, #248]	; (800b278 <atan+0x300>)
 800b180:	f7f5 f9a2 	bl	80004c8 <__aeabi_dmul>
 800b184:	2200      	movs	r2, #0
 800b186:	4b39      	ldr	r3, [pc, #228]	; (800b26c <atan+0x2f4>)
 800b188:	f7f4 ffe8 	bl	800015c <__adddf3>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4630      	mov	r0, r6
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 fac2 	bl	800071c <__aeabi_ddiv>
 800b198:	f04f 0a02 	mov.w	sl, #2
 800b19c:	4604      	mov	r4, r0
 800b19e:	460d      	mov	r5, r1
 800b1a0:	e749      	b.n	800b036 <atan+0xbe>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	4934      	ldr	r1, [pc, #208]	; (800b27c <atan+0x304>)
 800b1aa:	f7f5 fab7 	bl	800071c <__aeabi_ddiv>
 800b1ae:	f04f 0a03 	mov.w	sl, #3
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	e73e      	b.n	800b036 <atan+0xbe>
 800b1b8:	4b31      	ldr	r3, [pc, #196]	; (800b280 <atan+0x308>)
 800b1ba:	4e32      	ldr	r6, [pc, #200]	; (800b284 <atan+0x30c>)
 800b1bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	f7f4 ffc8 	bl	8000158 <__aeabi_dsub>
 800b1c8:	4622      	mov	r2, r4
 800b1ca:	462b      	mov	r3, r5
 800b1cc:	f7f4 ffc4 	bl	8000158 <__aeabi_dsub>
 800b1d0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b1dc:	f7f4 ffbc 	bl	8000158 <__aeabi_dsub>
 800b1e0:	f1bb 0f00 	cmp.w	fp, #0
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	f6bf aee4 	bge.w	800afb4 <atan+0x3c>
 800b1ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1f0:	461d      	mov	r5, r3
 800b1f2:	e6df      	b.n	800afb4 <atan+0x3c>
 800b1f4:	4d24      	ldr	r5, [pc, #144]	; (800b288 <atan+0x310>)
 800b1f6:	e6dd      	b.n	800afb4 <atan+0x3c>
 800b1f8:	8800759c 	.word	0x8800759c
 800b1fc:	7e37e43c 	.word	0x7e37e43c
 800b200:	e322da11 	.word	0xe322da11
 800b204:	3f90ad3a 	.word	0x3f90ad3a
 800b208:	24760deb 	.word	0x24760deb
 800b20c:	3fa97b4b 	.word	0x3fa97b4b
 800b210:	a0d03d51 	.word	0xa0d03d51
 800b214:	3fb10d66 	.word	0x3fb10d66
 800b218:	c54c206e 	.word	0xc54c206e
 800b21c:	3fb745cd 	.word	0x3fb745cd
 800b220:	920083ff 	.word	0x920083ff
 800b224:	3fc24924 	.word	0x3fc24924
 800b228:	5555550d 	.word	0x5555550d
 800b22c:	3fd55555 	.word	0x3fd55555
 800b230:	2c6a6c2f 	.word	0x2c6a6c2f
 800b234:	bfa2b444 	.word	0xbfa2b444
 800b238:	52defd9a 	.word	0x52defd9a
 800b23c:	3fadde2d 	.word	0x3fadde2d
 800b240:	af749a6d 	.word	0xaf749a6d
 800b244:	3fb3b0f2 	.word	0x3fb3b0f2
 800b248:	fe231671 	.word	0xfe231671
 800b24c:	3fbc71c6 	.word	0x3fbc71c6
 800b250:	9998ebc4 	.word	0x9998ebc4
 800b254:	3fc99999 	.word	0x3fc99999
 800b258:	440fffff 	.word	0x440fffff
 800b25c:	7ff00000 	.word	0x7ff00000
 800b260:	54442d18 	.word	0x54442d18
 800b264:	bff921fb 	.word	0xbff921fb
 800b268:	3fdbffff 	.word	0x3fdbffff
 800b26c:	3ff00000 	.word	0x3ff00000
 800b270:	3ff2ffff 	.word	0x3ff2ffff
 800b274:	40038000 	.word	0x40038000
 800b278:	3ff80000 	.word	0x3ff80000
 800b27c:	bff00000 	.word	0xbff00000
 800b280:	0800be00 	.word	0x0800be00
 800b284:	0800bde0 	.word	0x0800bde0
 800b288:	3ff921fb 	.word	0x3ff921fb

0800b28c <fabs>:
 800b28c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b290:	4619      	mov	r1, r3
 800b292:	4770      	bx	lr

0800b294 <__kernel_rem_pio2>:
 800b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b298:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b29c:	9308      	str	r3, [sp, #32]
 800b29e:	9106      	str	r1, [sp, #24]
 800b2a0:	4bb6      	ldr	r3, [pc, #728]	; (800b57c <__kernel_rem_pio2+0x2e8>)
 800b2a2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b2a4:	f112 0f14 	cmn.w	r2, #20
 800b2a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2ac:	bfa8      	it	ge
 800b2ae:	1ed4      	subge	r4, r2, #3
 800b2b0:	9302      	str	r3, [sp, #8]
 800b2b2:	9b08      	ldr	r3, [sp, #32]
 800b2b4:	bfb8      	it	lt
 800b2b6:	2400      	movlt	r4, #0
 800b2b8:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2bc:	9307      	str	r3, [sp, #28]
 800b2be:	bfa4      	itt	ge
 800b2c0:	2318      	movge	r3, #24
 800b2c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800b2c6:	f06f 0317 	mvn.w	r3, #23
 800b2ca:	fb04 3303 	mla	r3, r4, r3, r3
 800b2ce:	eb03 0b02 	add.w	fp, r3, r2
 800b2d2:	9a07      	ldr	r2, [sp, #28]
 800b2d4:	9b02      	ldr	r3, [sp, #8]
 800b2d6:	1aa7      	subs	r7, r4, r2
 800b2d8:	eb03 0802 	add.w	r8, r3, r2
 800b2dc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b2de:	2500      	movs	r5, #0
 800b2e0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9009      	str	r0, [sp, #36]	; 0x24
 800b2ea:	ae20      	add	r6, sp, #128	; 0x80
 800b2ec:	4545      	cmp	r5, r8
 800b2ee:	dd14      	ble.n	800b31a <__kernel_rem_pio2+0x86>
 800b2f0:	f04f 0800 	mov.w	r8, #0
 800b2f4:	9a08      	ldr	r2, [sp, #32]
 800b2f6:	ab20      	add	r3, sp, #128	; 0x80
 800b2f8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800b2fc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800b300:	9b02      	ldr	r3, [sp, #8]
 800b302:	4598      	cmp	r8, r3
 800b304:	dc35      	bgt.n	800b372 <__kernel_rem_pio2+0xde>
 800b306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b308:	2200      	movs	r2, #0
 800b30a:	f1a3 0908 	sub.w	r9, r3, #8
 800b30e:	2300      	movs	r3, #0
 800b310:	462f      	mov	r7, r5
 800b312:	2600      	movs	r6, #0
 800b314:	e9cd 2300 	strd	r2, r3, [sp]
 800b318:	e01f      	b.n	800b35a <__kernel_rem_pio2+0xc6>
 800b31a:	42ef      	cmn	r7, r5
 800b31c:	d40b      	bmi.n	800b336 <__kernel_rem_pio2+0xa2>
 800b31e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b322:	e9cd 2300 	strd	r2, r3, [sp]
 800b326:	f7f5 f865 	bl	80003f4 <__aeabi_i2d>
 800b32a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b32e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b332:	3501      	adds	r5, #1
 800b334:	e7da      	b.n	800b2ec <__kernel_rem_pio2+0x58>
 800b336:	4610      	mov	r0, r2
 800b338:	4619      	mov	r1, r3
 800b33a:	e7f8      	b.n	800b32e <__kernel_rem_pio2+0x9a>
 800b33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b340:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b344:	f7f5 f8c0 	bl	80004c8 <__aeabi_dmul>
 800b348:	4602      	mov	r2, r0
 800b34a:	460b      	mov	r3, r1
 800b34c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b350:	f7f4 ff04 	bl	800015c <__adddf3>
 800b354:	e9cd 0100 	strd	r0, r1, [sp]
 800b358:	3601      	adds	r6, #1
 800b35a:	9b07      	ldr	r3, [sp, #28]
 800b35c:	3f08      	subs	r7, #8
 800b35e:	429e      	cmp	r6, r3
 800b360:	ddec      	ble.n	800b33c <__kernel_rem_pio2+0xa8>
 800b362:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b366:	f108 0801 	add.w	r8, r8, #1
 800b36a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800b36e:	3508      	adds	r5, #8
 800b370:	e7c6      	b.n	800b300 <__kernel_rem_pio2+0x6c>
 800b372:	9b02      	ldr	r3, [sp, #8]
 800b374:	aa0c      	add	r2, sp, #48	; 0x30
 800b376:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b37a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b37c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b37e:	9e02      	ldr	r6, [sp, #8]
 800b380:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b384:	930a      	str	r3, [sp, #40]	; 0x28
 800b386:	ab98      	add	r3, sp, #608	; 0x260
 800b388:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b38c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800b390:	ab70      	add	r3, sp, #448	; 0x1c0
 800b392:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800b396:	46d0      	mov	r8, sl
 800b398:	46b1      	mov	r9, r6
 800b39a:	af0c      	add	r7, sp, #48	; 0x30
 800b39c:	9700      	str	r7, [sp, #0]
 800b39e:	f1b9 0f00 	cmp.w	r9, #0
 800b3a2:	f1a8 0808 	sub.w	r8, r8, #8
 800b3a6:	dc70      	bgt.n	800b48a <__kernel_rem_pio2+0x1f6>
 800b3a8:	465a      	mov	r2, fp
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	f000 fab3 	bl	800b918 <scalbn>
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	f7f5 f884 	bl	80004c8 <__aeabi_dmul>
 800b3c0:	f000 fb26 	bl	800ba10 <floor>
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	4b6e      	ldr	r3, [pc, #440]	; (800b580 <__kernel_rem_pio2+0x2ec>)
 800b3c8:	f7f5 f87e 	bl	80004c8 <__aeabi_dmul>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	f7f4 fec0 	bl	8000158 <__aeabi_dsub>
 800b3d8:	460d      	mov	r5, r1
 800b3da:	4604      	mov	r4, r0
 800b3dc:	f7f5 fb24 	bl	8000a28 <__aeabi_d2iz>
 800b3e0:	9004      	str	r0, [sp, #16]
 800b3e2:	f7f5 f807 	bl	80003f4 <__aeabi_i2d>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	f7f4 feb3 	bl	8000158 <__aeabi_dsub>
 800b3f2:	f1bb 0f00 	cmp.w	fp, #0
 800b3f6:	4680      	mov	r8, r0
 800b3f8:	4689      	mov	r9, r1
 800b3fa:	dd6f      	ble.n	800b4dc <__kernel_rem_pio2+0x248>
 800b3fc:	1e71      	subs	r1, r6, #1
 800b3fe:	ab0c      	add	r3, sp, #48	; 0x30
 800b400:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b404:	9c04      	ldr	r4, [sp, #16]
 800b406:	f1cb 0018 	rsb	r0, fp, #24
 800b40a:	fa43 f200 	asr.w	r2, r3, r0
 800b40e:	4414      	add	r4, r2
 800b410:	4082      	lsls	r2, r0
 800b412:	1a9b      	subs	r3, r3, r2
 800b414:	aa0c      	add	r2, sp, #48	; 0x30
 800b416:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b41a:	f1cb 0217 	rsb	r2, fp, #23
 800b41e:	9404      	str	r4, [sp, #16]
 800b420:	4113      	asrs	r3, r2
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	9b00      	ldr	r3, [sp, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	dd66      	ble.n	800b4f8 <__kernel_rem_pio2+0x264>
 800b42a:	2200      	movs	r2, #0
 800b42c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b430:	4614      	mov	r4, r2
 800b432:	9b04      	ldr	r3, [sp, #16]
 800b434:	3301      	adds	r3, #1
 800b436:	9304      	str	r3, [sp, #16]
 800b438:	4296      	cmp	r6, r2
 800b43a:	f300 80ad 	bgt.w	800b598 <__kernel_rem_pio2+0x304>
 800b43e:	f1bb 0f00 	cmp.w	fp, #0
 800b442:	dd07      	ble.n	800b454 <__kernel_rem_pio2+0x1c0>
 800b444:	f1bb 0f01 	cmp.w	fp, #1
 800b448:	f000 80b5 	beq.w	800b5b6 <__kernel_rem_pio2+0x322>
 800b44c:	f1bb 0f02 	cmp.w	fp, #2
 800b450:	f000 80bb 	beq.w	800b5ca <__kernel_rem_pio2+0x336>
 800b454:	9b00      	ldr	r3, [sp, #0]
 800b456:	2b02      	cmp	r3, #2
 800b458:	d14e      	bne.n	800b4f8 <__kernel_rem_pio2+0x264>
 800b45a:	4642      	mov	r2, r8
 800b45c:	464b      	mov	r3, r9
 800b45e:	2000      	movs	r0, #0
 800b460:	4948      	ldr	r1, [pc, #288]	; (800b584 <__kernel_rem_pio2+0x2f0>)
 800b462:	f7f4 fe79 	bl	8000158 <__aeabi_dsub>
 800b466:	4680      	mov	r8, r0
 800b468:	4689      	mov	r9, r1
 800b46a:	2c00      	cmp	r4, #0
 800b46c:	d044      	beq.n	800b4f8 <__kernel_rem_pio2+0x264>
 800b46e:	465a      	mov	r2, fp
 800b470:	2000      	movs	r0, #0
 800b472:	4944      	ldr	r1, [pc, #272]	; (800b584 <__kernel_rem_pio2+0x2f0>)
 800b474:	f000 fa50 	bl	800b918 <scalbn>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	4640      	mov	r0, r8
 800b47e:	4649      	mov	r1, r9
 800b480:	f7f4 fe6a 	bl	8000158 <__aeabi_dsub>
 800b484:	4680      	mov	r8, r0
 800b486:	4689      	mov	r9, r1
 800b488:	e036      	b.n	800b4f8 <__kernel_rem_pio2+0x264>
 800b48a:	2200      	movs	r2, #0
 800b48c:	4b3e      	ldr	r3, [pc, #248]	; (800b588 <__kernel_rem_pio2+0x2f4>)
 800b48e:	4620      	mov	r0, r4
 800b490:	4629      	mov	r1, r5
 800b492:	f7f5 f819 	bl	80004c8 <__aeabi_dmul>
 800b496:	f7f5 fac7 	bl	8000a28 <__aeabi_d2iz>
 800b49a:	f7f4 ffab 	bl	80003f4 <__aeabi_i2d>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	4b38      	ldr	r3, [pc, #224]	; (800b58c <__kernel_rem_pio2+0x2f8>)
 800b4aa:	f7f5 f80d 	bl	80004c8 <__aeabi_dmul>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	f7f4 fe4f 	bl	8000158 <__aeabi_dsub>
 800b4ba:	f7f5 fab5 	bl	8000a28 <__aeabi_d2iz>
 800b4be:	9b00      	ldr	r3, [sp, #0]
 800b4c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b4c4:	f843 0b04 	str.w	r0, [r3], #4
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4ce:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b4d2:	f7f4 fe43 	bl	800015c <__adddf3>
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	460d      	mov	r5, r1
 800b4da:	e760      	b.n	800b39e <__kernel_rem_pio2+0x10a>
 800b4dc:	d105      	bne.n	800b4ea <__kernel_rem_pio2+0x256>
 800b4de:	1e73      	subs	r3, r6, #1
 800b4e0:	aa0c      	add	r2, sp, #48	; 0x30
 800b4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4e6:	15db      	asrs	r3, r3, #23
 800b4e8:	e79b      	b.n	800b422 <__kernel_rem_pio2+0x18e>
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	4b28      	ldr	r3, [pc, #160]	; (800b590 <__kernel_rem_pio2+0x2fc>)
 800b4ee:	f7f5 fa71 	bl	80009d4 <__aeabi_dcmpge>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d13e      	bne.n	800b574 <__kernel_rem_pio2+0x2e0>
 800b4f6:	9000      	str	r0, [sp, #0]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	4649      	mov	r1, r9
 800b500:	f7f5 fa4a 	bl	8000998 <__aeabi_dcmpeq>
 800b504:	2800      	cmp	r0, #0
 800b506:	f000 80b2 	beq.w	800b66e <__kernel_rem_pio2+0x3da>
 800b50a:	1e74      	subs	r4, r6, #1
 800b50c:	4623      	mov	r3, r4
 800b50e:	2200      	movs	r2, #0
 800b510:	9902      	ldr	r1, [sp, #8]
 800b512:	428b      	cmp	r3, r1
 800b514:	da60      	bge.n	800b5d8 <__kernel_rem_pio2+0x344>
 800b516:	2a00      	cmp	r2, #0
 800b518:	d075      	beq.n	800b606 <__kernel_rem_pio2+0x372>
 800b51a:	ab0c      	add	r3, sp, #48	; 0x30
 800b51c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b520:	f1ab 0b18 	sub.w	fp, fp, #24
 800b524:	2b00      	cmp	r3, #0
 800b526:	f000 80a0 	beq.w	800b66a <__kernel_rem_pio2+0x3d6>
 800b52a:	465a      	mov	r2, fp
 800b52c:	2000      	movs	r0, #0
 800b52e:	4915      	ldr	r1, [pc, #84]	; (800b584 <__kernel_rem_pio2+0x2f0>)
 800b530:	f000 f9f2 	bl	800b918 <scalbn>
 800b534:	46a2      	mov	sl, r4
 800b536:	4606      	mov	r6, r0
 800b538:	460f      	mov	r7, r1
 800b53a:	f04f 0800 	mov.w	r8, #0
 800b53e:	ab70      	add	r3, sp, #448	; 0x1c0
 800b540:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800b588 <__kernel_rem_pio2+0x2f4>
 800b544:	00e5      	lsls	r5, r4, #3
 800b546:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800b54a:	f1ba 0f00 	cmp.w	sl, #0
 800b54e:	f280 80c4 	bge.w	800b6da <__kernel_rem_pio2+0x446>
 800b552:	4626      	mov	r6, r4
 800b554:	2e00      	cmp	r6, #0
 800b556:	f2c0 80f6 	blt.w	800b746 <__kernel_rem_pio2+0x4b2>
 800b55a:	4b0e      	ldr	r3, [pc, #56]	; (800b594 <__kernel_rem_pio2+0x300>)
 800b55c:	f04f 0a00 	mov.w	sl, #0
 800b560:	9307      	str	r3, [sp, #28]
 800b562:	ab70      	add	r3, sp, #448	; 0x1c0
 800b564:	f04f 0b00 	mov.w	fp, #0
 800b568:	f04f 0800 	mov.w	r8, #0
 800b56c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b570:	1ba7      	subs	r7, r4, r6
 800b572:	e0dc      	b.n	800b72e <__kernel_rem_pio2+0x49a>
 800b574:	2302      	movs	r3, #2
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	e757      	b.n	800b42a <__kernel_rem_pio2+0x196>
 800b57a:	bf00      	nop
 800b57c:	0800be60 	.word	0x0800be60
 800b580:	40200000 	.word	0x40200000
 800b584:	3ff00000 	.word	0x3ff00000
 800b588:	3e700000 	.word	0x3e700000
 800b58c:	41700000 	.word	0x41700000
 800b590:	3fe00000 	.word	0x3fe00000
 800b594:	0800be20 	.word	0x0800be20
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	b944      	cbnz	r4, 800b5ae <__kernel_rem_pio2+0x31a>
 800b59c:	b11b      	cbz	r3, 800b5a6 <__kernel_rem_pio2+0x312>
 800b59e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	461c      	mov	r4, r3
 800b5a8:	3201      	adds	r2, #1
 800b5aa:	3704      	adds	r7, #4
 800b5ac:	e744      	b.n	800b438 <__kernel_rem_pio2+0x1a4>
 800b5ae:	1acb      	subs	r3, r1, r3
 800b5b0:	603b      	str	r3, [r7, #0]
 800b5b2:	4623      	mov	r3, r4
 800b5b4:	e7f7      	b.n	800b5a6 <__kernel_rem_pio2+0x312>
 800b5b6:	1e72      	subs	r2, r6, #1
 800b5b8:	ab0c      	add	r3, sp, #48	; 0x30
 800b5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b5c2:	a90c      	add	r1, sp, #48	; 0x30
 800b5c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b5c8:	e744      	b.n	800b454 <__kernel_rem_pio2+0x1c0>
 800b5ca:	1e72      	subs	r2, r6, #1
 800b5cc:	ab0c      	add	r3, sp, #48	; 0x30
 800b5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b5d6:	e7f4      	b.n	800b5c2 <__kernel_rem_pio2+0x32e>
 800b5d8:	a90c      	add	r1, sp, #48	; 0x30
 800b5da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	430a      	orrs	r2, r1
 800b5e2:	e795      	b.n	800b510 <__kernel_rem_pio2+0x27c>
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b5ea:	2900      	cmp	r1, #0
 800b5ec:	d0fa      	beq.n	800b5e4 <__kernel_rem_pio2+0x350>
 800b5ee:	9a08      	ldr	r2, [sp, #32]
 800b5f0:	a920      	add	r1, sp, #128	; 0x80
 800b5f2:	18b2      	adds	r2, r6, r2
 800b5f4:	f106 0801 	add.w	r8, r6, #1
 800b5f8:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800b5fc:	18f4      	adds	r4, r6, r3
 800b5fe:	4544      	cmp	r4, r8
 800b600:	da04      	bge.n	800b60c <__kernel_rem_pio2+0x378>
 800b602:	4626      	mov	r6, r4
 800b604:	e6bf      	b.n	800b386 <__kernel_rem_pio2+0xf2>
 800b606:	2301      	movs	r3, #1
 800b608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b60a:	e7ec      	b.n	800b5e6 <__kernel_rem_pio2+0x352>
 800b60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b60e:	f04f 0900 	mov.w	r9, #0
 800b612:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b616:	f7f4 feed 	bl	80003f4 <__aeabi_i2d>
 800b61a:	2600      	movs	r6, #0
 800b61c:	2700      	movs	r7, #0
 800b61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b620:	e9c5 0100 	strd	r0, r1, [r5]
 800b624:	3b08      	subs	r3, #8
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	9504      	str	r5, [sp, #16]
 800b62a:	9b07      	ldr	r3, [sp, #28]
 800b62c:	4599      	cmp	r9, r3
 800b62e:	dd05      	ble.n	800b63c <__kernel_rem_pio2+0x3a8>
 800b630:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800b634:	f108 0801 	add.w	r8, r8, #1
 800b638:	3508      	adds	r5, #8
 800b63a:	e7e0      	b.n	800b5fe <__kernel_rem_pio2+0x36a>
 800b63c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b640:	9900      	ldr	r1, [sp, #0]
 800b642:	f109 0901 	add.w	r9, r9, #1
 800b646:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b64a:	9100      	str	r1, [sp, #0]
 800b64c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800b650:	f8cd c010 	str.w	ip, [sp, #16]
 800b654:	f7f4 ff38 	bl	80004c8 <__aeabi_dmul>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4630      	mov	r0, r6
 800b65e:	4639      	mov	r1, r7
 800b660:	f7f4 fd7c 	bl	800015c <__adddf3>
 800b664:	4606      	mov	r6, r0
 800b666:	460f      	mov	r7, r1
 800b668:	e7df      	b.n	800b62a <__kernel_rem_pio2+0x396>
 800b66a:	3c01      	subs	r4, #1
 800b66c:	e755      	b.n	800b51a <__kernel_rem_pio2+0x286>
 800b66e:	f1cb 0200 	rsb	r2, fp, #0
 800b672:	4640      	mov	r0, r8
 800b674:	4649      	mov	r1, r9
 800b676:	f000 f94f 	bl	800b918 <scalbn>
 800b67a:	2200      	movs	r2, #0
 800b67c:	4ba3      	ldr	r3, [pc, #652]	; (800b90c <__kernel_rem_pio2+0x678>)
 800b67e:	4604      	mov	r4, r0
 800b680:	460d      	mov	r5, r1
 800b682:	f7f5 f9a7 	bl	80009d4 <__aeabi_dcmpge>
 800b686:	b1f8      	cbz	r0, 800b6c8 <__kernel_rem_pio2+0x434>
 800b688:	2200      	movs	r2, #0
 800b68a:	4ba1      	ldr	r3, [pc, #644]	; (800b910 <__kernel_rem_pio2+0x67c>)
 800b68c:	4620      	mov	r0, r4
 800b68e:	4629      	mov	r1, r5
 800b690:	f7f4 ff1a 	bl	80004c8 <__aeabi_dmul>
 800b694:	f7f5 f9c8 	bl	8000a28 <__aeabi_d2iz>
 800b698:	4607      	mov	r7, r0
 800b69a:	f7f4 feab 	bl	80003f4 <__aeabi_i2d>
 800b69e:	2200      	movs	r2, #0
 800b6a0:	4b9a      	ldr	r3, [pc, #616]	; (800b90c <__kernel_rem_pio2+0x678>)
 800b6a2:	f7f4 ff11 	bl	80004c8 <__aeabi_dmul>
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f7f4 fd53 	bl	8000158 <__aeabi_dsub>
 800b6b2:	f7f5 f9b9 	bl	8000a28 <__aeabi_d2iz>
 800b6b6:	1c74      	adds	r4, r6, #1
 800b6b8:	ab0c      	add	r3, sp, #48	; 0x30
 800b6ba:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b6be:	f10b 0b18 	add.w	fp, fp, #24
 800b6c2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800b6c6:	e730      	b.n	800b52a <__kernel_rem_pio2+0x296>
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7f5 f9ac 	bl	8000a28 <__aeabi_d2iz>
 800b6d0:	ab0c      	add	r3, sp, #48	; 0x30
 800b6d2:	4634      	mov	r4, r6
 800b6d4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b6d8:	e727      	b.n	800b52a <__kernel_rem_pio2+0x296>
 800b6da:	ab0c      	add	r3, sp, #48	; 0x30
 800b6dc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b6e0:	f7f4 fe88 	bl	80003f4 <__aeabi_i2d>
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	463b      	mov	r3, r7
 800b6e8:	f7f4 feee 	bl	80004c8 <__aeabi_dmul>
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	e86b 0102 	strd	r0, r1, [fp], #-8
 800b6f2:	464b      	mov	r3, r9
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	4639      	mov	r1, r7
 800b6f8:	f7f4 fee6 	bl	80004c8 <__aeabi_dmul>
 800b6fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b700:	4606      	mov	r6, r0
 800b702:	460f      	mov	r7, r1
 800b704:	e721      	b.n	800b54a <__kernel_rem_pio2+0x2b6>
 800b706:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b70a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b70e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800b712:	f8cd c01c 	str.w	ip, [sp, #28]
 800b716:	f7f4 fed7 	bl	80004c8 <__aeabi_dmul>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	4650      	mov	r0, sl
 800b720:	4659      	mov	r1, fp
 800b722:	f7f4 fd1b 	bl	800015c <__adddf3>
 800b726:	4682      	mov	sl, r0
 800b728:	468b      	mov	fp, r1
 800b72a:	f108 0801 	add.w	r8, r8, #1
 800b72e:	9b02      	ldr	r3, [sp, #8]
 800b730:	4598      	cmp	r8, r3
 800b732:	dc01      	bgt.n	800b738 <__kernel_rem_pio2+0x4a4>
 800b734:	45b8      	cmp	r8, r7
 800b736:	dde6      	ble.n	800b706 <__kernel_rem_pio2+0x472>
 800b738:	ab48      	add	r3, sp, #288	; 0x120
 800b73a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b73e:	e9c7 ab00 	strd	sl, fp, [r7]
 800b742:	3e01      	subs	r6, #1
 800b744:	e706      	b.n	800b554 <__kernel_rem_pio2+0x2c0>
 800b746:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b748:	2b02      	cmp	r3, #2
 800b74a:	dc09      	bgt.n	800b760 <__kernel_rem_pio2+0x4cc>
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dc32      	bgt.n	800b7b6 <__kernel_rem_pio2+0x522>
 800b750:	d058      	beq.n	800b804 <__kernel_rem_pio2+0x570>
 800b752:	9b04      	ldr	r3, [sp, #16]
 800b754:	f003 0007 	and.w	r0, r3, #7
 800b758:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b760:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b762:	2b03      	cmp	r3, #3
 800b764:	d1f5      	bne.n	800b752 <__kernel_rem_pio2+0x4be>
 800b766:	ab48      	add	r3, sp, #288	; 0x120
 800b768:	441d      	add	r5, r3
 800b76a:	46aa      	mov	sl, r5
 800b76c:	46a3      	mov	fp, r4
 800b76e:	f1bb 0f00 	cmp.w	fp, #0
 800b772:	dc74      	bgt.n	800b85e <__kernel_rem_pio2+0x5ca>
 800b774:	46aa      	mov	sl, r5
 800b776:	46a3      	mov	fp, r4
 800b778:	f1bb 0f01 	cmp.w	fp, #1
 800b77c:	f300 808e 	bgt.w	800b89c <__kernel_rem_pio2+0x608>
 800b780:	2700      	movs	r7, #0
 800b782:	463e      	mov	r6, r7
 800b784:	2c01      	cmp	r4, #1
 800b786:	f300 80a8 	bgt.w	800b8da <__kernel_rem_pio2+0x646>
 800b78a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800b78e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800b792:	9b00      	ldr	r3, [sp, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f040 80aa 	bne.w	800b8ee <__kernel_rem_pio2+0x65a>
 800b79a:	4603      	mov	r3, r0
 800b79c:	462a      	mov	r2, r5
 800b79e:	9806      	ldr	r0, [sp, #24]
 800b7a0:	e9c0 2300 	strd	r2, r3, [r0]
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b7ac:	463a      	mov	r2, r7
 800b7ae:	4633      	mov	r3, r6
 800b7b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b7b4:	e7cd      	b.n	800b752 <__kernel_rem_pio2+0x4be>
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	46a0      	mov	r8, r4
 800b7ba:	4601      	mov	r1, r0
 800b7bc:	ab48      	add	r3, sp, #288	; 0x120
 800b7be:	441d      	add	r5, r3
 800b7c0:	f1b8 0f00 	cmp.w	r8, #0
 800b7c4:	da38      	bge.n	800b838 <__kernel_rem_pio2+0x5a4>
 800b7c6:	9b00      	ldr	r3, [sp, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d03c      	beq.n	800b846 <__kernel_rem_pio2+0x5b2>
 800b7cc:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	462b      	mov	r3, r5
 800b7d4:	9d06      	ldr	r5, [sp, #24]
 800b7d6:	2601      	movs	r6, #1
 800b7d8:	e9c5 2300 	strd	r2, r3, [r5]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b7e2:	f7f4 fcb9 	bl	8000158 <__aeabi_dsub>
 800b7e6:	4684      	mov	ip, r0
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	ad48      	add	r5, sp, #288	; 0x120
 800b7ec:	42b4      	cmp	r4, r6
 800b7ee:	da2c      	bge.n	800b84a <__kernel_rem_pio2+0x5b6>
 800b7f0:	9b00      	ldr	r3, [sp, #0]
 800b7f2:	b10b      	cbz	r3, 800b7f8 <__kernel_rem_pio2+0x564>
 800b7f4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b7f8:	4662      	mov	r2, ip
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	9906      	ldr	r1, [sp, #24]
 800b7fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b802:	e7a6      	b.n	800b752 <__kernel_rem_pio2+0x4be>
 800b804:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800b806:	ab48      	add	r3, sp, #288	; 0x120
 800b808:	4637      	mov	r7, r6
 800b80a:	441d      	add	r5, r3
 800b80c:	2c00      	cmp	r4, #0
 800b80e:	da09      	bge.n	800b824 <__kernel_rem_pio2+0x590>
 800b810:	9b00      	ldr	r3, [sp, #0]
 800b812:	b10b      	cbz	r3, 800b818 <__kernel_rem_pio2+0x584>
 800b814:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b818:	4632      	mov	r2, r6
 800b81a:	463b      	mov	r3, r7
 800b81c:	9906      	ldr	r1, [sp, #24]
 800b81e:	e9c1 2300 	strd	r2, r3, [r1]
 800b822:	e796      	b.n	800b752 <__kernel_rem_pio2+0x4be>
 800b824:	4630      	mov	r0, r6
 800b826:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b82a:	4639      	mov	r1, r7
 800b82c:	f7f4 fc96 	bl	800015c <__adddf3>
 800b830:	3c01      	subs	r4, #1
 800b832:	4606      	mov	r6, r0
 800b834:	460f      	mov	r7, r1
 800b836:	e7e9      	b.n	800b80c <__kernel_rem_pio2+0x578>
 800b838:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b83c:	f7f4 fc8e 	bl	800015c <__adddf3>
 800b840:	f108 38ff 	add.w	r8, r8, #4294967295
 800b844:	e7bc      	b.n	800b7c0 <__kernel_rem_pio2+0x52c>
 800b846:	460d      	mov	r5, r1
 800b848:	e7c2      	b.n	800b7d0 <__kernel_rem_pio2+0x53c>
 800b84a:	4660      	mov	r0, ip
 800b84c:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800b850:	4639      	mov	r1, r7
 800b852:	f7f4 fc83 	bl	800015c <__adddf3>
 800b856:	3601      	adds	r6, #1
 800b858:	4684      	mov	ip, r0
 800b85a:	460f      	mov	r7, r1
 800b85c:	e7c6      	b.n	800b7ec <__kernel_rem_pio2+0x558>
 800b85e:	e9da 6700 	ldrd	r6, r7, [sl]
 800b862:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800b866:	4632      	mov	r2, r6
 800b868:	463b      	mov	r3, r7
 800b86a:	4640      	mov	r0, r8
 800b86c:	4649      	mov	r1, r9
 800b86e:	f7f4 fc75 	bl	800015c <__adddf3>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b87a:	4640      	mov	r0, r8
 800b87c:	4649      	mov	r1, r9
 800b87e:	f7f4 fc6b 	bl	8000158 <__aeabi_dsub>
 800b882:	4632      	mov	r2, r6
 800b884:	463b      	mov	r3, r7
 800b886:	f7f4 fc69 	bl	800015c <__adddf3>
 800b88a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b88e:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b892:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b896:	e9ca 2300 	strd	r2, r3, [sl]
 800b89a:	e768      	b.n	800b76e <__kernel_rem_pio2+0x4da>
 800b89c:	e9da 8900 	ldrd	r8, r9, [sl]
 800b8a0:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f4 fc56 	bl	800015c <__adddf3>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	f7f4 fc4c 	bl	8000158 <__aeabi_dsub>
 800b8c0:	4642      	mov	r2, r8
 800b8c2:	464b      	mov	r3, r9
 800b8c4:	f7f4 fc4a 	bl	800015c <__adddf3>
 800b8c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8cc:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b8d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b8d4:	e9ca 2300 	strd	r2, r3, [sl]
 800b8d8:	e74e      	b.n	800b778 <__kernel_rem_pio2+0x4e4>
 800b8da:	4638      	mov	r0, r7
 800b8dc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b8e0:	4631      	mov	r1, r6
 800b8e2:	f7f4 fc3b 	bl	800015c <__adddf3>
 800b8e6:	3c01      	subs	r4, #1
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	460e      	mov	r6, r1
 800b8ec:	e74a      	b.n	800b784 <__kernel_rem_pio2+0x4f0>
 800b8ee:	9b06      	ldr	r3, [sp, #24]
 800b8f0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b8f4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b8f8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b8fc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b900:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b904:	601d      	str	r5, [r3, #0]
 800b906:	615e      	str	r6, [r3, #20]
 800b908:	e723      	b.n	800b752 <__kernel_rem_pio2+0x4be>
 800b90a:	bf00      	nop
 800b90c:	41700000 	.word	0x41700000
 800b910:	3e700000 	.word	0x3e700000
 800b914:	00000000 	.word	0x00000000

0800b918 <scalbn>:
 800b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91a:	4616      	mov	r6, r2
 800b91c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b920:	4604      	mov	r4, r0
 800b922:	460d      	mov	r5, r1
 800b924:	460b      	mov	r3, r1
 800b926:	b992      	cbnz	r2, 800b94e <scalbn+0x36>
 800b928:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b92c:	4303      	orrs	r3, r0
 800b92e:	d03c      	beq.n	800b9aa <scalbn+0x92>
 800b930:	4b31      	ldr	r3, [pc, #196]	; (800b9f8 <scalbn+0xe0>)
 800b932:	2200      	movs	r2, #0
 800b934:	f7f4 fdc8 	bl	80004c8 <__aeabi_dmul>
 800b938:	4b30      	ldr	r3, [pc, #192]	; (800b9fc <scalbn+0xe4>)
 800b93a:	4604      	mov	r4, r0
 800b93c:	429e      	cmp	r6, r3
 800b93e:	460d      	mov	r5, r1
 800b940:	da0f      	bge.n	800b962 <scalbn+0x4a>
 800b942:	a329      	add	r3, pc, #164	; (adr r3, 800b9e8 <scalbn+0xd0>)
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	f7f4 fdbe 	bl	80004c8 <__aeabi_dmul>
 800b94c:	e006      	b.n	800b95c <scalbn+0x44>
 800b94e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800b952:	42ba      	cmp	r2, r7
 800b954:	d109      	bne.n	800b96a <scalbn+0x52>
 800b956:	4602      	mov	r2, r0
 800b958:	f7f4 fc00 	bl	800015c <__adddf3>
 800b95c:	4604      	mov	r4, r0
 800b95e:	460d      	mov	r5, r1
 800b960:	e023      	b.n	800b9aa <scalbn+0x92>
 800b962:	460b      	mov	r3, r1
 800b964:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b968:	3a36      	subs	r2, #54	; 0x36
 800b96a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b96e:	428e      	cmp	r6, r1
 800b970:	dd0e      	ble.n	800b990 <scalbn+0x78>
 800b972:	a31f      	add	r3, pc, #124	; (adr r3, 800b9f0 <scalbn+0xd8>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b97c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b980:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b984:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b988:	481d      	ldr	r0, [pc, #116]	; (800ba00 <scalbn+0xe8>)
 800b98a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b98e:	e7db      	b.n	800b948 <scalbn+0x30>
 800b990:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b994:	4432      	add	r2, r6
 800b996:	428a      	cmp	r2, r1
 800b998:	dceb      	bgt.n	800b972 <scalbn+0x5a>
 800b99a:	2a00      	cmp	r2, #0
 800b99c:	dd08      	ble.n	800b9b0 <scalbn+0x98>
 800b99e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9a6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9b0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b9b4:	da0c      	bge.n	800b9d0 <scalbn+0xb8>
 800b9b6:	a30c      	add	r3, pc, #48	; (adr r3, 800b9e8 <scalbn+0xd0>)
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b9c0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b9c4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b9c8:	480e      	ldr	r0, [pc, #56]	; (800ba04 <scalbn+0xec>)
 800b9ca:	f041 011f 	orr.w	r1, r1, #31
 800b9ce:	e7bb      	b.n	800b948 <scalbn+0x30>
 800b9d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9d4:	3236      	adds	r2, #54	; 0x36
 800b9d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b9de:	4620      	mov	r0, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	4b08      	ldr	r3, [pc, #32]	; (800ba08 <scalbn+0xf0>)
 800b9e6:	e7af      	b.n	800b948 <scalbn+0x30>
 800b9e8:	c2f8f359 	.word	0xc2f8f359
 800b9ec:	01a56e1f 	.word	0x01a56e1f
 800b9f0:	8800759c 	.word	0x8800759c
 800b9f4:	7e37e43c 	.word	0x7e37e43c
 800b9f8:	43500000 	.word	0x43500000
 800b9fc:	ffff3cb0 	.word	0xffff3cb0
 800ba00:	8800759c 	.word	0x8800759c
 800ba04:	c2f8f359 	.word	0xc2f8f359
 800ba08:	3c900000 	.word	0x3c900000
 800ba0c:	00000000 	.word	0x00000000

0800ba10 <floor>:
 800ba10:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba18:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ba1c:	2e13      	cmp	r6, #19
 800ba1e:	460b      	mov	r3, r1
 800ba20:	4607      	mov	r7, r0
 800ba22:	460c      	mov	r4, r1
 800ba24:	4605      	mov	r5, r0
 800ba26:	dc32      	bgt.n	800ba8e <floor+0x7e>
 800ba28:	2e00      	cmp	r6, #0
 800ba2a:	da14      	bge.n	800ba56 <floor+0x46>
 800ba2c:	a334      	add	r3, pc, #208	; (adr r3, 800bb00 <floor+0xf0>)
 800ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba32:	f7f4 fb93 	bl	800015c <__adddf3>
 800ba36:	2200      	movs	r2, #0
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f7f4 ffd5 	bl	80009e8 <__aeabi_dcmpgt>
 800ba3e:	b138      	cbz	r0, 800ba50 <floor+0x40>
 800ba40:	2c00      	cmp	r4, #0
 800ba42:	da56      	bge.n	800baf2 <floor+0xe2>
 800ba44:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ba48:	4325      	orrs	r5, r4
 800ba4a:	d055      	beq.n	800baf8 <floor+0xe8>
 800ba4c:	2500      	movs	r5, #0
 800ba4e:	4c2e      	ldr	r4, [pc, #184]	; (800bb08 <floor+0xf8>)
 800ba50:	4623      	mov	r3, r4
 800ba52:	462f      	mov	r7, r5
 800ba54:	e025      	b.n	800baa2 <floor+0x92>
 800ba56:	4a2d      	ldr	r2, [pc, #180]	; (800bb0c <floor+0xfc>)
 800ba58:	fa42 f806 	asr.w	r8, r2, r6
 800ba5c:	ea01 0208 	and.w	r2, r1, r8
 800ba60:	4302      	orrs	r2, r0
 800ba62:	d01e      	beq.n	800baa2 <floor+0x92>
 800ba64:	a326      	add	r3, pc, #152	; (adr r3, 800bb00 <floor+0xf0>)
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	f7f4 fb77 	bl	800015c <__adddf3>
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2300      	movs	r3, #0
 800ba72:	f7f4 ffb9 	bl	80009e8 <__aeabi_dcmpgt>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d0ea      	beq.n	800ba50 <floor+0x40>
 800ba7a:	2c00      	cmp	r4, #0
 800ba7c:	bfbe      	ittt	lt
 800ba7e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ba82:	4133      	asrlt	r3, r6
 800ba84:	18e4      	addlt	r4, r4, r3
 800ba86:	2500      	movs	r5, #0
 800ba88:	ea24 0408 	bic.w	r4, r4, r8
 800ba8c:	e7e0      	b.n	800ba50 <floor+0x40>
 800ba8e:	2e33      	cmp	r6, #51	; 0x33
 800ba90:	dd0b      	ble.n	800baaa <floor+0x9a>
 800ba92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ba96:	d104      	bne.n	800baa2 <floor+0x92>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	f7f4 fb5f 	bl	800015c <__adddf3>
 800ba9e:	4607      	mov	r7, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4638      	mov	r0, r7
 800baa4:	4619      	mov	r1, r3
 800baa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baaa:	f04f 38ff 	mov.w	r8, #4294967295
 800baae:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bab2:	fa28 f802 	lsr.w	r8, r8, r2
 800bab6:	ea10 0f08 	tst.w	r0, r8
 800baba:	d0f2      	beq.n	800baa2 <floor+0x92>
 800babc:	a310      	add	r3, pc, #64	; (adr r3, 800bb00 <floor+0xf0>)
 800babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac2:	f7f4 fb4b 	bl	800015c <__adddf3>
 800bac6:	2200      	movs	r2, #0
 800bac8:	2300      	movs	r3, #0
 800baca:	f7f4 ff8d 	bl	80009e8 <__aeabi_dcmpgt>
 800bace:	2800      	cmp	r0, #0
 800bad0:	d0be      	beq.n	800ba50 <floor+0x40>
 800bad2:	2c00      	cmp	r4, #0
 800bad4:	da0a      	bge.n	800baec <floor+0xdc>
 800bad6:	2e14      	cmp	r6, #20
 800bad8:	d101      	bne.n	800bade <floor+0xce>
 800bada:	3401      	adds	r4, #1
 800badc:	e006      	b.n	800baec <floor+0xdc>
 800bade:	2301      	movs	r3, #1
 800bae0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bae4:	40b3      	lsls	r3, r6
 800bae6:	441d      	add	r5, r3
 800bae8:	42af      	cmp	r7, r5
 800baea:	d8f6      	bhi.n	800bada <floor+0xca>
 800baec:	ea25 0508 	bic.w	r5, r5, r8
 800baf0:	e7ae      	b.n	800ba50 <floor+0x40>
 800baf2:	2500      	movs	r5, #0
 800baf4:	462c      	mov	r4, r5
 800baf6:	e7ab      	b.n	800ba50 <floor+0x40>
 800baf8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bafc:	e7a8      	b.n	800ba50 <floor+0x40>
 800bafe:	bf00      	nop
 800bb00:	8800759c 	.word	0x8800759c
 800bb04:	7e37e43c 	.word	0x7e37e43c
 800bb08:	bff00000 	.word	0xbff00000
 800bb0c:	000fffff 	.word	0x000fffff

0800bb10 <_init>:
 800bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb12:	bf00      	nop
 800bb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb16:	bc08      	pop	{r3}
 800bb18:	469e      	mov	lr, r3
 800bb1a:	4770      	bx	lr

0800bb1c <_fini>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	bf00      	nop
 800bb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb22:	bc08      	pop	{r3}
 800bb24:	469e      	mov	lr, r3
 800bb26:	4770      	bx	lr
